{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/shenma-site-verification.txt","path":"shenma-site-verification.txt","modified":0,"renderable":0},{"_id":"source/favicon_bak_big.ico","path":"favicon_bak_big.ico","modified":0,"renderable":0},{"_id":"source/images/hexo1.jpg","path":"images/hexo1.jpg","modified":0,"renderable":0},{"_id":"source/images/hexo2.jpg","path":"images/hexo2.jpg","modified":0,"renderable":0},{"_id":"source/images/hexo3.jpg","path":"images/hexo3.jpg","modified":0,"renderable":0},{"_id":"source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":0},{"_id":"source/images/stress_circle.png","path":"images/stress_circle.png","modified":0,"renderable":0},{"_id":"source/images/wxCode.jpg","path":"images/wxCode.jpg","modified":0,"renderable":0},{"_id":"source/images/Slogan.png","path":"images/Slogan.png","modified":0,"renderable":0},{"_id":"source/images/maupassant.jpg","path":"images/maupassant.jpg","modified":0,"renderable":0},{"_id":"source/images/profile_bak_big.jpg","path":"images/profile_bak_big.jpg","modified":0,"renderable":0},{"_id":"source/images/schedule v3.0.png","path":"images/schedule v3.0.png","modified":0,"renderable":0},{"_id":"source/images/ai/05.png","path":"images/ai/05.png","modified":0,"renderable":0},{"_id":"source/images/ai/06.png","path":"images/ai/06.png","modified":0,"renderable":0},{"_id":"source/images/ai/07.png","path":"images/ai/07.png","modified":0,"renderable":0},{"_id":"source/images/ai/08.png","path":"images/ai/08.png","modified":0,"renderable":0},{"_id":"source/images/ai/09.png","path":"images/ai/09.png","modified":0,"renderable":0},{"_id":"source/images/ai/10.png","path":"images/ai/10.png","modified":0,"renderable":0},{"_id":"source/images/ai/11.png","path":"images/ai/11.png","modified":0,"renderable":0},{"_id":"source/images/ai/12.png","path":"images/ai/12.png","modified":0,"renderable":0},{"_id":"source/images/ai/13.png","path":"images/ai/13.png","modified":0,"renderable":0},{"_id":"source/images/ai/14.png","path":"images/ai/14.png","modified":0,"renderable":0},{"_id":"source/images/ai/16.png","path":"images/ai/16.png","modified":0,"renderable":0},{"_id":"source/images/ai/17.png","path":"images/ai/17.png","modified":0,"renderable":0},{"_id":"source/images/ai/18.png","path":"images/ai/18.png","modified":0,"renderable":0},{"_id":"source/images/ai/20.png","path":"images/ai/20.png","modified":0,"renderable":0},{"_id":"source/images/ai/23.png","path":"images/ai/23.png","modified":0,"renderable":0},{"_id":"source/images/ai/24.png","path":"images/ai/24.png","modified":0,"renderable":0},{"_id":"source/images/ai/25.png","path":"images/ai/25.png","modified":0,"renderable":0},{"_id":"source/images/ai/26.png","path":"images/ai/26.png","modified":0,"renderable":0},{"_id":"source/images/ai/27.png","path":"images/ai/27.png","modified":0,"renderable":0},{"_id":"source/images/ai/28.png","path":"images/ai/28.png","modified":0,"renderable":0},{"_id":"source/images/ai/29.png","path":"images/ai/29.png","modified":0,"renderable":0},{"_id":"source/images/ai/31.png","path":"images/ai/31.png","modified":0,"renderable":0},{"_id":"source/images/ai/32.png","path":"images/ai/32.png","modified":0,"renderable":0},{"_id":"source/images/ai/33.png","path":"images/ai/33.png","modified":0,"renderable":0},{"_id":"source/images/ai/34.png","path":"images/ai/34.png","modified":0,"renderable":0},{"_id":"source/images/ai/35.png","path":"images/ai/35.png","modified":0,"renderable":0},{"_id":"source/images/ai/38.png","path":"images/ai/38.png","modified":0,"renderable":0},{"_id":"source/images/ai/40.png","path":"images/ai/40.png","modified":0,"renderable":0},{"_id":"source/images/ai/41.png","path":"images/ai/41.png","modified":0,"renderable":0},{"_id":"source/images/ai/42.png","path":"images/ai/42.png","modified":0,"renderable":0},{"_id":"source/images/ai/44.png","path":"images/ai/44.png","modified":0,"renderable":0},{"_id":"source/images/ai/45.png","path":"images/ai/45.png","modified":0,"renderable":0},{"_id":"source/images/blog/blog-counter.gif","path":"images/blog/blog-counter.gif","modified":0,"renderable":0},{"_id":"source/images/blog/google_search.png","path":"images/blog/google_search.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search3.png","path":"images/blog/google_search3.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search4.png","path":"images/blog/google_search4.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search5.png","path":"images/blog/google_search5.png","modified":0,"renderable":0},{"_id":"source/images/continuous_action.png","path":"images/continuous_action.png","modified":0,"renderable":0},{"_id":"source/images/devtools/020.png","path":"images/devtools/020.png","modified":0,"renderable":0},{"_id":"source/images/devtools/030.png","path":"images/devtools/030.png","modified":0,"renderable":0},{"_id":"source/images/devtools/060.png","path":"images/devtools/060.png","modified":0,"renderable":0},{"_id":"source/images/devtools/100.png","path":"images/devtools/100.png","modified":0,"renderable":0},{"_id":"source/images/devtools/110.png","path":"images/devtools/110.png","modified":0,"renderable":0},{"_id":"source/images/devtools/120.png","path":"images/devtools/120.png","modified":0,"renderable":0},{"_id":"source/images/devtools/132.png","path":"images/devtools/132.png","modified":0,"renderable":0},{"_id":"source/images/devtools/150.png","path":"images/devtools/150.png","modified":0,"renderable":0},{"_id":"source/images/devtools/135.gif","path":"images/devtools/135.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/140.png","path":"images/devtools/140.png","modified":0,"renderable":0},{"_id":"source/images/devtools/160.png","path":"images/devtools/160.png","modified":0,"renderable":0},{"_id":"source/images/devtools/170.png","path":"images/devtools/170.png","modified":0,"renderable":0},{"_id":"source/images/devtools/180.png","path":"images/devtools/180.png","modified":0,"renderable":0},{"_id":"source/images/devtools/190.png","path":"images/devtools/190.png","modified":0,"renderable":0},{"_id":"source/images/devtools/191.png","path":"images/devtools/191.png","modified":0,"renderable":0},{"_id":"source/images/devtools/204.png","path":"images/devtools/204.png","modified":0,"renderable":0},{"_id":"source/images/devtools/205.png","path":"images/devtools/205.png","modified":0,"renderable":0},{"_id":"source/images/devtools/209.png","path":"images/devtools/209.png","modified":0,"renderable":0},{"_id":"source/images/devtools/210.png","path":"images/devtools/210.png","modified":0,"renderable":0},{"_id":"source/images/devtools/211.png","path":"images/devtools/211.png","modified":0,"renderable":0},{"_id":"source/images/devtools/214.png","path":"images/devtools/214.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font02.png","path":"images/gitbook/web_font02.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font04.png","path":"images/gitbook/web_font04.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt01.png","path":"images/grunt/grunt01.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt02.png","path":"images/grunt/grunt02.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt03.png","path":"images/grunt/grunt03.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt04.png","path":"images/grunt/grunt04.png","modified":0,"renderable":0},{"_id":"source/images/movie/bwbj2.jpg","path":"images/movie/bwbj2.jpg","modified":0,"renderable":0},{"_id":"source/images/movie/no_war.jpg","path":"images/movie/no_war.jpg","modified":0,"renderable":0},{"_id":"source/images/post/000.png","path":"images/post/000.png","modified":0,"renderable":0},{"_id":"source/images/post/002.png","path":"images/post/002.png","modified":0,"renderable":0},{"_id":"source/images/post/006.png","path":"images/post/006.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/10.png","path":"images/stateofjs/10.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/11.png","path":"images/stateofjs/11.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/12.png","path":"images/stateofjs/12.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/13.png","path":"images/stateofjs/13.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/14.png","path":"images/stateofjs/14.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/15.png","path":"images/stateofjs/15.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/16.png","path":"images/stateofjs/16.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/17.png","path":"images/stateofjs/17.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/18.png","path":"images/stateofjs/18.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/19.png","path":"images/stateofjs/19.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/20.png","path":"images/stateofjs/20.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/2.png","path":"images/stateofjs/2.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/21.png","path":"images/stateofjs/21.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/22.png","path":"images/stateofjs/22.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/23.png","path":"images/stateofjs/23.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/3.png","path":"images/stateofjs/3.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/4.png","path":"images/stateofjs/4.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/5.png","path":"images/stateofjs/5.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/6.png","path":"images/stateofjs/6.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/7.png","path":"images/stateofjs/7.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/8.png","path":"images/stateofjs/8.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/9.png","path":"images/stateofjs/9.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/images/ai/01.png","path":"images/ai/01.png","modified":0,"renderable":0},{"_id":"source/images/ai/03.png","path":"images/ai/03.png","modified":0,"renderable":0},{"_id":"source/images/ai/15.png","path":"images/ai/15.png","modified":0,"renderable":0},{"_id":"source/images/ai/21.png","path":"images/ai/21.png","modified":0,"renderable":0},{"_id":"source/images/ai/39.png","path":"images/ai/39.png","modified":0,"renderable":0},{"_id":"source/images/ai/43.png","path":"images/ai/43.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search2.png","path":"images/blog/google_search2.png","modified":0,"renderable":0},{"_id":"source/images/blog/scarsu-baidu.png","path":"images/blog/scarsu-baidu.png","modified":0,"renderable":0},{"_id":"source/images/blog/shenma.png","path":"images/blog/shenma.png","modified":0,"renderable":0},{"_id":"source/images/devtools/000.png","path":"images/devtools/000.png","modified":0,"renderable":0},{"_id":"source/images/devtools/010.png","path":"images/devtools/010.png","modified":0,"renderable":0},{"_id":"source/images/devtools/011.png","path":"images/devtools/011.png","modified":0,"renderable":0},{"_id":"source/images/devtools/051.png","path":"images/devtools/051.png","modified":0,"renderable":0},{"_id":"source/images/devtools/130.png","path":"images/devtools/130.png","modified":0,"renderable":0},{"_id":"source/images/devtools/131.png","path":"images/devtools/131.png","modified":0,"renderable":0},{"_id":"source/images/devtools/133.gif","path":"images/devtools/133.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/200.png","path":"images/devtools/200.png","modified":0,"renderable":0},{"_id":"source/images/devtools/203.gif","path":"images/devtools/203.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/207.png","path":"images/devtools/207.png","modified":0,"renderable":0},{"_id":"source/images/devtools/211.gif","path":"images/devtools/211.gif","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font01.png","path":"images/gitbook/web_font01.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font03.png","path":"images/gitbook/web_font03.png","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml1.gif","path":"images/movie/tsaml1.gif","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml3.jpeg","path":"images/movie/tsaml3.jpeg","modified":0,"renderable":0},{"_id":"source/images/notion/ds.png","path":"images/notion/ds.png","modified":0,"renderable":0},{"_id":"source/images/notion/header.png","path":"images/notion/header.png","modified":0,"renderable":0},{"_id":"source/images/post/003.png","path":"images/post/003.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/1.png","path":"images/stateofjs/1.png","modified":0,"renderable":0},{"_id":"source/images/ai/19.png","path":"images/ai/19.png","modified":0,"renderable":0},{"_id":"source/images/ai/30.png","path":"images/ai/30.png","modified":0,"renderable":0},{"_id":"source/images/ai/36.png","path":"images/ai/36.png","modified":0,"renderable":0},{"_id":"source/images/ai/37.png","path":"images/ai/37.png","modified":0,"renderable":0},{"_id":"source/images/devtools/201.gif","path":"images/devtools/201.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/212.gif","path":"images/devtools/212.gif","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs4.jpeg","path":"images/movie/rsgs4.jpeg","modified":0,"renderable":0},{"_id":"source/images/post/004.png","path":"images/post/004.png","modified":0,"renderable":0},{"_id":"source/images/self_control.png","path":"images/self_control.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/000.png","path":"images/stateofjs/000.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/001.png","path":"images/stateofjs/001.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"source/images/ai/22.png","path":"images/ai/22.png","modified":0,"renderable":0},{"_id":"source/images/devtools/040.png","path":"images/devtools/040.png","modified":0,"renderable":0},{"_id":"source/images/devtools/208.gif","path":"images/devtools/208.gif","modified":0,"renderable":0},{"_id":"source/images/notion/home.png","path":"images/notion/home.png","modified":0,"renderable":0},{"_id":"source/images/post/005.png","path":"images/post/005.png","modified":0,"renderable":0},{"_id":"source/images/ai/02.png","path":"images/ai/02.png","modified":0,"renderable":0},{"_id":"source/images/devtools/050.png","path":"images/devtools/050.png","modified":0,"renderable":0},{"_id":"source/images/movie/agzz3.jpeg","path":"images/movie/agzz3.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/jrayty.png","path":"images/movie/jrayty.png","modified":0,"renderable":0},{"_id":"source/images/post/001.png","path":"images/post/001.png","modified":0,"renderable":0},{"_id":"source/images/devtools/202.gif","path":"images/devtools/202.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/207.gif","path":"images/devtools/207.gif","modified":0,"renderable":0},{"_id":"source/images/movie/agzz2.jpeg","path":"images/movie/agzz2.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml4.jpeg","path":"images/movie/tsaml4.jpeg","modified":0,"renderable":0},{"_id":"source/images/ai/04.png","path":"images/ai/04.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs2.jpeg","path":"images/movie/rsgs2.jpeg","modified":0,"renderable":0},{"_id":"source/images/devtools/206.gif","path":"images/devtools/206.gif","modified":0,"renderable":0},{"_id":"source/images/movie/agzz1.jpeg","path":"images/movie/agzz1.jpeg","modified":0,"renderable":0},{"_id":"source/images/devtools/213.gif","path":"images/devtools/213.gif","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs3.jpeg","path":"images/movie/rsgs3.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml2.png","path":"images/movie/tsaml2.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs1.jpeg","path":"images/movie/rsgs1.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/wmsj2.png","path":"images/movie/wmsj2.png","modified":0,"renderable":0},{"_id":"source/images/movie/bwbj1.png","path":"images/movie/bwbj1.png","modified":0,"renderable":0},{"_id":"source/images/movie/wmsj.jpeg","path":"images/movie/wmsj.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/jcldxt.jpg","path":"images/movie/jcldxt.jpg","modified":0,"renderable":0},{"_id":"source/images/movie/prxd2.jpeg","path":"images/movie/prxd2.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/prxd1.jpeg","path":"images/movie/prxd1.jpeg","modified":0,"renderable":0},{"_id":"source/images/ai/47.png","path":"images/ai/47.png","modified":0,"renderable":0},{"_id":"source/images/ai/49.png","path":"images/ai/49.png","modified":0,"renderable":0},{"_id":"source/images/ai/52.png","path":"images/ai/52.png","modified":0,"renderable":0},{"_id":"source/images/ai/51.png","path":"images/ai/51.png","modified":0,"renderable":0},{"_id":"source/images/ai/54.png","path":"images/ai/54.png","modified":0,"renderable":0},{"_id":"source/images/ai/53.png","path":"images/ai/53.png","modified":0,"renderable":0},{"_id":"source/images/ai/46.png","path":"images/ai/46.png","modified":0,"renderable":0},{"_id":"source/images/ai/48.png","path":"images/ai/48.png","modified":0,"renderable":0},{"_id":"source/images/ai/50.png","path":"images/ai/50.png","modified":0,"renderable":0},{"_id":"source/images/ai/000.gif","path":"images/ai/000.gif","modified":0,"renderable":0},{"_id":"source/images/ai/56.png","path":"images/ai/56.png","modified":0,"renderable":0},{"_id":"source/images/ai/57.png","path":"images/ai/57.png","modified":0,"renderable":0},{"_id":"source/images/ai/55.png","path":"images/ai/55.png","modified":0,"renderable":0},{"_id":"source/images/ai/58.png","path":"images/ai/58.png","modified":0,"renderable":0},{"_id":"source/images/ai/60.png","path":"images/ai/60.png","modified":0,"renderable":0},{"_id":"source/images/ai/61.png","path":"images/ai/61.png","modified":0,"renderable":0},{"_id":"source/images/ai/62.png","path":"images/ai/62.png","modified":0,"renderable":0},{"_id":"source/images/ai/63.png","path":"images/ai/63.png","modified":0,"renderable":0},{"_id":"source/images/ai/64.png","path":"images/ai/64.png","modified":0,"renderable":0},{"_id":"source/images/ai/65.png","path":"images/ai/65.png","modified":0,"renderable":0},{"_id":"source/images/ai/66.png","path":"images/ai/66.png","modified":0,"renderable":0},{"_id":"source/images/ai/59.png","path":"images/ai/59.png","modified":0,"renderable":0},{"_id":"source/images/ai/002.gif","path":"images/ai/002.gif","modified":0,"renderable":0},{"_id":"source/images/ai/001.gif","path":"images/ai/001.gif","modified":0,"renderable":0},{"_id":"source/images/ai/003.gif","path":"images/ai/003.gif","modified":0,"renderable":0},{"_id":"source/images/ai/67.png","path":"images/ai/67.png","modified":0,"renderable":0},{"_id":"source/images/vuex1.png","path":"images/vuex1.png","modified":0,"renderable":0},{"_id":"source/images/vuex3.png","path":"images/vuex3.png","modified":0,"renderable":0},{"_id":"source/images/vuex2.png","path":"images/vuex2.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1562302834000},{"_id":"source/shenma-site-verification.txt","hash":"979bbacec7aa2424f4c4d59366e2b92d313e6b53","modified":1576569180000},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1586306581543},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1586306581543},{"_id":"themes/maupassant/README.md","hash":"1c8631bc25c0f616e2dbd01c7fc224fa19eefdf3","modified":1586306581543},{"_id":"themes/maupassant/_config.yml","hash":"231e1e501f96cb47be441b6895786b14d66b44b4","modified":1587104535996},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1586306581574},{"_id":"source/_todo/bash.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/checklist2019.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/git.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/idea.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/os.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/package.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/resources.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/route.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/snippet.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/_todo/vsc.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587132658000},{"_id":"source/favicon_bak_big.ico","hash":"20054e2789b1a26d9ba34be4662a0910015b8c10","modified":1562302834000},{"_id":"source/404/index.md","hash":"11ee5f8b6f54addd9704523191ebb747c469d72d","modified":1586306581107},{"_id":"source/_posts/2018_javascript_report.md","hash":"9000ec3b867fc0784fae04d5e6ad8349dc041416","modified":1586306581109},{"_id":"source/_posts/33_js_concepts.md","hash":"3f0c3b5450f09dbf3415e15a2535e9895ad7786f","modified":1586306581111},{"_id":"source/_posts/360fe_01_html.md","hash":"accddf7cdfc0c96cc4340e0cdf480c8462778d3d","modified":1586306581112},{"_id":"source/_posts/360fe_02_css.md","hash":"dd99a85277cd6318b14855ab7cbeae238cf2c01b","modified":1586306581112},{"_id":"source/_posts/Animate.css.md","hash":"fe490928669e774ea6e6d7d58294d731d94db92e","modified":1586306581114},{"_id":"source/_posts/Danshari.md","hash":"cb6010fc5dfc43e54b6c661502514ec83aa249b5","modified":1576142506000},{"_id":"source/_posts/ES6 Code Style.md","hash":"5ddd788ae855a7653061d3273783192292a58e15","modified":1586306581117},{"_id":"source/_posts/Fullpage.js.md","hash":"f4366480af5dedcca24717910202c68b90c01f1b","modified":1586306581117},{"_id":"source/_posts/ancient_magical_table.md","hash":"39300813c20634dd39562b6140d985d526cb1967","modified":1586306581118},{"_id":"source/_posts/behavior_decision.md","hash":"59dc5ad7461595ea336ee36c20f39f86b2a53042","modified":1588148242062},{"_id":"source/_posts/blog_history.md","hash":"49077acc8df8d195879dae1ec9f95835867cac65","modified":1587170984917},{"_id":"source/_posts/continuous_action.md","hash":"23763ab8ff35c503644b9c77ceb989c571c778ee","modified":1586306581121},{"_id":"source/_posts/debug_node.js_with_chrome.md","hash":"cd0329ff0986f1e487c296d19169d1cc4445424b","modified":1586306581122},{"_id":"source/_posts/devtools_01_intro.md","hash":"1e5b79b596e752221e9f8981b9ea33e6679a4ed3","modified":1587170984925},{"_id":"source/_posts/devtools_02_elements.md","hash":"01df22fea25986c6368b8dda223f51019d976ea1","modified":1587170984928},{"_id":"source/_posts/devtools_03_console.md","hash":"ade6eb670b6800e4855a134f5238d04374974b8a","modified":1587170984932},{"_id":"source/_posts/devtools_04_sources.md","hash":"9c46fa02eed2d3235360776efd8821acb87ad874","modified":1587170984937},{"_id":"source/_posts/devtools_05_network.md","hash":"b457e402f29e5366b3ccc4413fedada023e67091","modified":1587170984937},{"_id":"source/_posts/devtools_06_performance.md","hash":"fbebcbbd72299680c0611f2a62e9bc3419c88a2f","modified":1587344536263},{"_id":"source/_posts/devtools_07_memory.md","hash":"044cabf39d2019978d8e113b5bf70258d6b1f4df","modified":1587170984953},{"_id":"source/_posts/devtools_rookie_intro.md","hash":"ae055598aeced11eeb972046a6ed5095702d484c","modified":1587170984953},{"_id":"source/_posts/e_journal_by_notion.md","hash":"99b8b17aba0d99fd5f108ac67e7dfab8d44cd45d","modified":1587170984968},{"_id":"source/_posts/escape_from_the_world.md","hash":"76aaa9470c07091bc2e07acd37c885e1db02edf8","modified":1586306581123},{"_id":"source/_posts/fed_ml_01.md","hash":"e8e8ecec58d8e339e6ae8bf5affecc7bc4919728","modified":1588148248493},{"_id":"source/_posts/fed_ml_02_tensorflow.md","hash":"23258f4d3ce93eaab8c660fabd39e4fdd302dd0b","modified":1588036755318},{"_id":"source/_posts/fed_ml_03_tensor.md","hash":"b29e9ebe0f8cba4e465cbc538e4997b2382e54d3","modified":1588036758733},{"_id":"source/_posts/fed_ml_04_linear_regression.md","hash":"8670d155743de3ba6d76d38a205164f1ce032715","modified":1588036763959},{"_id":"source/_posts/fed_ml_05_normalize.md","hash":"92201fd4d79b1482ba045b02ff62dd2a71574cef","modified":1588036767531},{"_id":"source/_posts/fed_ml_06_logistic_regression.md","hash":"326620130b29adabeed5bea36f99bed800fdb06d","modified":1588036770974},{"_id":"source/_posts/fed_ml_07_xor_regression.md","hash":"e14bfa938e5021648d86499385e2d02b0529485e","modified":1588036774570},{"_id":"source/_posts/fed_ml_08_iris.md","hash":"a9748cb127ec978c3ea9154fff2b84917ef745f8","modified":1588036777859},{"_id":"source/_posts/grunt.md","hash":"9c620627fa31421bc18fe523191a351f4b1a1068","modified":1586306581132},{"_id":"source/_posts/hello_hexo.md","hash":"5ce1f3d9f95f2327fe75668cae7cba2be2db17bd","modified":1587170984968},{"_id":"source/_posts/highly_configurable_low_maintenance_blog_build_guide.md","hash":"e5722245d65a2c335e03a55d306dba502712fb82","modified":1586306581134},{"_id":"source/_posts/iconfont.md","hash":"0d6656ac0226088a2a71d82d16e6eaa3cdbcb5cd","modified":1587170985015},{"_id":"source/_posts/life_courage.md","hash":"0f2e660a890e5b7c1073dad1b7873ae1aa686e09","modified":1586574649866},{"_id":"source/_posts/mongoDB_configuration.md","hash":"074f50956ccbba01fbfd7f569152731266c58d88","modified":1586306581136},{"_id":"source/_posts/nvm_for_windows.md","hash":"4ae471889492586c1b675ebaf1fae02114fd74fa","modified":1586306581137},{"_id":"source/_posts/poor_economics.md","hash":"370ef175c94bf9868caae078e543364b74f5341f","modified":1586306581138},{"_id":"source/_posts/self_control.md","hash":"ba1569ae6c20f3480b8b3b364da4b8b6d47837d5","modified":1586306581139},{"_id":"source/_posts/web_fonts.md","hash":"a269232f0cac09702b13d8c74b1d113e0c1cb1ce","modified":1587170985088},{"_id":"source/_source/2018_summary_and_2019_plan.md","hash":"dc26b6922c65f4103584fc276c6cf8a0d0aa76ac","modified":1586306581142},{"_id":"source/_source/devtools_01.md","hash":"3291d7dd67097f70a9fad519821f39dba33188f4","modified":1586306581143},{"_id":"source/_source/devtools_01_intro.md","hash":"92b06702f4ceedbfe7933f1725144d2729228a2a","modified":1586306581144},{"_id":"source/_source/devtools_02.md","hash":"1d55a9594a18c374a5ff28a5508700d47b936d5f","modified":1586306581145},{"_id":"source/_source/devtools_02_elements.md","hash":"32bbd820db048da21af319ab8a5007032410b248","modified":1586306581146},{"_id":"source/_source/devtools_03.md","hash":"2fe6943284e72dbf2a2b2c2d3ecb21a3ac97c3d4","modified":1586306581147},{"_id":"source/_source/devtools_03_console.md","hash":"0e376d555b4410f5705b8e55733912dc38dc1c3c","modified":1586306581149},{"_id":"source/_source/devtools_04.md","hash":"45a09a4f4dacc44096758cea662f8a3c149b8c7d","modified":1586306581150},{"_id":"source/_source/devtools_04_sources.md","hash":"bbeb046e49e38063bfaa2661b062c1f01dd8fa47","modified":1586306581151},{"_id":"source/_source/devtools_05_network.md","hash":"9c6b76883f67237dfc4e88902b6fbda26623da02","modified":1586306581153},{"_id":"source/_source/devtools_06_performance.md","hash":"c39cde7eb0062925089128e35bf43a5e049062ba","modified":1586306581153},{"_id":"source/_source/devtools_07_memory.md","hash":"58a7117e12756b3a56ec51ccce8dbbab304304fa","modified":1586306581153},{"_id":"source/_source/devtools_intro_share.md","hash":"45e98eb70fc37f6a54c7090bf006afa86c63c6ed","modified":1586306581153},{"_id":"source/_source/vm in devtools.md","hash":"3bb4d539f958b6998b91e5cbbfa09afd29a5bf9e","modified":1586306581215},{"_id":"source/_source/写md笔记要点.md","hash":"35be8ab4cc43625b09bc3c0c1dcd766f7b80ce02","modified":1586306581215},{"_id":"source/_todo/33_js_concepts.md","hash":"499541ead2a7a0a734fe8cf086e583d999a182de","modified":1587132658000},{"_id":"source/_todo/cs_english.md","hash":"2752232d013381ba26572ee9a931980f7609a0d8","modified":1587132658000},{"_id":"source/_todo/tools.md","hash":"c35e2efecd77dbd698d093b08cab381f421bbff1","modified":1587132658000},{"_id":"source/_todo/vm_in_devtools.md","hash":"1375ef3c7d14caa30c4b12b6940db19b506803a5","modified":1587132658000},{"_id":"source/about/index.md","hash":"751c00fcdb6080fd6251eff852424239fc5ce9b4","modified":1586306581215},{"_id":"source/apps/index.md","hash":"1fab1e48cb5ffef1592adee52a08651dd4ad5639","modified":1588132147468},{"_id":"source/cognition/index.md","hash":"d215227c96b5bfbff3142beed65076a7df812e1d","modified":1588236178485},{"_id":"source/comment/index.md","hash":"011ab80895435f87542c9b26ae3efb5ef10d18b9","modified":1587132658000},{"_id":"source/demo/index.md","hash":"dbb87fe1afb14e90a32fc1dffbe532d78351fd1a","modified":1586306581231},{"_id":"source/fe_nav/index.md","hash":"1408afcfdd1a23d9778edd3e4e8c67c3048c5be9","modified":1586306581231},{"_id":"source/gitbook/index.md","hash":"c6244434bf601c53beb2cc530e9f5979d809c44b","modified":1586306581231},{"_id":"source/images/hexo1.jpg","hash":"1cc06bda617b8e4a1f9c8367f36da71bef7e2dd1","modified":1562302834000},{"_id":"source/images/hexo2.jpg","hash":"7a720d31151cf9bee431d1497f8644e273475c20","modified":1562302834000},{"_id":"source/images/hexo3.jpg","hash":"fac5866e8108733189e45a1355a9ec44343503e3","modified":1562302834000},{"_id":"source/images/profile.jpg","hash":"27cd2ec742f33453f4a150df01e109b7c9e11e27","modified":1562302834000},{"_id":"source/images/stress_circle.png","hash":"3b8ce8f2ac5c13f27707b1e1b4849a5d0a1c8d90","modified":1575342944000},{"_id":"source/images/wxCode.jpg","hash":"0216612a947f42797c6197d6b4551080cd1a81cb","modified":1562302834000},{"_id":"source/self_regulation/index.md","hash":"78474ed93977bd415bc72de5bc93f1d0b1b7baea","modified":1586306581543},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1586306581559},{"_id":"themes/maupassant/languages/en.yml","hash":"a2f3e3e375fadc6b62352ebd2d219e87bcc2ae3d","modified":1587104647900},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1586306581559},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1586306581559},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1586306581559},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1586306581559},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"9beb4119a16bac8951b23cf820288024b3897cd3","modified":1587104635437},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"f7ef9ec573cb6ac7551cf3cc5867ffaa20ddefc0","modified":1586306581559},{"_id":"themes/maupassant/layout/archive.pug","hash":"9249d0013398070caea2d6057406728965a0adef","modified":1588153031354},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1586306581574},{"_id":"themes/maupassant/layout/base.pug","hash":"63ab1467202e4199e2adcdd0f0ade05138177e3c","modified":1588127397982},{"_id":"themes/maupassant/layout/index.pug","hash":"45eb3b80413bc16a5992b9ed2ce197d3c9e69e9f","modified":1586306581574},{"_id":"themes/maupassant/layout/page.pug","hash":"e8755dcfe4d21e683a67375396c157eef772cdd6","modified":1586306581574},{"_id":"themes/maupassant/layout/post.pug","hash":"44a348bf2999adea7627de01a6173ddbee438c95","modified":1586306581574},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1586306581574},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1586306581574},{"_id":"source/images/Slogan.png","hash":"d270bba16d21a8207e1a3abe7efa646ac83506e3","modified":1562302834000},{"_id":"source/images/maupassant.jpg","hash":"fa0e39d4cca3899571140ebf259d6a6045c234bb","modified":1562302834000},{"_id":"source/images/profile_bak_big.jpg","hash":"02c503eebd742f9aac901cd3d2e9cd1a2db7cbf4","modified":1562302834000},{"_id":"source/images/schedule v3.0.png","hash":"85d53ede58a8ce03d337c287a29cc12c4bb97e75","modified":1562302834000},{"_id":"source/images/ai/._01.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577425370000},{"_id":"source/images/ai/._02.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577425376000},{"_id":"source/images/ai/._03.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577425386000},{"_id":"source/images/ai/._04.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577425394000},{"_id":"source/images/ai/._17.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577966390000},{"_id":"source/images/ai/._18.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578024972000},{"_id":"source/images/ai/._19.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578024986000},{"_id":"source/images/ai/._20.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578026366000},{"_id":"source/images/ai/._21.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578026776000},{"_id":"source/images/ai/._22.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578026782000},{"_id":"source/images/ai/._23.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578028428000},{"_id":"source/images/ai/._24.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578028432000},{"_id":"source/images/ai/._25.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578028438000},{"_id":"source/images/ai/._26.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578028442000},{"_id":"source/images/ai/._27.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578029036000},{"_id":"source/images/ai/._28.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578216672000},{"_id":"source/images/ai/._29.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578217002000},{"_id":"source/images/ai/._30.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578217726000},{"_id":"source/images/ai/._31.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578219388000},{"_id":"source/images/ai/._32.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578219416000},{"_id":"source/images/ai/._33.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578219422000},{"_id":"source/images/ai/._34.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578220286000},{"_id":"source/images/ai/._35.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578221026000},{"_id":"source/images/ai/._42.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578575932000},{"_id":"source/images/ai/._43.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578577266000},{"_id":"source/images/ai/._44.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578577724000},{"_id":"source/images/ai/._45.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1578578986000},{"_id":"source/images/ai/05.png","hash":"6122ade120b475d3e71faf3f0c205b11ba2f7010","modified":1577939294000},{"_id":"source/images/ai/06.png","hash":"71e872a303c3795d87cd05992366b6aa5c470f9b","modified":1577939294000},{"_id":"source/images/ai/07.png","hash":"59f6d7a8e88733de5287d5cedee0f032c09d14b3","modified":1577939294000},{"_id":"source/images/ai/08.png","hash":"a4f1635e3c090f9f7531a017e0bbd7cac42efebd","modified":1577939294000},{"_id":"source/images/ai/09.png","hash":"221bec12170cd87eb2618d8cae0ca6a746f7cc35","modified":1577939294000},{"_id":"source/images/ai/10.png","hash":"26492a5305f468c7f9db73644a981eeee7c7de5a","modified":1577939294000},{"_id":"source/images/ai/11.png","hash":"ebd77261e047d6dc9efc6971a99080099716efc9","modified":1577939294000},{"_id":"source/images/ai/12.png","hash":"51ccc0c92cc9805268e142c3d488875508982f6a","modified":1577939294000},{"_id":"source/images/ai/13.png","hash":"0b18b91ca71c8fdd1131880df6a31fbf2637e314","modified":1577939294000},{"_id":"source/images/ai/14.png","hash":"36c0d6b3952b724ffe7a4e064559a68334d63e7e","modified":1577939294000},{"_id":"source/images/ai/16.png","hash":"d952bf60d8aedf29f817c0c28050bdb52b1ded76","modified":1577939294000},{"_id":"source/images/ai/17.png","hash":"880d6dfcfa28edd1dd35bdab82aa4416dece1338","modified":1577966390000},{"_id":"source/images/ai/18.png","hash":"79e74ad64d26d026d2c1afae5ec90aa80c8dc131","modified":1578024972000},{"_id":"source/images/ai/20.png","hash":"c06df282cfbd420d05f59b39d5b4434f3c8f4589","modified":1578026366000},{"_id":"source/images/ai/23.png","hash":"bd358effdd8e0691b808fa46a6ed031051a3e3d0","modified":1578028428000},{"_id":"source/images/ai/24.png","hash":"04e4b378b831c0fb8a3147dccedfebf851acc590","modified":1578028432000},{"_id":"source/images/ai/25.png","hash":"ef5b4d671a997a48ff1fa700f9f4c087edd9f838","modified":1578028438000},{"_id":"source/images/ai/26.png","hash":"8ba7d0c7d3e91e516afbad93245063085ddc5cbc","modified":1578028442000},{"_id":"source/images/ai/27.png","hash":"c536f70765dd076d653e34836abb046b1b275fa5","modified":1578029036000},{"_id":"source/images/ai/28.png","hash":"5e20eadc0ab28adcec211a6398a0a266145b25be","modified":1578216672000},{"_id":"source/images/ai/29.png","hash":"43d887f2ec60c7ec4d6b4018a80ecd72bee50dec","modified":1578217002000},{"_id":"source/images/ai/31.png","hash":"85cf5fbbea342c9c254d48a52ef19415f9fe102f","modified":1578219388000},{"_id":"source/images/ai/32.png","hash":"0db43b80e834717e659b519a763b19114bc17290","modified":1578219416000},{"_id":"source/images/ai/33.png","hash":"019ecf7f95ce2d2ca26bd302899211b3907333ea","modified":1578219422000},{"_id":"source/images/ai/34.png","hash":"53e114bd5e091de0b0c00c0f7e9e777776127023","modified":1578220286000},{"_id":"source/images/ai/35.png","hash":"73215ba6df69da95008171b3e876bedc0516e200","modified":1578221026000},{"_id":"source/images/ai/38.png","hash":"7997bf7835da9d5fd69a03e02ca4f6ac5e87e5d9","modified":1578444318000},{"_id":"source/images/ai/40.png","hash":"80ec728674d602a1242a63372d41e3c09d42ab58","modified":1578444318000},{"_id":"source/images/ai/41.png","hash":"39972f1f80f41606cdb673b03b4d9f833ea06e92","modified":1578444318000},{"_id":"source/images/ai/42.png","hash":"4a51bae240ede3954833376daeb6d61d72b5b2fe","modified":1578575930000},{"_id":"source/images/ai/44.png","hash":"0cf14067ef5bf6b88c6e82d1b0bd82f98f820ab8","modified":1578577724000},{"_id":"source/images/blog/._blog-counter.gif","hash":"a219e4f9305c65cc0e514202e5d4d27ca960d7d5","modified":1576158562000},{"_id":"source/images/ai/45.png","hash":"c59356ae2bd32aa56aedc4515af1c5597107e909","modified":1578578984000},{"_id":"source/images/blog/._google_search.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577326568000},{"_id":"source/images/blog/._google_search2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577327224000},{"_id":"source/images/blog/._google_search3.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577334668000},{"_id":"source/images/blog/._google_search4.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577334676000},{"_id":"source/images/blog/._google_search5.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577335436000},{"_id":"source/images/blog/._scarsu-baidu.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1576158356000},{"_id":"source/images/blog/._shenma.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1576569556000},{"_id":"source/images/blog/blog-counter.gif","hash":"4393977c8bd2fc60720b736c356a84319a64b750","modified":1576158536000},{"_id":"source/images/blog/google_search.png","hash":"c38e3b87694887e0840eb915d3baba73f9f7e67a","modified":1577326568000},{"_id":"source/images/blog/google_search3.png","hash":"189a33243842f9f13dd5643e960f870dfd00a916","modified":1577334668000},{"_id":"source/images/blog/google_search4.png","hash":"d2183299b3db610685b9eae0eb4c26f723380874","modified":1577334676000},{"_id":"source/images/blog/google_search5.png","hash":"f80c3a4946987332dc11df0e0d8cd78440e5224b","modified":1577335436000},{"_id":"source/images/continuous_action.png","hash":"e5f172d441f522aa3d62f3bfb6f0478e566bd585","modified":1566349062000},{"_id":"source/images/devtools/._000.png","hash":"8b68a4efe25255aba3a9c1d1136c05b05638ebbe","modified":1564365238000},{"_id":"source/images/devtools/._214.png","hash":"9d7f6798673f25f9ac109cd550defb9b9630663b","modified":1562782042000},{"_id":"source/images/devtools/020.png","hash":"20a3c5c04916e17ab616d953f8b2bc9cb63938de","modified":1562302834000},{"_id":"source/images/devtools/030.png","hash":"804c693c0f5a0743db2da304d6ccf3eec593ed22","modified":1562302834000},{"_id":"source/images/devtools/060.png","hash":"eb8f29bf8fa98e16bbf1a2ec435ed2cecd8974f0","modified":1562302834000},{"_id":"source/images/devtools/100.png","hash":"ddd33280b017b4491fb12471caaa3ac1735ef6f6","modified":1562302834000},{"_id":"source/images/devtools/110.png","hash":"eba2980ad9b9df66e7fe29f1fdd4ea74d3320f6d","modified":1562302834000},{"_id":"source/images/devtools/120.png","hash":"db63189d91e50f56ea85ff69d89bf4e719c1da1e","modified":1562302834000},{"_id":"source/images/devtools/132.png","hash":"c908c9855df43d54c4f7180c666530802b905811","modified":1562302834000},{"_id":"source/images/devtools/150.png","hash":"5495d072f6f1aeb63eb599d1ad6ebdae09923ec6","modified":1562302834000},{"_id":"source/images/devtools/135.gif","hash":"fd7bfff0563b7e31efb305a7b5243b6e95a233a7","modified":1562302834000},{"_id":"source/images/devtools/140.png","hash":"86ec1c8dc95294346f9f3929423d4644909a86a9","modified":1562302834000},{"_id":"source/images/devtools/160.png","hash":"ee08ea8e09a00a974c22e53829cd54bfcba856c8","modified":1562302834000},{"_id":"source/images/devtools/170.png","hash":"d7307a319a2ea73234bd426b9a6a656f6b57ad0d","modified":1562302834000},{"_id":"source/images/devtools/180.png","hash":"652b613e0d55f3c9b46598f01cd4d018e1d96b4d","modified":1562302834000},{"_id":"source/images/devtools/190.png","hash":"84112be795cc0cd097ff6f5d2eb8f45fed2270f7","modified":1562302834000},{"_id":"source/images/devtools/191.png","hash":"168599000723952d3787dcfb802a6dbd6d6b1eb6","modified":1562302834000},{"_id":"source/images/devtools/204.png","hash":"16f6eb34d710a2b02aea3c1b7b19c0a0ddc40442","modified":1562302834000},{"_id":"source/images/devtools/205.png","hash":"e0d81980e1f494df7706ef6649d9b4dede2d0f3b","modified":1562302834000},{"_id":"source/images/devtools/209.png","hash":"35459e6f0a7d47d8b11979a7363bd50c6c2b4dce","modified":1562302834000},{"_id":"source/images/devtools/210.png","hash":"022d95969ca44093e4aff8260dfea63ac13f35ed","modified":1562302834000},{"_id":"source/images/devtools/211.png","hash":"44166d76b38a081b49b28ffbec937c059d779c22","modified":1562302834000},{"_id":"source/images/devtools/214.png","hash":"0fc80918fbbcae2d5a0660a4eae65ed60e60832a","modified":1562782022000},{"_id":"source/images/gitbook/._web_font01.png","hash":"45c6b5f75e612050c416176e071da4e4f51593d2","modified":1562764056000},{"_id":"source/images/gitbook/._web_font02.png","hash":"336f398f1a374fcf1390321f3a787a92ec6b618a","modified":1562771662000},{"_id":"source/images/gitbook/._web_font03.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1562771382000},{"_id":"source/images/gitbook/._web_font04.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1562773102000},{"_id":"source/images/gitbook/web_font02.png","hash":"fb975479c3c954b4939ea2151df8afd47b84db06","modified":1562771656000},{"_id":"source/images/gitbook/web_font04.png","hash":"f5f158b5072c4bfc7237814568d748f7043267f0","modified":1562773102000},{"_id":"source/images/grunt/._grunt01.png","hash":"a17a34b2d48e941d8809e8ee9128720811d160a3","modified":1562780322000},{"_id":"source/images/grunt/._grunt02.png","hash":"a99874c1180b1c14a46e71f39241eeaed9af579c","modified":1562780722000},{"_id":"source/images/grunt/._grunt03.png","hash":"746121711739f680ed2df8be6d7289defecee0c2","modified":1562780912000},{"_id":"source/images/grunt/._grunt04.png","hash":"ef50695cd1a8d7aced4499d5c44ff9f8e8c66ebb","modified":1562780952000},{"_id":"source/images/grunt/grunt01.png","hash":"e83e797076d76497aa6c5902ee4b7214ca44c964","modified":1562780288000},{"_id":"source/images/grunt/grunt02.png","hash":"b66b32865a140ef179897af5d96dda71eae4bfdb","modified":1562780718000},{"_id":"source/images/grunt/grunt03.png","hash":"3d8ac1eeef068a93df2b7790b54f2b1e6c8db305","modified":1562780906000},{"_id":"source/images/grunt/grunt04.png","hash":"8e5468599e491d91d757352ba89ecafb3f755fda","modified":1562780948000},{"_id":"source/images/movie/._agzz1.jpeg","hash":"92d59af6436009321bf60be91a896beb45307bcd","modified":1577100342000},{"_id":"source/images/movie/._agzz2.jpeg","hash":"7a203427e0609a5b14757bbfe6dfa9342e6ca410","modified":1577100350000},{"_id":"source/images/movie/._agzz3.jpeg","hash":"86f931f733d7da4b2b1f5aabbc9ca70a01c7a1ec","modified":1577100360000},{"_id":"source/images/movie/._bwbj1.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577101818000},{"_id":"source/images/movie/._bwbj2.jpg","hash":"f75bb1b0eaaa0963cb16164a725c28774706fa33","modified":1577101966000},{"_id":"source/images/movie/._jcldxt.jpg","hash":"c231fa29aa4617eb2ed3efb1c466d9c658cb614d","modified":1577102360000},{"_id":"source/images/movie/._jrayty.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577101506000},{"_id":"source/images/movie/._no_war.jpg","hash":"63b3c11f7746a814c9dff96240e2181970881414","modified":1577101424000},{"_id":"source/images/movie/._prxd1.jpeg","hash":"11c10a064feb3b88c01beff006dd5ccde4d4e8d4","modified":1577099966000},{"_id":"source/images/movie/._prxd2.jpeg","hash":"70db3e9d2e628825b5c67d6635e8e66b59b1de03","modified":1577099976000},{"_id":"source/images/movie/._rsgs1.jpeg","hash":"1b43a2037aaa5a0b412b50a9d0b69d072bbef232","modified":1577099894000},{"_id":"source/images/movie/._rsgs2.jpeg","hash":"62fc87c93535f90638bc3499c60bd237dd4d5eae","modified":1577099908000},{"_id":"source/images/movie/._rsgs3.jpeg","hash":"296654a4a2b614c5bf116571449d5f847d8b414b","modified":1577099918000},{"_id":"source/images/movie/._rsgs4.jpeg","hash":"ca8e9bd042d0444b02dad7601752204fef4cbb8a","modified":1577099928000},{"_id":"source/images/movie/._tsaml1.gif","hash":"26562e363ba4d6f690904ffca9ef51debd99670c","modified":1577102106000},{"_id":"source/images/movie/._tsaml2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577102148000},{"_id":"source/images/movie/._tsaml3.jpeg","hash":"718cfb35c2abf1efbf4926f69b2ca8b1fd561412","modified":1577102218000},{"_id":"source/images/movie/._tsaml4.jpeg","hash":"a5285fd71214aea1f7f43ae55dae99938edf274e","modified":1577102242000},{"_id":"source/images/movie/._wmsj.jpeg","hash":"ec81b35904e0a4b51808b83d706d5082f91bf379","modified":1577099778000},{"_id":"source/images/movie/._wmsj2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1577102560000},{"_id":"source/images/movie/bwbj2.jpg","hash":"1645757f50c53a4bbb80c2e17873251b7621d8d0","modified":1577101966000},{"_id":"source/images/movie/no_war.jpg","hash":"03e7c7fe1d1ae762be7832d463b6a422a3d7357b","modified":1577101424000},{"_id":"source/images/post/000.png","hash":"efdc1476a2bd9af5c9e9ecba3240b0f0fd018d1f","modified":1562302834000},{"_id":"source/images/post/002.png","hash":"b5c2f919135697d19a37d81fe42c915b827d7e4e","modified":1562302834000},{"_id":"source/images/post/006.png","hash":"68b441ee371899a31be5ac1e9ad28801e3188707","modified":1562302834000},{"_id":"source/images/stateofjs/10.png","hash":"ea8c6838aa1c91d29f65b02e652ea66138aa86e6","modified":1562302834000},{"_id":"source/images/stateofjs/11.png","hash":"3efbb1fa7a72542f2c31e2ac76c95c5a11bc0ae3","modified":1562302834000},{"_id":"source/images/stateofjs/12.png","hash":"e165ead054c37823e3136d7f20b0bb6bf3c1db18","modified":1562302834000},{"_id":"source/images/stateofjs/13.png","hash":"79f5658c2e2fd12e207f394e4fe7a9352d61b5dc","modified":1562302834000},{"_id":"source/images/stateofjs/14.png","hash":"46e06656c42b74d32d11eba0ec55e28d8f38e69e","modified":1562302834000},{"_id":"source/images/stateofjs/15.png","hash":"1b126657a5c0feab23cb2b44e07f158a4a3d4bf2","modified":1562302834000},{"_id":"source/images/stateofjs/16.png","hash":"1567896a8a70f44f5cdebbf272100138976f59d1","modified":1562302834000},{"_id":"source/images/stateofjs/17.png","hash":"b5e71e6035e4920eb0e96c8e8be42520a4dd826f","modified":1562302834000},{"_id":"source/images/stateofjs/18.png","hash":"f76eb54fe2f58cbe97bbc94f6881bb0387e9a48b","modified":1562302834000},{"_id":"source/images/stateofjs/19.png","hash":"e96721bc1fae4f3a6061ca3820e87547f373f8c1","modified":1562302834000},{"_id":"source/images/stateofjs/20.png","hash":"c2b23b3f72d922aaf06345d627f4c2e910c61423","modified":1562302834000},{"_id":"source/images/stateofjs/2.png","hash":"5826deb5ff27ff26fe34396d51aff6e85b4615f8","modified":1562302834000},{"_id":"source/images/stateofjs/21.png","hash":"0e634f4ad7be66fd1e1184ebb44fe87b594b8c5f","modified":1562302834000},{"_id":"source/images/stateofjs/22.png","hash":"930ae81b060233ba30e6d4f7b7721d547d455aad","modified":1562302834000},{"_id":"source/images/stateofjs/23.png","hash":"04fce4509a18a8e7e3ea853fae0f20b9b71514b4","modified":1562302834000},{"_id":"source/images/stateofjs/3.png","hash":"8ba961493d2e87fd9d117f51d95aa1f97a53d85c","modified":1562302834000},{"_id":"source/images/stateofjs/4.png","hash":"6fc7177289d99308fab327c4d95b53e92b2d4a78","modified":1562302834000},{"_id":"source/images/stateofjs/5.png","hash":"79cf6c61431003a9d901ba8a396212ee8caa87cd","modified":1562302834000},{"_id":"source/images/stateofjs/6.png","hash":"b944f703a919d79369b113494d4fd32fa9b47236","modified":1562302834000},{"_id":"source/images/stateofjs/7.png","hash":"1618150df07c867acec4a2208bd4324aab27e48f","modified":1562302834000},{"_id":"source/images/stateofjs/8.png","hash":"cdb87a31ad7f2f12b57a3b68d4d197c7d17e1963","modified":1562302834000},{"_id":"source/images/stateofjs/9.png","hash":"e2b23fa1d0929a9f6d4b352f806e876c42462343","modified":1562302834000},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"a6e49060fad643899256ad10c9fa976336086cae","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"68d56b94c8b3e7df6f60a5be67b001739d7432be","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"e3b37525b103e0d555b7a6b807ea7a201e7e32eb","modified":1588154761044},{"_id":"themes/maupassant/layout/_partial/footer_script.pug","hash":"96c7fc9be298c3342c19b29ec21524691ebab902","modified":1587112552303},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"f94851882cf6f5e30069808b58718123db35c3d5","modified":1588127577265},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"61f1b8db2504fa91ad76bc60a6bae06f3ee7b689","modified":1587109077722},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"2074eb18448143d34ff104e580f8fd4324626553","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"44a932d09ed74104eda6c244fb47455d0cb94888","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"6598a94b5b7490cbded68f6eb4fc5fb12f18e85e","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"595e85948da68d9e19055384f29598c4f5e74a12","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1586306581574},{"_id":"themes/maupassant/source/css/donate.css","hash":"b1b982536fe328906516a1c19ce94c5c151d274e","modified":1587101597791},{"_id":"themes/maupassant/source/css/default.css","hash":"b4699de926f1f4ac30796fba0b059d778cdbbe81","modified":1586306581590},{"_id":"themes/maupassant/source/donate/index.html","hash":"15cccdbea40527be50168617f239620e9d524370","modified":1586306581590},{"_id":"themes/maupassant/source/css/style.scss","hash":"b00b6c7fc3ef201145f7cf536947593b37a685aa","modified":1588154639658},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1562302834000},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1562302834000},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1562302834000},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1586306581590},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1586306581590},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1562302834000},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1562302834000},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1586306581590},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1586306581590},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1562302834000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1586306581606},{"_id":"themes/maupassant/source/js/donate.js","hash":"a9ff8d20f00ba6c216e6a55865c0b47ce6b28f2c","modified":1586306581606},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1586306581606},{"_id":"themes/maupassant/source/js/search.js","hash":"8208d1eeab5f44d12a6da1bdd54062f6216b132c","modified":1587106221399},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1586306581606},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1586306581606},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1586306581606},{"_id":"source/images/ai/01.png","hash":"99271ef28b5b2e0d1e311ff23e0e31e05c3abd3a","modified":1577425370000},{"_id":"source/images/ai/03.png","hash":"a43c69e998137abfc4a2d1a79124433bf4730b84","modified":1577425386000},{"_id":"source/images/ai/15.png","hash":"2e5355a2b7fa32fe443bc234ea800ddf68adc840","modified":1577939294000},{"_id":"source/images/ai/21.png","hash":"931099fe5bab57f72c54f17239dd9cebbb859321","modified":1578026776000},{"_id":"source/images/ai/39.png","hash":"84f218d5543d0cfe7c04355ed6d680c722e6776e","modified":1578444318000},{"_id":"source/images/ai/43.png","hash":"296921057ef4fc321e72e0b251f4caaa916083fe","modified":1578577266000},{"_id":"source/images/blog/google_search2.png","hash":"21d386888d09580f9023da57cb13fa8304d1c435","modified":1577327224000},{"_id":"source/images/blog/scarsu-baidu.png","hash":"d153241c8e6b9b579a64dc0d77b5ee52e2a80263","modified":1576158356000},{"_id":"source/images/blog/shenma.png","hash":"adfa661a15da1d96785d25953b1a506a81b93356","modified":1576569556000},{"_id":"source/images/devtools/000.png","hash":"cc3498ea5ef888a78868c473fcd25b76ba6e62c5","modified":1562302834000},{"_id":"source/images/devtools/010.png","hash":"2bcf243f9f3c22c8e7c7d119f14443457596c6d3","modified":1562302834000},{"_id":"source/images/devtools/011.png","hash":"198e745a5d1729cb59d40084c79b4f670c68e3f8","modified":1562302834000},{"_id":"source/images/devtools/051.png","hash":"c331ce7d6c91967c72d8132ae6fa4fd47e349a54","modified":1562302834000},{"_id":"source/images/devtools/130.png","hash":"ffa1f9ecd4bdd0c41d002d883f89b423d53f881b","modified":1562302834000},{"_id":"source/images/devtools/131.png","hash":"163aa1ff1ccf47e45a99a6dff5fd19101118cb37","modified":1562302834000},{"_id":"source/images/devtools/133.gif","hash":"1aa7fc9ad2b024b3f5fce63add221ae5f5e5ea6d","modified":1562302834000},{"_id":"source/images/devtools/200.png","hash":"4fed1fdfbd0beda6d803720479f6464d88982515","modified":1562302834000},{"_id":"source/images/devtools/203.gif","hash":"a5950c2e1b1fdecdd5680866244e0809e91afcb6","modified":1562302834000},{"_id":"source/images/devtools/207.png","hash":"0e2afa90952c38932e87676b83e89b8ab0951b26","modified":1562302834000},{"_id":"source/images/devtools/211.gif","hash":"a8a2e27f0f85490bec6fbe3cbd0f96cd00d38d26","modified":1562302834000},{"_id":"source/images/gitbook/web_font01.png","hash":"e6795d49c23e8705f847bb3d1fbd49620cbd3350","modified":1562764016000},{"_id":"source/images/gitbook/web_font03.png","hash":"2e710f6177d2663f3b3dbb4bdcd200e5e2012a18","modified":1562771380000},{"_id":"source/images/movie/tsaml1.gif","hash":"dbb3fda84c01456047672b1ed0d72a35d5d56f4f","modified":1577102106000},{"_id":"source/images/movie/tsaml3.jpeg","hash":"5a9d23af0287e54060c4f2e3b8d90e256597e676","modified":1577102218000},{"_id":"source/images/notion/ds.png","hash":"bd4b51b536b22e192f50e6351d9aa9884558fd08","modified":1587132658000},{"_id":"source/images/notion/header.png","hash":"c5ebd687a663e6807fd2ece16869ab99832f7632","modified":1587132658000},{"_id":"source/images/post/003.png","hash":"77e199bb723835b4989290731b9a4e39fede67f3","modified":1562302834000},{"_id":"source/images/stateofjs/1.png","hash":"d87af032052cfdc70f3786234d9bc922ca526d04","modified":1562302834000},{"_id":"source/images/ai/19.png","hash":"1faa4a0e942071884c981d8130836086b36bad69","modified":1578024986000},{"_id":"source/images/ai/30.png","hash":"c09289ead258b80b802961c77e4e1549f2471c0e","modified":1578217726000},{"_id":"source/images/ai/36.png","hash":"367e9e5774f2b0bf320ca25a1e2bfcf4bda0fc03","modified":1578444318000},{"_id":"source/images/ai/37.png","hash":"5649709ab965bb0d994268eea5d9ea35381e2572","modified":1578444318000},{"_id":"source/images/devtools/201.gif","hash":"a55d80037ca54a18934e2a13c07c3cfe48251c8d","modified":1562302834000},{"_id":"source/images/devtools/212.gif","hash":"932a547023ac293373d0a7d0a99103920a75b693","modified":1562302834000},{"_id":"source/images/movie/rsgs4.jpeg","hash":"9f7aa17885c627743d1b5263a8ebc7cd6f096064","modified":1577099502000},{"_id":"source/images/post/004.png","hash":"3e8c5fd447b95e73daee4477701b7d0690217a3a","modified":1562302834000},{"_id":"source/images/self_control.png","hash":"daec630a46993814592c07514619a3225ff26a74","modified":1575342944000},{"_id":"source/images/stateofjs/000.png","hash":"39990e5515da56e3179274c33c4d6adcfc32afc0","modified":1562302834000},{"_id":"source/images/stateofjs/001.png","hash":"61ea320c9a2580c68884cbb100f5a3432adebffe","modified":1562302834000},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"88a6574d628890270eacb4ed244108a7e09c7fc7","modified":1586306581606},{"_id":"source/images/ai/22.png","hash":"b44e40857fd5bb721b2b085abd859ef061fc0333","modified":1578026782000},{"_id":"source/images/devtools/040.png","hash":"901acbb786cef1cc8a21b08613670ea3e344895a","modified":1562302834000},{"_id":"source/images/devtools/208.gif","hash":"768a2842d3270857a7cc02ead069287005d539bc","modified":1562302834000},{"_id":"source/images/notion/home.png","hash":"f7647ff6144180023860d647db3d18ff69abd941","modified":1587132658000},{"_id":"source/images/post/005.png","hash":"7ca58e79e362dc47225100e63641359aff4dd744","modified":1562302834000},{"_id":"source/images/ai/02.png","hash":"0fc582f1db4f791dfc51e38eccc8e23586d9be4d","modified":1577425376000},{"_id":"source/images/devtools/050.png","hash":"2de60daf6e505379587d4e502a1bccf50fe6b86c","modified":1562302834000},{"_id":"source/images/movie/agzz3.jpeg","hash":"27c8d1f572f0b4d9939477f5b6c71570284a689b","modified":1577100358000},{"_id":"source/images/movie/jrayty.png","hash":"26761eaf6faee157505a697fe3b852a8c56e03e7","modified":1577101506000},{"_id":"source/images/post/001.png","hash":"744026cb0a6f80dd336d94765170fe7c5dd812d2","modified":1562302834000},{"_id":"source/images/devtools/202.gif","hash":"8d098caa60ac7728d4d817cbba7f36c056f9a31b","modified":1562302834000},{"_id":"source/images/devtools/207.gif","hash":"8fa8fae5d8fce89678326a4997f3e1993792daf9","modified":1562302834000},{"_id":"source/images/movie/agzz2.jpeg","hash":"f3b723889dcae55904787ebb53a71f6fc2b878de","modified":1577100350000},{"_id":"source/images/movie/tsaml4.jpeg","hash":"797ef29cbb2f665bddd278e15c36fd6872da4ca4","modified":1577102240000},{"_id":"source/images/ai/04.png","hash":"1945193bc3bb0d8ef35f8a4a13d2b289eff15f3d","modified":1577425394000},{"_id":"source/images/movie/rsgs2.jpeg","hash":"fd51dcd95453e93dafe05f28b628970a19d946b0","modified":1577099502000},{"_id":"source/images/devtools/206.gif","hash":"7017d0776ca9fea8232eba98082e0b2cd2269033","modified":1562302834000},{"_id":"source/images/movie/agzz1.jpeg","hash":"a11787ecd8d1207f53c4a91236bffae329807d03","modified":1577100342000},{"_id":"source/images/devtools/213.gif","hash":"38f16d2021930f25ede0fa59d894ae306ea524d4","modified":1562302834000},{"_id":"source/images/movie/rsgs3.jpeg","hash":"843469c2db31cd07e6be6b534cc8982566d0de71","modified":1577099500000},{"_id":"source/images/movie/tsaml2.png","hash":"67c781a3650be2934974761d26bdb9badc2d4f37","modified":1577102148000},{"_id":"source/images/movie/rsgs1.jpeg","hash":"2c93647a3bc6cd4cfc56cf2cfdf78d2643e6be48","modified":1577099498000},{"_id":"source/images/movie/wmsj2.png","hash":"03d1073b9e033a2fdcfcebc1383b131e4f92f3d5","modified":1577102558000},{"_id":"source/images/movie/bwbj1.png","hash":"18adfaddcd058585bd4c559cad0068226de506ad","modified":1577101818000},{"_id":"source/images/movie/wmsj.jpeg","hash":"ad4d70dff76d35bc24b4625866dd4c27fef5e921","modified":1577099620000},{"_id":"source/images/movie/jcldxt.jpg","hash":"12cd96fe697c505884a0baccdf583cc32f8e1f5e","modified":1577102360000},{"_id":"source/images/movie/prxd2.jpeg","hash":"b20b3346a8b57139fdc005ec6b8d16416b325798","modified":1577099488000},{"_id":"source/images/movie/prxd1.jpeg","hash":"b15c44d3c80ccf4509a7178d69df4d274f0849b0","modified":1577099482000},{"_id":"source/_source/devtools_intro_share.pdf","hash":"2af27c4c8c9ffbbdb2a71ca8ecfebbd2938a0e2c","modified":1562302834000},{"_id":"public/atom.xml","hash":"487ab19fda9e2f125a0b0713929b0479018a8db8","modified":1588126946691},{"_id":"public/search.xml","hash":"7e085f533364d92081fb38b9a4c37a3d0147151c","modified":1588126946686},{"_id":"public/404.html","hash":"566fa59747062b9d56b5abf34da212f8b478e928","modified":1588126946776},{"_id":"public/about/index.html","hash":"fed29c757396b9e876afffb780b1a419c20232ca","modified":1588126946777},{"_id":"public/cognition/index.html","hash":"e7648bfd3f2d8fed025a80d3ed05983ce2aff2bd","modified":1588126946779},{"_id":"public/demo/index.html","hash":"888cf4e216643160d39c5209bed0bc4071ca8a09","modified":1588126946779},{"_id":"public/fe_nav/index.html","hash":"341413d22a62f4639a5873cc492efa7ac7a733ca","modified":1588126946779},{"_id":"public/gitbook/index.html","hash":"ba4181ab7839368a7ad95b763009dcd1adfbcf81","modified":1588126946779},{"_id":"public/self_regulation/index.html","hash":"c3ed8ffd23d36b5805579f8e86b3f0937c2c5d5b","modified":1588126946779},{"_id":"public/life_courage/index.html","hash":"81fe6f97c636428216b7cd5739539ea8dc574673","modified":1587133419557},{"_id":"public/ES6 Code Style/index.html","hash":"b009aff103830a9e09ec36d389680b6b05ca7335","modified":1587133419557},{"_id":"public/Danshari/index.html","hash":"3edc461943fb3ccc2158f21247519cded8fcba39","modified":1587183041632},{"_id":"public/highly_configurable_low_maintenance_blog_build_guide/index.html","hash":"9fcf288e7d7655525f325bb87917768a12e5f57c","modified":1587133419557},{"_id":"public/nvm_for_windows/index.html","hash":"3cd353c37eada5bb82ca510a3611531bb7def9a2","modified":1587133419557},{"_id":"public/debug_node.js_with_chrome/index.html","hash":"72c7bd963e2ddb9017da83725b63fafdd6d2145a","modified":1587133419557},{"_id":"public/Fullpage.js/index.html","hash":"71750d15f41364869d443b1c296f3a1895db5ca8","modified":1587133419558},{"_id":"public/mongoDB_configuration/index.html","hash":"43eb1f3ccb70684f94f8d4b7ef6177a9a613b9f0","modified":1587133419558},{"_id":"public/hello_hexo/index.html","hash":"64c4efae5a10462093c014deda60eb3b69441253","modified":1588126946780},{"_id":"public/escape_from_the_world/index.html","hash":"439803bc0c4044d01a2c739cd21bc3b8a0671288","modified":1587969258694},{"_id":"public/archives/1996/index.html","hash":"b6ea8d539d65cfcc7d529e76b24dde6ab6e76cb4","modified":1588126946781},{"_id":"public/archives/1996/06/index.html","hash":"749be0b82355fbae6b6dba48b5b328143c156ba1","modified":1588126946781},{"_id":"public/archives/2000/index.html","hash":"5cd1acdd8ba6ea73959d6eba186de8db573e6c0d","modified":1587133419558},{"_id":"public/archives/2000/01/index.html","hash":"a4b155db2d09131a5cc672b5089aad8192bba203","modified":1587133419558},{"_id":"public/archives/2018/index.html","hash":"bc272b70199b3ada2ac8468bb973fbe490d7ab8e","modified":1588126946781},{"_id":"public/archives/2018/02/index.html","hash":"ff0a06a942bff51d0c9beb6cfb216112edc0df36","modified":1588126946781},{"_id":"public/archives/2018/03/index.html","hash":"d66879daf90a845e3227ef87a1446f4c9f3399b1","modified":1588126946781},{"_id":"public/archives/2018/04/index.html","hash":"a9261cca88192dd9c896d7baa21f8a9f003a59de","modified":1588126946781},{"_id":"public/archives/2018/07/index.html","hash":"94521adb51e6b73aa3838e04182b36ea7e44fe56","modified":1588126946781},{"_id":"public/archives/2018/08/index.html","hash":"4a2fffbe02c86ae9a9c6526e07405970433fbd2b","modified":1588126946782},{"_id":"public/archives/2018/09/index.html","hash":"b62adddb4087ce792417f9efe107da6705ee05db","modified":1588126946782},{"_id":"public/archives/2018/12/index.html","hash":"6e9b877eb1bfa343911fded626d4a60a26956745","modified":1588126946782},{"_id":"public/archives/2019/index.html","hash":"ebef88b9f03e36499d314bb1668adb56464ecca9","modified":1588126946782},{"_id":"public/archives/2019/06/index.html","hash":"0a19181de3ca74944af92caf138de22f004dd15c","modified":1588126946782},{"_id":"public/archives/2019/07/index.html","hash":"ff0408d1b6d46e2fac931c731edf8a12283bea4e","modified":1588126946783},{"_id":"public/archives/2019/08/index.html","hash":"a2f9584117de198dfcb80a928a20237f65dc2d75","modified":1588126946783},{"_id":"public/archives/2019/09/index.html","hash":"f68e922e7cdc35a5a5dc3729ca048ab4e0c410f4","modified":1588126946784},{"_id":"public/archives/2019/11/index.html","hash":"8993610f337173bd6d4b3f370b19ef6ac6a90d7e","modified":1588126946784},{"_id":"public/index.html","hash":"1420c736ff67241ecdc11e826037bae3016da342","modified":1588126946781},{"_id":"public/page/2/index.html","hash":"4d694318064f73571e900fdf35e7771c9178eb35","modified":1588126946781},{"_id":"public/categories/javascript/index.html","hash":"3a83a25476d508af264531dd5775490d664afc2d","modified":1588126946780},{"_id":"public/categories/html/index.html","hash":"857509748e01a2e4f633c11233d6858b59414b72","modified":1588126946780},{"_id":"public/categories/css/index.html","hash":"fde1b8b070e9f89bc54eed14ee4db58e75bebd23","modified":1588126946780},{"_id":"public/categories/read/index.html","hash":"24aef245ae64509f7ff3394eb506a54b6dfbeaf3","modified":1588126946780},{"_id":"public/categories/utility-libraries/index.html","hash":"c98b4b53ca7d225034259dd536742a2958801fe6","modified":1588126946780},{"_id":"public/categories/ScarSu/index.html","hash":"90c9458bc3a7955eca00b2323a694d9c36f75edb","modified":1588126946780},{"_id":"public/categories/debug/index.html","hash":"574d5f9bb5f2c796b32d6f7408fd127e35322bab","modified":1588126946780},{"_id":"public/categories/build-tools/index.html","hash":"405a61a6979c540217ccbea7937205f24e45f597","modified":1588126946780},{"_id":"public/categories/database/index.html","hash":"9bfa6befa1e88793b4daf37338da98f5964b48bb","modified":1588126946780},{"_id":"public/categories/tools/index.html","hash":"f13afe69cb5ea95c424461077a40f2f7870f02b9","modified":1588126946780},{"_id":"public/tags/stateOfJs/index.html","hash":"bfab4e22ed26905f37dd565e28be264f72a85d8b","modified":1588126946784},{"_id":"public/tags/360fed/index.html","hash":"2b21009844c13a7d595712a1e4d6f2589c64cff8","modified":1588126946784},{"_id":"public/tags/ES/index.html","hash":"4f688a8129bf818976bcc4644f0f5bf058e3659c","modified":1588126946785},{"_id":"public/tags/阿德勒心理学/index.html","hash":"fa738927acf203c7de2cd9528113678ccb098da1","modified":1588126946785},{"_id":"public/blog_history/index.html","hash":"ca7b898241dcc90afa9f1f359979d7977051e9de","modified":1588126946785},{"_id":"public/self_control/index.html","hash":"2eede1bfaa11ab05d80b620ea3dc8f9b1f4531eb","modified":1587133419559},{"_id":"public/continuous_action/index.html","hash":"0bfd002c74391fe247f67a0e32ddbd4741f59c6f","modified":1587133419559},{"_id":"public/33_js_concepts/index.html","hash":"f8f013796e02d6fa7d21e67613fda11e5424a4d2","modified":1587183041634},{"_id":"public/grunt/index.html","hash":"12ee3dea8e5c35d56c9392a4b5537bc04b089b8e","modified":1587183041634},{"_id":"public/2018_javascript_report/index.html","hash":"a4f3710fe973d14b2c5b529d8421e866b1d0cce7","modified":1587133419559},{"_id":"public/360fe_02_css/index.html","hash":"7cf011cd0cb5071a35478f4804b676fa11a13b9d","modified":1587183041634},{"_id":"public/360fe_01_html/index.html","hash":"9b0826b0e31d2fb0bbc217200a417e8db9e47a73","modified":1587183041634},{"_id":"public/ancient_magical_table/index.html","hash":"1613fb4fec0e65a56c5fa45e493c3044eaf836fd","modified":1587133419559},{"_id":"public/Animate.css/index.html","hash":"5578f2ee7500a167e893d282552b82d81fdc6c3f","modified":1588126946785},{"_id":"public/archives/index.html","hash":"1b03fec37b8aaea269687833203f7d1b68ff2f20","modified":1588126946785},{"_id":"public/apps/index.html","hash":"1bd1ed7a421b33a5beb1b73ea7d17ca229a73cfa","modified":1588126946778},{"_id":"public/comment/index.html","hash":"096014453f96be6d067a05a6a3caf39a98f69beb","modified":1588126946779},{"_id":"public/e_journal_by_notion/index.html","hash":"eb6cf4732d497cd39e5b37258219b1fc0ebc9187","modified":1588126946779},{"_id":"public/behavior_decision/index.html","hash":"c839dcd099c7425cb32568bb48589e2bdd461b05","modified":1587969258694},{"_id":"public/fed_ml_07_xor_regression/index.html","hash":"188403a7a074c321607c5a0843183d18330c7671","modified":1588126946779},{"_id":"public/fed_ml_05_normalize/index.html","hash":"63dd7f9937dba2df7d5d7a663af01a05f4eab5fa","modified":1588126946779},{"_id":"public/poor_economics/index.html","hash":"bc018823f587d1a3a8c6f9ecd9e646be5ae6f415","modified":1587183041632},{"_id":"public/fed_ml_03_tensor/index.html","hash":"46727193d3c0f1ae7335aa667227ff8fba786522","modified":1588126946780},{"_id":"public/fed_ml_02_tensorflow/index.html","hash":"2f8ef6dfb3bcd43854283571fa9a9e97b77874ba","modified":1588126946780},{"_id":"public/fed_ml_01/index.html","hash":"323eb0399039f842190a9ab1ec6ff9b48f5ca22c","modified":1588126946780},{"_id":"public/devtools_02_elements/index.html","hash":"e9548e259dd02dff73f6c13d5c921db25dd9189b","modified":1587183041647},{"_id":"public/devtools_01_intro/index.html","hash":"a66fc2f03b1523c5299e0bf6aecbe021ea4300e3","modified":1587183041647},{"_id":"public/devtools_03_console/index.html","hash":"2be15bd1c77fbd710c886c7de597aae88d05440b","modified":1587183041647},{"_id":"public/devtools_07_memory/index.html","hash":"84da250992d621936403a1c4ce4a86442d14d4b9","modified":1587969258694},{"_id":"public/archives/page/2/index.html","hash":"79d155e91308635dfc4f2061aea946356a2ccf31","modified":1588126946781},{"_id":"public/archives/2019/12/index.html","hash":"0b138fa951ac71bee88823fab7a78ef852f38d0c","modified":1588126946784},{"_id":"public/archives/2020/index.html","hash":"d0775e577e88d44e486a2f448fb6de317b9087d3","modified":1588126946785},{"_id":"public/archives/2020/01/index.html","hash":"bbb7222bb5a0de78e1e45a35828b8c7333fcd6e2","modified":1588126946784},{"_id":"public/archives/2020/03/index.html","hash":"d21368d1b76b81cedd144a02ff8cd5856dfc2202","modified":1588126946784},{"_id":"public/archives/2020/04/index.html","hash":"e7af7d80b0d5b061322b70f3cd83f294a32b9358","modified":1588126946784},{"_id":"public/archives/2099/index.html","hash":"408826aa2d08d07548fe04cf656217f7aca3edf4","modified":1587133419576},{"_id":"public/archives/2099/01/index.html","hash":"38d5f7d5b62bc73259a288869eec4e0c21b0d49d","modified":1587133419576},{"_id":"public/page/3/index.html","hash":"576fc0a5bdc2a58c9f69a4c480b823e6e1e59f31","modified":1588126946781},{"_id":"public/categories/ml/index.html","hash":"1fcb9dd2fac9f841ca3e62820380cdf9bc88a0e5","modified":1588126946780},{"_id":"public/fed_ml_08_iris/index.html","hash":"f5b44126a41821f4f2d64fa3750c10dd0465f63f","modified":1588126946785},{"_id":"public/fed_ml_06_logistic_regression/index.html","hash":"bdddae18fdf7d86b76920760dbe9d672b08d8f5a","modified":1588126946785},{"_id":"public/fed_ml_04_linear_regression/index.html","hash":"d1e405d97996b37f8cb5bd14da81d550fbe7506e","modified":1588126946785},{"_id":"public/web_fonts/index.html","hash":"3c76e1d40a6f837124c37cf1d701507a8d915820","modified":1587183041648},{"_id":"public/devtools_05_network/index.html","hash":"e2234e312d74a8b7a89b972ac75ad7785241b8b5","modified":1587969258695},{"_id":"public/devtools_rookie_intro/index.html","hash":"9a93553f07727b73f4a1b0bbd128738fa863e5e7","modified":1587183041647},{"_id":"public/devtools_04_sources/index.html","hash":"ad05ed2a14f54d5da12ad4b61a6927c09a525804","modified":1587183041647},{"_id":"public/devtools_06_performance/index.html","hash":"99d4eaa187f314fb78c7032bfe41344cdce96d66","modified":1587969258694},{"_id":"public/iconfont/index.html","hash":"c81ba727562891a26b5449bf549b52952cf07235","modified":1587183041648},{"_id":"public/shenma-site-verification.txt","hash":"979bbacec7aa2424f4c4d59366e2b92d313e6b53","modified":1587133419592},{"_id":"public/images/hexo1.jpg","hash":"1cc06bda617b8e4a1f9c8367f36da71bef7e2dd1","modified":1587133419592},{"_id":"public/images/hexo2.jpg","hash":"7a720d31151cf9bee431d1497f8644e273475c20","modified":1587133419592},{"_id":"public/images/hexo3.jpg","hash":"fac5866e8108733189e45a1355a9ec44343503e3","modified":1587133419592},{"_id":"public/images/profile.jpg","hash":"27cd2ec742f33453f4a150df01e109b7c9e11e27","modified":1587133419592},{"_id":"public/images/stress_circle.png","hash":"3b8ce8f2ac5c13f27707b1e1b4849a5d0a1c8d90","modified":1587133419592},{"_id":"public/images/wxCode.jpg","hash":"0216612a947f42797c6197d6b4551080cd1a81cb","modified":1587133419592},{"_id":"public/images/blog/blog-counter.gif","hash":"4393977c8bd2fc60720b736c356a84319a64b750","modified":1587133419592},{"_id":"public/images/devtools/020.png","hash":"20a3c5c04916e17ab616d953f8b2bc9cb63938de","modified":1587133419592},{"_id":"public/images/devtools/030.png","hash":"804c693c0f5a0743db2da304d6ccf3eec593ed22","modified":1587133419592},{"_id":"public/images/devtools/060.png","hash":"eb8f29bf8fa98e16bbf1a2ec435ed2cecd8974f0","modified":1587133419592},{"_id":"public/images/devtools/100.png","hash":"ddd33280b017b4491fb12471caaa3ac1735ef6f6","modified":1587133419592},{"_id":"public/images/devtools/150.png","hash":"5495d072f6f1aeb63eb599d1ad6ebdae09923ec6","modified":1587133419592},{"_id":"public/images/devtools/132.png","hash":"c908c9855df43d54c4f7180c666530802b905811","modified":1587133419592},{"_id":"public/images/devtools/110.png","hash":"eba2980ad9b9df66e7fe29f1fdd4ea74d3320f6d","modified":1587133419592},{"_id":"public/images/devtools/120.png","hash":"db63189d91e50f56ea85ff69d89bf4e719c1da1e","modified":1587133419592},{"_id":"public/images/devtools/135.gif","hash":"fd7bfff0563b7e31efb305a7b5243b6e95a233a7","modified":1587133419592},{"_id":"public/images/devtools/140.png","hash":"86ec1c8dc95294346f9f3929423d4644909a86a9","modified":1587133419592},{"_id":"public/images/devtools/160.png","hash":"ee08ea8e09a00a974c22e53829cd54bfcba856c8","modified":1587133419592},{"_id":"public/images/devtools/170.png","hash":"d7307a319a2ea73234bd426b9a6a656f6b57ad0d","modified":1587133419592},{"_id":"public/images/devtools/180.png","hash":"652b613e0d55f3c9b46598f01cd4d018e1d96b4d","modified":1587133419592},{"_id":"public/images/devtools/191.png","hash":"168599000723952d3787dcfb802a6dbd6d6b1eb6","modified":1587133419592},{"_id":"public/images/devtools/204.png","hash":"16f6eb34d710a2b02aea3c1b7b19c0a0ddc40442","modified":1587133419592},{"_id":"public/images/devtools/190.png","hash":"84112be795cc0cd097ff6f5d2eb8f45fed2270f7","modified":1587133419593},{"_id":"public/images/devtools/205.png","hash":"e0d81980e1f494df7706ef6649d9b4dede2d0f3b","modified":1587133419593},{"_id":"public/images/devtools/209.png","hash":"35459e6f0a7d47d8b11979a7363bd50c6c2b4dce","modified":1587133419593},{"_id":"public/images/devtools/211.png","hash":"44166d76b38a081b49b28ffbec937c059d779c22","modified":1587133419593},{"_id":"public/images/devtools/214.png","hash":"0fc80918fbbcae2d5a0660a4eae65ed60e60832a","modified":1587133419593},{"_id":"public/images/devtools/210.png","hash":"022d95969ca44093e4aff8260dfea63ac13f35ed","modified":1587133419593},{"_id":"public/images/gitbook/web_font02.png","hash":"fb975479c3c954b4939ea2151df8afd47b84db06","modified":1587133419593},{"_id":"public/images/gitbook/web_font04.png","hash":"f5f158b5072c4bfc7237814568d748f7043267f0","modified":1587133419593},{"_id":"public/images/grunt/grunt01.png","hash":"e83e797076d76497aa6c5902ee4b7214ca44c964","modified":1587133419593},{"_id":"public/images/grunt/grunt02.png","hash":"b66b32865a140ef179897af5d96dda71eae4bfdb","modified":1587133419593},{"_id":"public/images/grunt/grunt03.png","hash":"3d8ac1eeef068a93df2b7790b54f2b1e6c8db305","modified":1587133419593},{"_id":"public/images/post/002.png","hash":"b5c2f919135697d19a37d81fe42c915b827d7e4e","modified":1587133419593},{"_id":"public/images/grunt/grunt04.png","hash":"8e5468599e491d91d757352ba89ecafb3f755fda","modified":1587133419593},{"_id":"public/images/post/006.png","hash":"68b441ee371899a31be5ac1e9ad28801e3188707","modified":1587133419593},{"_id":"public/images/post/000.png","hash":"efdc1476a2bd9af5c9e9ecba3240b0f0fd018d1f","modified":1587133419593},{"_id":"public/images/stateofjs/12.png","hash":"e165ead054c37823e3136d7f20b0bb6bf3c1db18","modified":1587133419593},{"_id":"public/images/stateofjs/11.png","hash":"3efbb1fa7a72542f2c31e2ac76c95c5a11bc0ae3","modified":1587133419593},{"_id":"public/images/stateofjs/13.png","hash":"79f5658c2e2fd12e207f394e4fe7a9352d61b5dc","modified":1587133419593},{"_id":"public/images/stateofjs/14.png","hash":"46e06656c42b74d32d11eba0ec55e28d8f38e69e","modified":1587133419593},{"_id":"public/images/stateofjs/10.png","hash":"ea8c6838aa1c91d29f65b02e652ea66138aa86e6","modified":1587133419593},{"_id":"public/images/stateofjs/15.png","hash":"1b126657a5c0feab23cb2b44e07f158a4a3d4bf2","modified":1587133419593},{"_id":"public/images/stateofjs/16.png","hash":"1567896a8a70f44f5cdebbf272100138976f59d1","modified":1587133419593},{"_id":"public/images/stateofjs/18.png","hash":"f76eb54fe2f58cbe97bbc94f6881bb0387e9a48b","modified":1587133419593},{"_id":"public/images/stateofjs/17.png","hash":"b5e71e6035e4920eb0e96c8e8be42520a4dd826f","modified":1587133419593},{"_id":"public/images/stateofjs/19.png","hash":"e96721bc1fae4f3a6061ca3820e87547f373f8c1","modified":1587133419593},{"_id":"public/images/stateofjs/2.png","hash":"5826deb5ff27ff26fe34396d51aff6e85b4615f8","modified":1587133419593},{"_id":"public/images/stateofjs/20.png","hash":"c2b23b3f72d922aaf06345d627f4c2e910c61423","modified":1587133419593},{"_id":"public/images/stateofjs/21.png","hash":"0e634f4ad7be66fd1e1184ebb44fe87b594b8c5f","modified":1587133419593},{"_id":"public/images/stateofjs/22.png","hash":"930ae81b060233ba30e6d4f7b7721d547d455aad","modified":1587133419593},{"_id":"public/images/stateofjs/23.png","hash":"04fce4509a18a8e7e3ea853fae0f20b9b71514b4","modified":1587133419594},{"_id":"public/images/stateofjs/3.png","hash":"8ba961493d2e87fd9d117f51d95aa1f97a53d85c","modified":1587133419594},{"_id":"public/images/stateofjs/4.png","hash":"6fc7177289d99308fab327c4d95b53e92b2d4a78","modified":1587133419594},{"_id":"public/images/stateofjs/5.png","hash":"79cf6c61431003a9d901ba8a396212ee8caa87cd","modified":1587133419594},{"_id":"public/images/stateofjs/6.png","hash":"b944f703a919d79369b113494d4fd32fa9b47236","modified":1587133419594},{"_id":"public/images/stateofjs/7.png","hash":"1618150df07c867acec4a2208bd4324aab27e48f","modified":1587133419594},{"_id":"public/images/stateofjs/8.png","hash":"cdb87a31ad7f2f12b57a3b68d4d197c7d17e1963","modified":1587133419594},{"_id":"public/images/stateofjs/9.png","hash":"e2b23fa1d0929a9f6d4b352f806e876c42462343","modified":1587133419594},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1587133419594},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1587133419594},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1587133419594},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1587133419594},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1587133419594},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1587133419594},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1587133419594},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1587133419594},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1587133419594},{"_id":"public/images/ai/06.png","hash":"71e872a303c3795d87cd05992366b6aa5c470f9b","modified":1587133419594},{"_id":"public/images/ai/07.png","hash":"59f6d7a8e88733de5287d5cedee0f032c09d14b3","modified":1587133419594},{"_id":"public/images/ai/05.png","hash":"6122ade120b475d3e71faf3f0c205b11ba2f7010","modified":1587133419594},{"_id":"public/images/ai/09.png","hash":"221bec12170cd87eb2618d8cae0ca6a746f7cc35","modified":1587133419594},{"_id":"public/images/ai/08.png","hash":"a4f1635e3c090f9f7531a017e0bbd7cac42efebd","modified":1587133419594},{"_id":"public/images/ai/11.png","hash":"ebd77261e047d6dc9efc6971a99080099716efc9","modified":1587133419594},{"_id":"public/images/ai/10.png","hash":"26492a5305f468c7f9db73644a981eeee7c7de5a","modified":1587133419594},{"_id":"public/images/ai/13.png","hash":"0b18b91ca71c8fdd1131880df6a31fbf2637e314","modified":1587133419594},{"_id":"public/images/ai/16.png","hash":"d952bf60d8aedf29f817c0c28050bdb52b1ded76","modified":1587133419594},{"_id":"public/images/ai/17.png","hash":"880d6dfcfa28edd1dd35bdab82aa4416dece1338","modified":1587133419594},{"_id":"public/images/ai/12.png","hash":"51ccc0c92cc9805268e142c3d488875508982f6a","modified":1587133419594},{"_id":"public/images/ai/14.png","hash":"36c0d6b3952b724ffe7a4e064559a68334d63e7e","modified":1587133419594},{"_id":"public/images/ai/20.png","hash":"c06df282cfbd420d05f59b39d5b4434f3c8f4589","modified":1587133419594},{"_id":"public/images/ai/25.png","hash":"ef5b4d671a997a48ff1fa700f9f4c087edd9f838","modified":1587133419594},{"_id":"public/images/ai/26.png","hash":"8ba7d0c7d3e91e516afbad93245063085ddc5cbc","modified":1587133419595},{"_id":"public/images/ai/27.png","hash":"c536f70765dd076d653e34836abb046b1b275fa5","modified":1587133419595},{"_id":"public/images/ai/28.png","hash":"5e20eadc0ab28adcec211a6398a0a266145b25be","modified":1587133419595},{"_id":"public/images/ai/23.png","hash":"bd358effdd8e0691b808fa46a6ed031051a3e3d0","modified":1587133419595},{"_id":"public/images/ai/18.png","hash":"79e74ad64d26d026d2c1afae5ec90aa80c8dc131","modified":1587133419595},{"_id":"public/images/ai/29.png","hash":"43d887f2ec60c7ec4d6b4018a80ecd72bee50dec","modified":1587133419595},{"_id":"public/images/ai/24.png","hash":"04e4b378b831c0fb8a3147dccedfebf851acc590","modified":1587133419595},{"_id":"public/images/ai/34.png","hash":"53e114bd5e091de0b0c00c0f7e9e777776127023","modified":1587133419595},{"_id":"public/images/ai/35.png","hash":"73215ba6df69da95008171b3e876bedc0516e200","modified":1587133419595},{"_id":"public/images/ai/31.png","hash":"85cf5fbbea342c9c254d48a52ef19415f9fe102f","modified":1587133419595},{"_id":"public/images/ai/33.png","hash":"019ecf7f95ce2d2ca26bd302899211b3907333ea","modified":1587133419595},{"_id":"public/images/ai/38.png","hash":"7997bf7835da9d5fd69a03e02ca4f6ac5e87e5d9","modified":1587133419595},{"_id":"public/images/ai/32.png","hash":"0db43b80e834717e659b519a763b19114bc17290","modified":1587133419595},{"_id":"public/images/ai/41.png","hash":"39972f1f80f41606cdb673b03b4d9f833ea06e92","modified":1587133419595},{"_id":"public/images/ai/40.png","hash":"80ec728674d602a1242a63372d41e3c09d42ab58","modified":1587133419595},{"_id":"public/images/ai/44.png","hash":"0cf14067ef5bf6b88c6e82d1b0bd82f98f820ab8","modified":1587133419595},{"_id":"public/images/ai/42.png","hash":"4a51bae240ede3954833376daeb6d61d72b5b2fe","modified":1587133419595},{"_id":"public/images/blog/google_search4.png","hash":"d2183299b3db610685b9eae0eb4c26f723380874","modified":1587133419595},{"_id":"public/images/ai/45.png","hash":"c59356ae2bd32aa56aedc4515af1c5597107e909","modified":1587133419595},{"_id":"public/images/movie/bwbj2.jpg","hash":"1645757f50c53a4bbb80c2e17873251b7621d8d0","modified":1587133419595},{"_id":"public/images/blog/google_search.png","hash":"c38e3b87694887e0840eb915d3baba73f9f7e67a","modified":1587133419595},{"_id":"public/images/blog/google_search3.png","hash":"189a33243842f9f13dd5643e960f870dfd00a916","modified":1587133419595},{"_id":"public/images/movie/no_war.jpg","hash":"03e7c7fe1d1ae762be7832d463b6a422a3d7357b","modified":1587133419595},{"_id":"public/images/blog/google_search5.png","hash":"f80c3a4946987332dc11df0e0d8cd78440e5224b","modified":1587133419595},{"_id":"public/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1587133419601},{"_id":"public/favicon_bak_big.ico","hash":"20054e2789b1a26d9ba34be4662a0910015b8c10","modified":1587133419603},{"_id":"public/images/Slogan.png","hash":"d270bba16d21a8207e1a3abe7efa646ac83506e3","modified":1587133419603},{"_id":"public/images/maupassant.jpg","hash":"fa0e39d4cca3899571140ebf259d6a6045c234bb","modified":1587133419604},{"_id":"public/images/profile_bak_big.jpg","hash":"02c503eebd742f9aac901cd3d2e9cd1a2db7cbf4","modified":1587133419604},{"_id":"public/images/schedule v3.0.png","hash":"85d53ede58a8ce03d337c287a29cc12c4bb97e75","modified":1587133419604},{"_id":"public/images/blog/scarsu-baidu.png","hash":"d153241c8e6b9b579a64dc0d77b5ee52e2a80263","modified":1587133419604},{"_id":"public/images/blog/shenma.png","hash":"adfa661a15da1d96785d25953b1a506a81b93356","modified":1587133419604},{"_id":"public/images/devtools/000.png","hash":"cc3498ea5ef888a78868c473fcd25b76ba6e62c5","modified":1587133419604},{"_id":"public/images/devtools/011.png","hash":"198e745a5d1729cb59d40084c79b4f670c68e3f8","modified":1587133419604},{"_id":"public/images/devtools/010.png","hash":"2bcf243f9f3c22c8e7c7d119f14443457596c6d3","modified":1587133419604},{"_id":"public/images/devtools/130.png","hash":"ffa1f9ecd4bdd0c41d002d883f89b423d53f881b","modified":1587133419604},{"_id":"public/images/devtools/051.png","hash":"c331ce7d6c91967c72d8132ae6fa4fd47e349a54","modified":1587133419604},{"_id":"public/images/devtools/131.png","hash":"163aa1ff1ccf47e45a99a6dff5fd19101118cb37","modified":1587133419604},{"_id":"public/images/devtools/200.png","hash":"4fed1fdfbd0beda6d803720479f6464d88982515","modified":1587133419604},{"_id":"public/images/devtools/133.gif","hash":"1aa7fc9ad2b024b3f5fce63add221ae5f5e5ea6d","modified":1587133419605},{"_id":"public/images/devtools/203.gif","hash":"a5950c2e1b1fdecdd5680866244e0809e91afcb6","modified":1587133419605},{"_id":"public/images/devtools/211.gif","hash":"a8a2e27f0f85490bec6fbe3cbd0f96cd00d38d26","modified":1587133419605},{"_id":"public/images/devtools/207.png","hash":"0e2afa90952c38932e87676b83e89b8ab0951b26","modified":1587133419605},{"_id":"public/images/gitbook/web_font01.png","hash":"e6795d49c23e8705f847bb3d1fbd49620cbd3350","modified":1587133419605},{"_id":"public/images/gitbook/web_font03.png","hash":"2e710f6177d2663f3b3dbb4bdcd200e5e2012a18","modified":1587133419605},{"_id":"public/images/post/003.png","hash":"77e199bb723835b4989290731b9a4e39fede67f3","modified":1587133419605},{"_id":"public/images/stateofjs/1.png","hash":"d87af032052cfdc70f3786234d9bc922ca526d04","modified":1587133419605},{"_id":"public/images/ai/03.png","hash":"a43c69e998137abfc4a2d1a79124433bf4730b84","modified":1587133419605},{"_id":"public/images/ai/01.png","hash":"99271ef28b5b2e0d1e311ff23e0e31e05c3abd3a","modified":1587133419605},{"_id":"public/images/ai/21.png","hash":"931099fe5bab57f72c54f17239dd9cebbb859321","modified":1587133419605},{"_id":"public/images/ai/15.png","hash":"2e5355a2b7fa32fe443bc234ea800ddf68adc840","modified":1587133419605},{"_id":"public/images/ai/39.png","hash":"84f218d5543d0cfe7c04355ed6d680c722e6776e","modified":1587133419605},{"_id":"public/images/ai/43.png","hash":"296921057ef4fc321e72e0b251f4caaa916083fe","modified":1587133419605},{"_id":"public/images/blog/google_search2.png","hash":"21d386888d09580f9023da57cb13fa8304d1c435","modified":1587133419606},{"_id":"public/images/movie/tsaml3.jpeg","hash":"5a9d23af0287e54060c4f2e3b8d90e256597e676","modified":1587133419606},{"_id":"public/images/movie/tsaml1.gif","hash":"dbb3fda84c01456047672b1ed0d72a35d5d56f4f","modified":1587133419606},{"_id":"public/images/notion/ds.png","hash":"bd4b51b536b22e192f50e6351d9aa9884558fd08","modified":1587183041681},{"_id":"public/images/ai/19.png","hash":"1faa4a0e942071884c981d8130836086b36bad69","modified":1587133419606},{"_id":"public/images/notion/header.png","hash":"c5ebd687a663e6807fd2ece16869ab99832f7632","modified":1587133419606},{"_id":"public/css/donate.css","hash":"1383a53abde35718cbb60353d36e6d57235d9b9e","modified":1587133419619},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1587133419619},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1587133419619},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1587133419619},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1587133419619},{"_id":"public/js/search.js","hash":"e2692eb3a72a6f9f40756e194af17e0b10f39101","modified":1587133419619},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1587133419619},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1587133419619},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1587133419619},{"_id":"public/donate/index.html","hash":"c9dc1587466cb4a1d7a4e045e3d5d59c81d7dd15","modified":1587133419619},{"_id":"public/images/devtools/212.gif","hash":"932a547023ac293373d0a7d0a99103920a75b693","modified":1587133419619},{"_id":"public/images/devtools/201.gif","hash":"a55d80037ca54a18934e2a13c07c3cfe48251c8d","modified":1587133419619},{"_id":"public/images/movie/rsgs4.jpeg","hash":"9f7aa17885c627743d1b5263a8ebc7cd6f096064","modified":1587133419619},{"_id":"public/images/post/004.png","hash":"3e8c5fd447b95e73daee4477701b7d0690217a3a","modified":1587133419619},{"_id":"public/images/stateofjs/000.png","hash":"39990e5515da56e3179274c33c4d6adcfc32afc0","modified":1587133419619},{"_id":"public/images/stateofjs/001.png","hash":"61ea320c9a2580c68884cbb100f5a3432adebffe","modified":1587133419619},{"_id":"public/images/post/005.png","hash":"7ca58e79e362dc47225100e63641359aff4dd744","modified":1587133419619},{"_id":"public/images/ai/36.png","hash":"367e9e5774f2b0bf320ca25a1e2bfcf4bda0fc03","modified":1587133419619},{"_id":"public/images/ai/30.png","hash":"c09289ead258b80b802961c77e4e1549f2471c0e","modified":1587133419619},{"_id":"public/images/ai/37.png","hash":"5649709ab965bb0d994268eea5d9ea35381e2572","modified":1587133419619},{"_id":"public/images/continuous_action.png","hash":"e5f172d441f522aa3d62f3bfb6f0478e566bd585","modified":1587133419623},{"_id":"public/images/devtools/050.png","hash":"2de60daf6e505379587d4e502a1bccf50fe6b86c","modified":1587133419623},{"_id":"public/images/devtools/040.png","hash":"901acbb786cef1cc8a21b08613670ea3e344895a","modified":1587133419624},{"_id":"public/images/ai/22.png","hash":"b44e40857fd5bb721b2b085abd859ef061fc0333","modified":1587133419624},{"_id":"public/css/default.css","hash":"c245680e6900ca43514d2023bf1f0e1b539992dc","modified":1587133419630},{"_id":"public/images/devtools/208.gif","hash":"768a2842d3270857a7cc02ead069287005d539bc","modified":1587133419630},{"_id":"public/images/post/001.png","hash":"744026cb0a6f80dd336d94765170fe7c5dd812d2","modified":1587133419631},{"_id":"public/images/self_control.png","hash":"daec630a46993814592c07514619a3225ff26a74","modified":1587133419646},{"_id":"public/images/devtools/202.gif","hash":"8d098caa60ac7728d4d817cbba7f36c056f9a31b","modified":1587133419648},{"_id":"public/images/movie/jrayty.png","hash":"26761eaf6faee157505a697fe3b852a8c56e03e7","modified":1587133419648},{"_id":"public/images/movie/agzz2.jpeg","hash":"f3b723889dcae55904787ebb53a71f6fc2b878de","modified":1587133419688},{"_id":"public/images/devtools/207.gif","hash":"8fa8fae5d8fce89678326a4997f3e1993792daf9","modified":1587133419692},{"_id":"public/images/movie/agzz3.jpeg","hash":"27c8d1f572f0b4d9939477f5b6c71570284a689b","modified":1587133419692},{"_id":"public/images/movie/agzz1.jpeg","hash":"a11787ecd8d1207f53c4a91236bffae329807d03","modified":1587133419692},{"_id":"public/images/notion/home.png","hash":"f7647ff6144180023860d647db3d18ff69abd941","modified":1587183041693},{"_id":"public/images/ai/02.png","hash":"0fc582f1db4f791dfc51e38eccc8e23586d9be4d","modified":1587133419692},{"_id":"public/css/style.css","hash":"0b27b08ea41f307390f3c0a136c8ea53905ef762","modified":1587133419802},{"_id":"public/images/ai/04.png","hash":"1945193bc3bb0d8ef35f8a4a13d2b289eff15f3d","modified":1587133419802},{"_id":"public/images/movie/tsaml4.jpeg","hash":"797ef29cbb2f665bddd278e15c36fd6872da4ca4","modified":1587133419804},{"_id":"public/images/movie/rsgs3.jpeg","hash":"843469c2db31cd07e6be6b534cc8982566d0de71","modified":1587133419804},{"_id":"public/images/devtools/206.gif","hash":"7017d0776ca9fea8232eba98082e0b2cd2269033","modified":1587133419805},{"_id":"public/images/movie/rsgs2.jpeg","hash":"fd51dcd95453e93dafe05f28b628970a19d946b0","modified":1587133419805},{"_id":"public/images/devtools/213.gif","hash":"38f16d2021930f25ede0fa59d894ae306ea524d4","modified":1587133419805},{"_id":"public/images/movie/wmsj2.png","hash":"03d1073b9e033a2fdcfcebc1383b131e4f92f3d5","modified":1587133419806},{"_id":"public/images/movie/tsaml2.png","hash":"67c781a3650be2934974761d26bdb9badc2d4f37","modified":1587133419808},{"_id":"public/images/movie/rsgs1.jpeg","hash":"2c93647a3bc6cd4cfc56cf2cfdf78d2643e6be48","modified":1587133419810},{"_id":"public/images/movie/wmsj.jpeg","hash":"ad4d70dff76d35bc24b4625866dd4c27fef5e921","modified":1587133419811},{"_id":"public/images/movie/bwbj1.png","hash":"18adfaddcd058585bd4c559cad0068226de506ad","modified":1587133419811},{"_id":"public/images/movie/jcldxt.jpg","hash":"12cd96fe697c505884a0baccdf583cc32f8e1f5e","modified":1587133419812},{"_id":"public/js/gitment.browser.js","hash":"b16277d8b38666a58cbaeb339f4fb0e82238ca1b","modified":1587133419814},{"_id":"public/images/movie/prxd2.jpeg","hash":"b20b3346a8b57139fdc005ec6b8d16416b325798","modified":1587133419814},{"_id":"public/images/movie/prxd1.jpeg","hash":"b15c44d3c80ccf4509a7178d69df4d274f0849b0","modified":1587133419816},{"_id":"source/_posts/cs_english.md","hash":"6e126fa8ca0d038802ec70d76b0b14a83cff3941","modified":1588141461749},{"_id":"source/_posts/tools.md","hash":"a67115337cd2e7824db0be79aa3925f611c2ebdb","modified":1587170985062},{"_id":"source/_posts/vm_in_devtools.md","hash":"565cf0878c5c120817dacb633c15d34fc32db528","modified":1587170985080},{"_id":"public/vm_in_devtools/index.html","hash":"f4ff9ee02482086cda6fccb3bdfc42d781a6bc02","modified":1587183041629},{"_id":"public/cs_english/index.html","hash":"14d92bc745fcda798c2dc8bd4812e952fd700df9","modified":1588126946780},{"_id":"public/tools/index.html","hash":"087c937e422c5fd5e65d8ea1a3118a634d21785b","modified":1588126946780},{"_id":"public/categories/lang/index.html","hash":"5eb933b19402d41fd2a0f80e747c6131af105738","modified":1588126946780},{"_id":"public/archives/2018/01/index.html","hash":"d9b402d3b0f37b84e3d72e1377414252674623f6","modified":1588126946781},{"_id":"public/archives/2020/02/index.html","hash":"54e32305f2f456957ce7505afd15a4b4d305a48e","modified":1588126946784},{"_id":"source/_posts/fed_ml_09_under & over fitting.md","hash":"ae4b063f5990dc676acee06f50c2f6cf6db5d9e1","modified":1587969235591},{"_id":"source/images/ai/47.png","hash":"3a1920c9f2443356df8032d28e9f264ee8ca4dc4","modified":1587957576867},{"_id":"source/images/ai/49.png","hash":"1f8cd181e5fbd7afc9598d576b3e19bfa436cd84","modified":1587957705531},{"_id":"source/images/ai/52.png","hash":"4f2ef4d67fd520480316825300054762e24e185b","modified":1587968351250},{"_id":"source/images/ai/51.png","hash":"ef0ddb1c104d2d793a869b849b08ecee161c1c3d","modified":1587966907007},{"_id":"source/images/ai/54.png","hash":"bcd7e620db670266714c16cfc3137ff62d0b7875","modified":1587969188308},{"_id":"source/images/ai/53.png","hash":"ae11df9b192eb5b15f825acfc3b45958cbe2f56a","modified":1587969101428},{"_id":"source/images/ai/46.png","hash":"081a687a587619ec2262984118dbad9b35761b15","modified":1587957465105},{"_id":"source/images/ai/48.png","hash":"75a86c2a935420e1feee31d91d21f748e219236d","modified":1587957596971},{"_id":"source/images/ai/50.png","hash":"3eb435715c42b1f751b13c23bcba11afc36b7a43","modified":1587958190797},{"_id":"source/images/ai/000.gif","hash":"12a36f10b7e4c282e4dd2a2820e68711e5fa6cfe","modified":1587967534161},{"_id":"public/fed_ml_09_under & over fitting/index.html","hash":"d7d8ca6e2a6ee8513adbaeb4f6b6f4fc7ec3dd07","modified":1587969258711},{"_id":"public/images/ai/49.png","hash":"1f8cd181e5fbd7afc9598d576b3e19bfa436cd84","modified":1587969258721},{"_id":"public/images/ai/52.png","hash":"4f2ef4d67fd520480316825300054762e24e185b","modified":1587969258722},{"_id":"public/images/ai/51.png","hash":"ef0ddb1c104d2d793a869b849b08ecee161c1c3d","modified":1587969258722},{"_id":"public/images/ai/54.png","hash":"bcd7e620db670266714c16cfc3137ff62d0b7875","modified":1587969258722},{"_id":"public/images/ai/53.png","hash":"ae11df9b192eb5b15f825acfc3b45958cbe2f56a","modified":1587969258722},{"_id":"public/images/ai/47.png","hash":"3a1920c9f2443356df8032d28e9f264ee8ca4dc4","modified":1587969258725},{"_id":"public/images/ai/46.png","hash":"081a687a587619ec2262984118dbad9b35761b15","modified":1587969258726},{"_id":"public/images/ai/48.png","hash":"75a86c2a935420e1feee31d91d21f748e219236d","modified":1587969258726},{"_id":"public/images/ai/50.png","hash":"3eb435715c42b1f751b13c23bcba11afc36b7a43","modified":1587969258804},{"_id":"public/images/ai/000.gif","hash":"12a36f10b7e4c282e4dd2a2820e68711e5fa6cfe","modified":1587969258855},{"_id":"source/_posts/customize_vscode.md","hash":"facd39bc50aaa0c442c60c5d89422f2a83a6fdfe","modified":1588126521162},{"_id":"source/_posts/fed_ml_09_under&overfitting.md","hash":"6685e2c03abe490be468e53dfcd746328ca4aa02","modified":1588145040409},{"_id":"source/_posts/fed_ml_10_handwriting_number.md","hash":"ec1ab032639949eebb1d67cc5b3e70b1ae19c771","modified":1588145034644},{"_id":"source/_posts/fed_ml_11_pre_training_model.md","hash":"ca6b6fd3da9a555cb548dd0b1b14689ea66ee3cd","modified":1588145012793},{"_id":"source/_posts/fed_ml_12_transfer_learning.md","hash":"46d0b44f2ba03dd946eacb372b4bed57d3574289","modified":1588145015265},{"_id":"source/_posts/fed_ml_13_speech_recognition.md","hash":"ea2492f12f08bb59d92c10b4c706db5756a53401","modified":1588141865965},{"_id":"source/images/ai/56.png","hash":"8a28832b8c69fa9c2a5d0e9725d6b04bf269e36d","modified":1587975779565},{"_id":"source/images/ai/57.png","hash":"e850580bc849a4a0ed921c9c01e0c85ded319e28","modified":1587976143874},{"_id":"source/images/ai/55.png","hash":"85188eefeed301a8999a9ee404952519268de452","modified":1587975958949},{"_id":"source/images/ai/58.png","hash":"0f3b849a7c3de663df7cb9473846dc56958756f8","modified":1587976566607},{"_id":"source/images/ai/60.png","hash":"e5c35e7a3f567044d56b6f6272765eea1c2bb503","modified":1587981553034},{"_id":"source/images/ai/61.png","hash":"bc95a5bb1e5f5733fcf4206d13031805eff2d515","modified":1588035230190},{"_id":"source/images/ai/62.png","hash":"c9283991adb0e2006eb12651370c8a6ff0329fd6","modified":1588045075468},{"_id":"source/images/ai/63.png","hash":"8e4a675f82be6fc9881581a47522ccdbe7248914","modified":1588053798114},{"_id":"source/images/ai/64.png","hash":"b031691e8fd3d9ed15870f3ca734897f7a55fd75","modified":1588056255026},{"_id":"source/images/ai/65.png","hash":"00da9ecc4ef8bf7e3a3b723fa8400c8143a2a1b9","modified":1588056642827},{"_id":"source/images/ai/66.png","hash":"86609ff198905c2349065761f10a6cd029c25650","modified":1588057862298},{"_id":"source/images/ai/59.png","hash":"e35975b3432e0249489a8c792d0af50a73569973","modified":1587980046667},{"_id":"source/images/ai/002.gif","hash":"6a7844f1667e0bd18c7efed87f8754274893a395","modified":1588058122102},{"_id":"source/images/ai/001.gif","hash":"8e6b6eef19ee00301fddc70c80e8e79266566ad6","modified":1588035706804},{"_id":"public/fed_ml_13_speech_recognition/index.html","hash":"fbc7c29117e678e3ec54b0a8a0ccf39604282f9f","modified":1588126946807},{"_id":"public/customize_vscode/index.html","hash":"e988d661b1d196c9a339cad1b0081a5ca6783967","modified":1588126946807},{"_id":"public/fed_ml_11_pre_training_model/index.html","hash":"545a4d0230f3fcecceeb4b171554b9c7e217aa0c","modified":1588126946808},{"_id":"public/fed_ml_12_transfer_learning/index.html","hash":"52d2b0b075674d15b0f0548944cce907a72b6ff6","modified":1588126946808},{"_id":"public/fed_ml_10_handwriting_number/index.html","hash":"e0de6e26393b7c1619b2cd4c02756d078aac42d6","modified":1588126946808},{"_id":"public/fed_ml_09_under&overfitting/index.html","hash":"2ba98ad6f5a3e73973ec8e59cfd02b042bb4b73e","modified":1588126946808},{"_id":"public/images/ai/57.png","hash":"e850580bc849a4a0ed921c9c01e0c85ded319e28","modified":1588126946811},{"_id":"public/images/ai/55.png","hash":"85188eefeed301a8999a9ee404952519268de452","modified":1588126946811},{"_id":"public/images/ai/58.png","hash":"0f3b849a7c3de663df7cb9473846dc56958756f8","modified":1588126946811},{"_id":"public/images/ai/60.png","hash":"e5c35e7a3f567044d56b6f6272765eea1c2bb503","modified":1588126946812},{"_id":"public/images/ai/61.png","hash":"bc95a5bb1e5f5733fcf4206d13031805eff2d515","modified":1588126946812},{"_id":"public/images/ai/62.png","hash":"c9283991adb0e2006eb12651370c8a6ff0329fd6","modified":1588126946815},{"_id":"public/images/ai/63.png","hash":"8e4a675f82be6fc9881581a47522ccdbe7248914","modified":1588126946816},{"_id":"public/images/ai/65.png","hash":"00da9ecc4ef8bf7e3a3b723fa8400c8143a2a1b9","modified":1588126946816},{"_id":"public/images/ai/64.png","hash":"b031691e8fd3d9ed15870f3ca734897f7a55fd75","modified":1588126946816},{"_id":"public/images/ai/66.png","hash":"86609ff198905c2349065761f10a6cd029c25650","modified":1588126946816},{"_id":"public/images/ai/56.png","hash":"8a28832b8c69fa9c2a5d0e9725d6b04bf269e36d","modified":1588126946850},{"_id":"public/images/ai/59.png","hash":"e35975b3432e0249489a8c792d0af50a73569973","modified":1588126946852},{"_id":"public/images/ai/002.gif","hash":"6a7844f1667e0bd18c7efed87f8754274893a395","modified":1588126946927},{"_id":"public/images/ai/001.gif","hash":"8e6b6eef19ee00301fddc70c80e8e79266566ad6","modified":1588126946931},{"_id":"source/_posts/fed_ml_14_slider.md","hash":"d6e80116d5dd4d02bdc4e6e32cf5829f08622aca","modified":1588144920169},{"_id":"source/images/ai/003.gif","hash":"de9361cc26df550d89538f0b43544676bd0ca7cb","modified":1588141834505},{"_id":"source/images/ai/67.png","hash":"42df3002f2abddc1b035d923a9192d255740fd51","modified":1588142279682},{"_id":"source/_posts/fed_ml_15_py_model.md","hash":"9c7ff349f3985232774f982293206ccf8d96934f","modified":1588146647304},{"_id":"source/_posts/vue_store_and_vuex.md","hash":"5b2159d1dc7f1616561ae5a3c4bc9878e4e65bc6","modified":1588235285978},{"_id":"source/images/vuex1.png","hash":"5d5d421d15e91243c9b285c19fa56ed86642a945","modified":1588206234000},{"_id":"source/images/vuex3.png","hash":"bfa1a78618ddbef0fd4d331cd1a94ff6ab72c653","modified":1588206234000},{"_id":"source/images/vuex2.png","hash":"ba4fcc70a8c087d80d8817599e05ef6bfdb4fc99","modified":1588206234000}],"Category":[{"name":"03 JavaScript","_id":"ck94a9aoq000407s68s6ig1ta"},{"name":"01 HTML","_id":"ck94a9aow000c07s6zttfbfmw"},{"name":"02 CSS","_id":"ck94a9aoz000k07s625i9jtut"},{"name":"05 课外输入","_id":"ck94a9ap5000y07s6qqfx7y62"},{"name":"07 工具库","_id":"ck94a9ap7001307s6opr5hsut"},{"name":"00 ScarSu","_id":"ck94a9apa001d07s6tq6y97yo"},{"name":"08 调试","_id":"ck94a9apd001n07s6hxew9soq"},{"name":"12 MachineLearning","_id":"ck94a9apg001x07s6s45crzq9"},{"name":"06 构建工具","_id":"ck94a9apq002u07s6buopdpec"},{"name":"10 DataBase","_id":"ck94a9apr002y07s6kyvpkdbn"},{"name":"11 Tools","_id":"ck94a9apr003107s65eqhl0j3"},{"name":"13 外语","_id":"ck94anlyv0002u2s6j2ebax21"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"description":"腾讯404公益页面","_content":"\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n","date":"2020-04-08T00:43:01.107Z","updated":"2020-04-08T00:43:01.107Z","path":"/404.html","_id":"ck94a9aoj000007s62orpu3px","layout":"page","content":"<p>&lt;!DOCTYPE html&gt;</p>\n<html><br>    <head><meta name=\"generator\" content=\"Hexo 3.9.0\"><br>         <meta charset=\"UTF-8\"><br>         <title>404</title><br>    <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head><br>    <body><br>         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homepagename=\"返回首页\" homepageurl=\"https://www.scarsu.com\"></script><br>    </body><br></html>\n","site":{"data":{}},"excerpt":"","more":"<p>&lt;!DOCTYPE html&gt;</p>\n<html><br>    <head><meta name=\"generator\" content=\"Hexo 3.9.0\"><br>         <meta charset=\"UTF-8\"><br>         <title>404</title><br>    <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head><br>    <body><br>         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homepagename=\"返回首页\" homepageurl=\"https://www.scarsu.com\"></script><br>    </body><br></html>\n"},{"title":"关于","_content":"\n#### About\n- <i class=\"fa fa-github\"></i>   <a href=\"https://github.com/scarsu\">scarsu</a>\n- <i class=\"fa fa-envelope\"></i>     scarsu001@gmail.com\n- <i class=\"fa fa-qq\"></i><i class=\"fa fa-wechat\"></i>    907866991\n\n\n<!-- #### Note\n- <a href=\"https://www.scarsu.com/escape_from_the_world/\" target=\"_blank\">【我与这世界的距离】</a>一些胡言乱语。 -->\n\n\n#### ~~Tags Me~~  No Tags Anymore 🚫\n- ~~HNU|BD🎓~~\n- ~~职场新人👶 (from 2018 to now~~\n- ~~程序媛🙊~~\n- ~~辣鸡FEDer🐓~~\n- ~~DIY爱好者🔨~~\n- ~~倡导轻断食 + 断舍离📖~~\n\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n\n<!-- ### 微信公众号：自律神仙ScarSu -->\n<!-- <img id=\"slogan_img\" src=\"/images/Slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/> -->\n","source":"about/index.md","raw":"---\ntitle: 关于\n---\n\n#### About\n- <i class=\"fa fa-github\"></i>   <a href=\"https://github.com/scarsu\">scarsu</a>\n- <i class=\"fa fa-envelope\"></i>     scarsu001@gmail.com\n- <i class=\"fa fa-qq\"></i><i class=\"fa fa-wechat\"></i>    907866991\n\n\n<!-- #### Note\n- <a href=\"https://www.scarsu.com/escape_from_the_world/\" target=\"_blank\">【我与这世界的距离】</a>一些胡言乱语。 -->\n\n\n#### ~~Tags Me~~  No Tags Anymore 🚫\n- ~~HNU|BD🎓~~\n- ~~职场新人👶 (from 2018 to now~~\n- ~~程序媛🙊~~\n- ~~辣鸡FEDer🐓~~\n- ~~DIY爱好者🔨~~\n- ~~倡导轻断食 + 断舍离📖~~\n\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n\n<!-- ### 微信公众号：自律神仙ScarSu -->\n<!-- <img id=\"slogan_img\" src=\"/images/Slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/> -->\n","date":"2020-04-08T00:43:01.215Z","updated":"2020-04-08T00:43:01.215Z","path":"about/index.html","_id":"ck94a9aoo000207s63g2zfgcy","comments":1,"layout":"page","content":"<h4 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h4><ul>\n<li><i class=\"fa fa-github\"></i>   <a href=\"https://github.com/scarsu\" target=\"_blank\" rel=\"noopener\">scarsu</a></li>\n<li><i class=\"fa fa-envelope\"></i>     <a href=\"mailto:scarsu001@gmail.com\" target=\"_blank\" rel=\"noopener\">scarsu001@gmail.com</a></li>\n<li><i class=\"fa fa-qq\"></i><i class=\"fa fa-wechat\"></i>    907866991</li>\n</ul>\n<!-- #### Note\n- <a href=\"https://www.scarsu.com/escape_from_the_world/\" target=\"_blank\">【我与这世界的距离】</a>一些胡言乱语。 -->\n<h4 id=\"Tags-Me-No-Tags-Anymore-🚫\"><a href=\"#Tags-Me-No-Tags-Anymore-🚫\" class=\"headerlink\" title=\"Tags Me  No Tags Anymore 🚫\"></a><del>Tags Me</del>  No Tags Anymore 🚫</h4><ul>\n<li><del>HNU|BD🎓</del></li>\n<li><del>职场新人👶 (from 2018 to now</del></li>\n<li><del>程序媛🙊</del></li>\n<li><del>辣鸡FEDer🐓</del></li>\n<li><del>DIY爱好者🔨</del></li>\n<li><del>倡导轻断食 + 断舍离📖</del></li>\n</ul>\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n<!-- ### 微信公众号：自律神仙ScarSu -->\n<!-- <img id=\"slogan_img\" src=\"/images/Slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/> -->\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h4><ul>\n<li><i class=\"fa fa-github\"></i>   <a href=\"https://github.com/scarsu\" target=\"_blank\" rel=\"noopener\">scarsu</a></li>\n<li><i class=\"fa fa-envelope\"></i>     <a href=\"mailto:scarsu001@gmail.com\" target=\"_blank\" rel=\"noopener\">scarsu001@gmail.com</a></li>\n<li><i class=\"fa fa-qq\"></i><i class=\"fa fa-wechat\"></i>    907866991</li>\n</ul>\n<!-- #### Note\n- <a href=\"https://www.scarsu.com/escape_from_the_world/\" target=\"_blank\">【我与这世界的距离】</a>一些胡言乱语。 -->\n<h4 id=\"Tags-Me-No-Tags-Anymore-🚫\"><a href=\"#Tags-Me-No-Tags-Anymore-🚫\" class=\"headerlink\" title=\"Tags Me  No Tags Anymore 🚫\"></a><del>Tags Me</del>  No Tags Anymore 🚫</h4><ul>\n<li><del>HNU|BD🎓</del></li>\n<li><del>职场新人👶 (from 2018 to now</del></li>\n<li><del>程序媛🙊</del></li>\n<li><del>辣鸡FEDer🐓</del></li>\n<li><del>DIY爱好者🔨</del></li>\n<li><del>倡导轻断食 + 断舍离📖</del></li>\n</ul>\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n<!-- ### 微信公众号：自律神仙ScarSu -->\n<!-- <img id=\"slogan_img\" src=\"/images/Slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/> -->\n"},{"title":"Apps","_content":"> 这是<span style=\"text-decoration:line-through;\">一</span>很多个坑，还在建设中\n\n#### [计算机相关?单词本](/cs_english)\n#### [留言墙](/comment/)\n#### 访问数据\n#### 随机手机壁纸\n#### 在线图片转换工具\n#### 简黑时钟\n#### 番茄钟\n#### 随机一句芬芳\n#### Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)\n\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","source":"apps/index.md","raw":"---\ntitle: Apps\n---\n> 这是<span style=\"text-decoration:line-through;\">一</span>很多个坑，还在建设中\n\n#### [计算机相关?单词本](/cs_english)\n#### [留言墙](/comment/)\n#### 访问数据\n#### 随机手机壁纸\n#### 在线图片转换工具\n#### 简黑时钟\n#### 番茄钟\n#### 随机一句芬芳\n#### Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)\n\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","date":"2020-04-29T03:49:07.468Z","updated":"2020-04-29T03:49:07.468Z","path":"apps/index.html","_id":"ck94a9aor000607s6yxsmy9cx","comments":1,"layout":"page","content":"<blockquote>\n<p>这是<span style=\"text-decoration:line-through;\">一</span>很多个坑，还在建设中</p>\n</blockquote>\n<h4 id=\"计算机相关-单词本\"><a href=\"#计算机相关-单词本\" class=\"headerlink\" title=\"计算机相关?单词本\"></a><a href=\"/cs_english\">计算机相关?单词本</a></h4><h4 id=\"留言墙\"><a href=\"#留言墙\" class=\"headerlink\" title=\"留言墙\"></a><a href=\"/comment/\">留言墙</a></h4><h4 id=\"访问数据\"><a href=\"#访问数据\" class=\"headerlink\" title=\"访问数据\"></a>访问数据</h4><h4 id=\"随机手机壁纸\"><a href=\"#随机手机壁纸\" class=\"headerlink\" title=\"随机手机壁纸\"></a>随机手机壁纸</h4><h4 id=\"在线图片转换工具\"><a href=\"#在线图片转换工具\" class=\"headerlink\" title=\"在线图片转换工具\"></a>在线图片转换工具</h4><h4 id=\"简黑时钟\"><a href=\"#简黑时钟\" class=\"headerlink\" title=\"简黑时钟\"></a>简黑时钟</h4><h4 id=\"番茄钟\"><a href=\"#番茄钟\" class=\"headerlink\" title=\"番茄钟\"></a>番茄钟</h4><h4 id=\"随机一句芬芳\"><a href=\"#随机一句芬芳\" class=\"headerlink\" title=\"随机一句芬芳\"></a>随机一句芬芳</h4><h4 id=\"Chrome-插件：书签导出助手-导出定时任务-监控书签更改自动导出\"><a href=\"#Chrome-插件：书签导出助手-导出定时任务-监控书签更改自动导出\" class=\"headerlink\" title=\"Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)\"></a>Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)</h4><!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是<span style=\"text-decoration:line-through;\">一</span>很多个坑，还在建设中</p>\n</blockquote>\n<h4 id=\"计算机相关-单词本\"><a href=\"#计算机相关-单词本\" class=\"headerlink\" title=\"计算机相关?单词本\"></a><a href=\"/cs_english\">计算机相关?单词本</a></h4><h4 id=\"留言墙\"><a href=\"#留言墙\" class=\"headerlink\" title=\"留言墙\"></a><a href=\"/comment/\">留言墙</a></h4><h4 id=\"访问数据\"><a href=\"#访问数据\" class=\"headerlink\" title=\"访问数据\"></a>访问数据</h4><h4 id=\"随机手机壁纸\"><a href=\"#随机手机壁纸\" class=\"headerlink\" title=\"随机手机壁纸\"></a>随机手机壁纸</h4><h4 id=\"在线图片转换工具\"><a href=\"#在线图片转换工具\" class=\"headerlink\" title=\"在线图片转换工具\"></a>在线图片转换工具</h4><h4 id=\"简黑时钟\"><a href=\"#简黑时钟\" class=\"headerlink\" title=\"简黑时钟\"></a>简黑时钟</h4><h4 id=\"番茄钟\"><a href=\"#番茄钟\" class=\"headerlink\" title=\"番茄钟\"></a>番茄钟</h4><h4 id=\"随机一句芬芳\"><a href=\"#随机一句芬芳\" class=\"headerlink\" title=\"随机一句芬芳\"></a>随机一句芬芳</h4><h4 id=\"Chrome-插件：书签导出助手-导出定时任务-监控书签更改自动导出\"><a href=\"#Chrome-插件：书签导出助手-导出定时任务-监控书签更改自动导出\" class=\"headerlink\" title=\"Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)\"></a>Chrome 插件：书签导出助手(导出定时任务 / 监控书签更改自动导出)</h4><!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->"},{"title":"认知/输入","subtitle":"睁开眼睛看看这世界吧","_content":"\n#### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n<!-- <a target=\"_blank\" href=\"http://www.fuyanshe.cn/headline/view/69259\">【你拥有的最宝贵的财富是什么？】</a>  -->\n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n#### 读书笔记\n- <a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》读书输出</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》读书输出——如何更高效的成长 </a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》读书输出</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》读书笔记</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/behavior_decision/\">《别做正常的傻瓜》行为决策学入门书籍,让你的每一个行为都得到最优解</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》读书输出</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories\n\n#### 推荐书单\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/10786473/\">《刻意学习》by Scalers</a> - 一本书教你借用数理学科的概念工具去思考和破解个人成长的问题\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27071913/\">《自控力》by Kelly McGonigal</a> - 斯坦福大学最受欢迎心理学课程\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/24749465/\">《断舍离》by 山下英子</a> - 透过整理物品了解自己，整理心中的混沌，让人生舒适的行动技术。\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门\n\n#### 笔记本\n- <a target=\"_blank\" href=\"https://www.scarsu.com/excape_from_the_world/\">【我与这世界的距离】</a>一些胡言乱语。\n- <a target=\"_blank\" href=\"https://www.notion.so/ddd411ef5246495c86be211c5127311b?v=2c3ed794f65b459a8305ca1f9fbdcb6c\">我的影单分享</a>","source":"cognition/index.md","raw":"---\ntitle: 认知/输入\nsubtitle: 睁开眼睛看看这世界吧\n---\n\n#### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n<!-- <a target=\"_blank\" href=\"http://www.fuyanshe.cn/headline/view/69259\">【你拥有的最宝贵的财富是什么？】</a>  -->\n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n#### 读书笔记\n- <a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》读书输出</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》读书输出——如何更高效的成长 </a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》读书输出</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》读书笔记</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/behavior_decision/\">《别做正常的傻瓜》行为决策学入门书籍,让你的每一个行为都得到最优解</a> \n- <a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》读书输出</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories\n\n#### 推荐书单\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/10786473/\">《刻意学习》by Scalers</a> - 一本书教你借用数理学科的概念工具去思考和破解个人成长的问题\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27071913/\">《自控力》by Kelly McGonigal</a> - 斯坦福大学最受欢迎心理学课程\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/24749465/\">《断舍离》by 山下英子</a> - 透过整理物品了解自己，整理心中的混沌，让人生舒适的行动技术。\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门\n\n#### 笔记本\n- <a target=\"_blank\" href=\"https://www.scarsu.com/excape_from_the_world/\">【我与这世界的距离】</a>一些胡言乱语。\n- <a target=\"_blank\" href=\"https://www.notion.so/ddd411ef5246495c86be211c5127311b?v=2c3ed794f65b459a8305ca1f9fbdcb6c\">我的影单分享</a>","date":"2020-04-30T08:43:42.658Z","updated":"2020-04-30T08:43:42.658Z","path":"cognition/index.html","_id":"ck94a9aos000807s64h1pqjji","comments":1,"layout":"page","content":"<h4 id=\"文章推荐\"><a href=\"#文章推荐\" class=\"headerlink\" title=\"文章推荐\"></a>文章推荐</h4><ul>\n<li><a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> <!-- <a target=\"_blank\" href=\"http://www.fuyanshe.cn/headline/view/69259\">【你拥有的最宝贵的财富是什么？】</a>  --></li>\n<li><a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> </li>\n</ul>\n<h4 id=\"读书笔记\"><a href=\"#读书笔记\" class=\"headerlink\" title=\"读书笔记\"></a>读书笔记</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》读书输出</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》读书输出——如何更高效的成长 </a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》读书输出</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》读书笔记</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/behavior_decision/\">《别做正常的傻瓜》行为决策学入门书籍,让你的每一个行为都得到最优解</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》读书输出</a> </li>\n</ul>\n<h4 id=\"优质社区\"><a href=\"#优质社区\" class=\"headerlink\" title=\"优质社区\"></a>优质社区</h4><ul>\n<li><a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories</li>\n</ul>\n<h4 id=\"推荐书单\"><a href=\"#推荐书单\" class=\"headerlink\" title=\"推荐书单\"></a>推荐书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/10786473/\">《刻意学习》by Scalers</a> - 一本书教你借用数理学科的概念工具去思考和破解个人成长的问题</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27071913/\">《自控力》by Kelly McGonigal</a> - 斯坦福大学最受欢迎心理学课程</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/24749465/\">《断舍离》by 山下英子</a> - 透过整理物品了解自己，整理心中的混沌，让人生舒适的行动技术。</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门</li>\n</ul>\n<h4 id=\"笔记本\"><a href=\"#笔记本\" class=\"headerlink\" title=\"笔记本\"></a>笔记本</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/excape_from_the_world/\">【我与这世界的距离】</a>一些胡言乱语。</li>\n<li><a target=\"_blank\" href=\"https://www.notion.so/ddd411ef5246495c86be211c5127311b?v=2c3ed794f65b459a8305ca1f9fbdcb6c\">我的影单分享</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"文章推荐\"><a href=\"#文章推荐\" class=\"headerlink\" title=\"文章推荐\"></a>文章推荐</h4><ul>\n<li><a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> <!-- <a target=\"_blank\" href=\"http://www.fuyanshe.cn/headline/view/69259\">【你拥有的最宝贵的财富是什么？】</a>  --></li>\n<li><a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> </li>\n</ul>\n<h4 id=\"读书笔记\"><a href=\"#读书笔记\" class=\"headerlink\" title=\"读书笔记\"></a>读书笔记</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》读书输出</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》读书输出——如何更高效的成长 </a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》读书输出</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》读书笔记</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/behavior_decision/\">《别做正常的傻瓜》行为决策学入门书籍,让你的每一个行为都得到最优解</a> </li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》读书输出</a> </li>\n</ul>\n<h4 id=\"优质社区\"><a href=\"#优质社区\" class=\"headerlink\" title=\"优质社区\"></a>优质社区</h4><ul>\n<li><a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories</li>\n</ul>\n<h4 id=\"推荐书单\"><a href=\"#推荐书单\" class=\"headerlink\" title=\"推荐书单\"></a>推荐书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/10786473/\">《刻意学习》by Scalers</a> - 一本书教你借用数理学科的概念工具去思考和破解个人成长的问题</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27071913/\">《自控力》by Kelly McGonigal</a> - 斯坦福大学最受欢迎心理学课程</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/24749465/\">《断舍离》by 山下英子</a> - 透过整理物品了解自己，整理心中的混沌，让人生舒适的行动技术。</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门</li>\n</ul>\n<h4 id=\"笔记本\"><a href=\"#笔记本\" class=\"headerlink\" title=\"笔记本\"></a>笔记本</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/excape_from_the_world/\">【我与这世界的距离】</a>一些胡言乱语。</li>\n<li><a target=\"_blank\" href=\"https://www.notion.so/ddd411ef5246495c86be211c5127311b?v=2c3ed794f65b459a8305ca1f9fbdcb6c\">我的影单分享</a></li>\n</ul>\n"},{"_content":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","source":"comment/index.md","raw":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","date":"2020-04-17T14:10:58.000Z","updated":"2020-04-17T14:10:58.000Z","path":"comment/index.html","title":"","comments":1,"layout":"page","_id":"ck94a9aou000a07s633iyvrw8","content":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","site":{"data":{}},"excerpt":"","more":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>"},{"title":"demo","_content":"\n#### [1. 实时弹幕墙](http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html)\n\n#### [2.RandomQuote](https://codepen.io/zsy/full/PmpWzz)\n\n#### [3.Calculate](https://codepen.io/zsy/full/EmvpVm)\n\n#### [4.番茄钟](https://codepen.io/zsy/full/zwEpzL/)\n\n#### [5.GruntLearn](https://github.com/scarsu/gruntlearn)\n\n<!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n\n#### 6.Node.js即时通讯(毕设  等买的起服务器再放)\n\n#### 7.愿望清单\n- 【快应用】简黑时钟    (这么简单的功能实在没必要做app)\n- 【小程序】日子    (类似于生日管家，但是app太臃肿商业化)\n- 【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)\n```js\n//有想合作的请联系我邮箱  scarsu001@gmail.com\n```","source":"demo/index.md","raw":"---\ntitle: demo\n---\n\n#### [1. 实时弹幕墙](http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html)\n\n#### [2.RandomQuote](https://codepen.io/zsy/full/PmpWzz)\n\n#### [3.Calculate](https://codepen.io/zsy/full/EmvpVm)\n\n#### [4.番茄钟](https://codepen.io/zsy/full/zwEpzL/)\n\n#### [5.GruntLearn](https://github.com/scarsu/gruntlearn)\n\n<!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n\n#### 6.Node.js即时通讯(毕设  等买的起服务器再放)\n\n#### 7.愿望清单\n- 【快应用】简黑时钟    (这么简单的功能实在没必要做app)\n- 【小程序】日子    (类似于生日管家，但是app太臃肿商业化)\n- 【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)\n```js\n//有想合作的请联系我邮箱  scarsu001@gmail.com\n```","date":"2020-04-08T00:43:01.231Z","updated":"2020-04-08T00:43:01.231Z","path":"demo/index.html","_id":"ck94a9aox000f07s6z7o8ezxy","comments":1,"layout":"page","content":"<h4 id=\"1-实时弹幕墙\"><a href=\"#1-实时弹幕墙\" class=\"headerlink\" title=\"1. 实时弹幕墙\"></a><a href=\"http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html\" target=\"_blank\" rel=\"noopener\">1. 实时弹幕墙</a></h4><h4 id=\"2-RandomQuote\"><a href=\"#2-RandomQuote\" class=\"headerlink\" title=\"2.RandomQuote\"></a><a href=\"https://codepen.io/zsy/full/PmpWzz\" target=\"_blank\" rel=\"noopener\">2.RandomQuote</a></h4><h4 id=\"3-Calculate\"><a href=\"#3-Calculate\" class=\"headerlink\" title=\"3.Calculate\"></a><a href=\"https://codepen.io/zsy/full/EmvpVm\" target=\"_blank\" rel=\"noopener\">3.Calculate</a></h4><h4 id=\"4-番茄钟\"><a href=\"#4-番茄钟\" class=\"headerlink\" title=\"4.番茄钟\"></a><a href=\"https://codepen.io/zsy/full/zwEpzL/\" target=\"_blank\" rel=\"noopener\">4.番茄钟</a></h4><h4 id=\"5-GruntLearn\"><a href=\"#5-GruntLearn\" class=\"headerlink\" title=\"5.GruntLearn\"></a><a href=\"https://github.com/scarsu/gruntlearn\" target=\"_blank\" rel=\"noopener\">5.GruntLearn</a></h4><!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n<h4 id=\"6-Node-js即时通讯-毕设-等买的起服务器再放\"><a href=\"#6-Node-js即时通讯-毕设-等买的起服务器再放\" class=\"headerlink\" title=\"6.Node.js即时通讯(毕设  等买的起服务器再放)\"></a>6.Node.js即时通讯(毕设  等买的起服务器再放)</h4><h4 id=\"7-愿望清单\"><a href=\"#7-愿望清单\" class=\"headerlink\" title=\"7.愿望清单\"></a>7.愿望清单</h4><ul>\n<li>【快应用】简黑时钟    (这么简单的功能实在没必要做app)</li>\n<li>【小程序】日子    (类似于生日管家，但是app太臃肿商业化)</li>\n<li>【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有想合作的请联系我邮箱  scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-实时弹幕墙\"><a href=\"#1-实时弹幕墙\" class=\"headerlink\" title=\"1. 实时弹幕墙\"></a><a href=\"http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html\" target=\"_blank\" rel=\"noopener\">1. 实时弹幕墙</a></h4><h4 id=\"2-RandomQuote\"><a href=\"#2-RandomQuote\" class=\"headerlink\" title=\"2.RandomQuote\"></a><a href=\"https://codepen.io/zsy/full/PmpWzz\" target=\"_blank\" rel=\"noopener\">2.RandomQuote</a></h4><h4 id=\"3-Calculate\"><a href=\"#3-Calculate\" class=\"headerlink\" title=\"3.Calculate\"></a><a href=\"https://codepen.io/zsy/full/EmvpVm\" target=\"_blank\" rel=\"noopener\">3.Calculate</a></h4><h4 id=\"4-番茄钟\"><a href=\"#4-番茄钟\" class=\"headerlink\" title=\"4.番茄钟\"></a><a href=\"https://codepen.io/zsy/full/zwEpzL/\" target=\"_blank\" rel=\"noopener\">4.番茄钟</a></h4><h4 id=\"5-GruntLearn\"><a href=\"#5-GruntLearn\" class=\"headerlink\" title=\"5.GruntLearn\"></a><a href=\"https://github.com/scarsu/gruntlearn\" target=\"_blank\" rel=\"noopener\">5.GruntLearn</a></h4><!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n<h4 id=\"6-Node-js即时通讯-毕设-等买的起服务器再放\"><a href=\"#6-Node-js即时通讯-毕设-等买的起服务器再放\" class=\"headerlink\" title=\"6.Node.js即时通讯(毕设  等买的起服务器再放)\"></a>6.Node.js即时通讯(毕设  等买的起服务器再放)</h4><h4 id=\"7-愿望清单\"><a href=\"#7-愿望清单\" class=\"headerlink\" title=\"7.愿望清单\"></a>7.愿望清单</h4><ul>\n<li>【快应用】简黑时钟    (这么简单的功能实在没必要做app)</li>\n<li>【小程序】日子    (类似于生日管家，但是app太臃肿商业化)</li>\n<li>【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有想合作的请联系我邮箱  scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"前端导航","_content":"\n\n#### 友链\n- <a href=\"http://www.taoweng.site\">前端桃园</a>\n- <a href=\"https://leihuang.dev/\">Lei Huang</a>\n- <a href=\"http://blog.eccto.cn/index\">EricChen</a>\n- <a href=\"https://www.liaoyunduo.top/\">小心</a>\n\n#### 优秀的前端团队\n- <a href=\"https://75team.com/\">齐舞团</a>\n- <a href=\"http://fex.baidu.com/\">百度FEX</a>\n\n#### 前端必读书籍\n- Javascript高级程序设计\n- Javascript权威指南\n- 你不知道的Javascript\n\n#### 稳定的前端阅读源\n- <a href=\"https://javascriptweekly.com/issues\">javascript weekly</a>\n- <a href=\"https://75team.com/\">齐舞周刊</a>\n- <a href=\"https://github.com/Tnfe/TNFE-Weekly\">腾讯TNFE团队-weekly</a>\n\n#### 优质的开发者社区/阅读源\n- <a href=\"http://www.jstips.co/\">jstips</a>\n\n#### 前端大佬\n- <a href=\"https://me.getify.com/\">getify - Kyle Simpson </a> - you dont know js作者\n- <a href=\"https://www.h5jun.com/\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长\n- <a href=\"http://dr-axel.de/\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者\n- <a href=\"https://www.zhangxinxu.com/\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者\n- <a href=\"https://overreacted.io/\">Dan Abramov</a> - React 核心开发成员，Redux 作者\n- <a href=\"http://evanyou.me\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。\n- <a href=\"https://github.com/wintercn\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V\n- <a href=\"https://github.com/lifesinger\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端\n- <a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。\n- <a href=\"http://github.com/RubyLouvre\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。\n- <a href=\"https://github.com/JacksonTian\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。\n- <a href=\"https://github.com/michaelliao\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。\n\n#### 高质量的前端公号\n- 前端桃园\n\n#### 前端工具资源\n- <a href=\"https://devhints.io/\">fed cheatsheet</a> - all in one，前端snippets速查\n- <a href=\"https://github.com/30-seconds/30-seconds-of-code\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段\n\n#### rss\n\n<!-- #### FE Conf -->\n\n```js\n    //不定期更新\n    //排名不分先后\n    //推荐请联系邮箱 scarsu001@gmail.com\n```","source":"fe_nav/index.md","raw":"---\ntitle: 前端导航\n---\n\n\n#### 友链\n- <a href=\"http://www.taoweng.site\">前端桃园</a>\n- <a href=\"https://leihuang.dev/\">Lei Huang</a>\n- <a href=\"http://blog.eccto.cn/index\">EricChen</a>\n- <a href=\"https://www.liaoyunduo.top/\">小心</a>\n\n#### 优秀的前端团队\n- <a href=\"https://75team.com/\">齐舞团</a>\n- <a href=\"http://fex.baidu.com/\">百度FEX</a>\n\n#### 前端必读书籍\n- Javascript高级程序设计\n- Javascript权威指南\n- 你不知道的Javascript\n\n#### 稳定的前端阅读源\n- <a href=\"https://javascriptweekly.com/issues\">javascript weekly</a>\n- <a href=\"https://75team.com/\">齐舞周刊</a>\n- <a href=\"https://github.com/Tnfe/TNFE-Weekly\">腾讯TNFE团队-weekly</a>\n\n#### 优质的开发者社区/阅读源\n- <a href=\"http://www.jstips.co/\">jstips</a>\n\n#### 前端大佬\n- <a href=\"https://me.getify.com/\">getify - Kyle Simpson </a> - you dont know js作者\n- <a href=\"https://www.h5jun.com/\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长\n- <a href=\"http://dr-axel.de/\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者\n- <a href=\"https://www.zhangxinxu.com/\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者\n- <a href=\"https://overreacted.io/\">Dan Abramov</a> - React 核心开发成员，Redux 作者\n- <a href=\"http://evanyou.me\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。\n- <a href=\"https://github.com/wintercn\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V\n- <a href=\"https://github.com/lifesinger\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端\n- <a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。\n- <a href=\"http://github.com/RubyLouvre\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。\n- <a href=\"https://github.com/JacksonTian\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。\n- <a href=\"https://github.com/michaelliao\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。\n\n#### 高质量的前端公号\n- 前端桃园\n\n#### 前端工具资源\n- <a href=\"https://devhints.io/\">fed cheatsheet</a> - all in one，前端snippets速查\n- <a href=\"https://github.com/30-seconds/30-seconds-of-code\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段\n\n#### rss\n\n<!-- #### FE Conf -->\n\n```js\n    //不定期更新\n    //排名不分先后\n    //推荐请联系邮箱 scarsu001@gmail.com\n```","date":"2020-04-08T00:43:01.231Z","updated":"2020-04-08T00:43:01.231Z","path":"fe_nav/index.html","_id":"ck94a9aoy000h07s60py1lgdy","comments":1,"layout":"page","content":"<h4 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h4><ul>\n<li><a href=\"http://www.taoweng.site\" target=\"_blank\" rel=\"noopener\">前端桃园</a></li>\n<li><a href=\"https://leihuang.dev/\" target=\"_blank\" rel=\"noopener\">Lei Huang</a></li>\n<li><a href=\"http://blog.eccto.cn/index\" target=\"_blank\" rel=\"noopener\">EricChen</a></li>\n<li><a href=\"https://www.liaoyunduo.top/\" target=\"_blank\" rel=\"noopener\">小心</a></li>\n</ul>\n<h4 id=\"优秀的前端团队\"><a href=\"#优秀的前端团队\" class=\"headerlink\" title=\"优秀的前端团队\"></a>优秀的前端团队</h4><ul>\n<li><a href=\"https://75team.com/\" target=\"_blank\" rel=\"noopener\">齐舞团</a></li>\n<li><a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度FEX</a></li>\n</ul>\n<h4 id=\"前端必读书籍\"><a href=\"#前端必读书籍\" class=\"headerlink\" title=\"前端必读书籍\"></a>前端必读书籍</h4><ul>\n<li>Javascript高级程序设计</li>\n<li>Javascript权威指南</li>\n<li>你不知道的Javascript</li>\n</ul>\n<h4 id=\"稳定的前端阅读源\"><a href=\"#稳定的前端阅读源\" class=\"headerlink\" title=\"稳定的前端阅读源\"></a>稳定的前端阅读源</h4><ul>\n<li><a href=\"https://javascriptweekly.com/issues\" target=\"_blank\" rel=\"noopener\">javascript weekly</a></li>\n<li><a href=\"https://75team.com/\" target=\"_blank\" rel=\"noopener\">齐舞周刊</a></li>\n<li><a href=\"https://github.com/Tnfe/TNFE-Weekly\" target=\"_blank\" rel=\"noopener\">腾讯TNFE团队-weekly</a></li>\n</ul>\n<h4 id=\"优质的开发者社区-阅读源\"><a href=\"#优质的开发者社区-阅读源\" class=\"headerlink\" title=\"优质的开发者社区/阅读源\"></a>优质的开发者社区/阅读源</h4><ul>\n<li><a href=\"http://www.jstips.co/\" target=\"_blank\" rel=\"noopener\">jstips</a></li>\n</ul>\n<h4 id=\"前端大佬\"><a href=\"#前端大佬\" class=\"headerlink\" title=\"前端大佬\"></a>前端大佬</h4><ul>\n<li><a href=\"https://me.getify.com/\" target=\"_blank\" rel=\"noopener\">getify - Kyle Simpson </a> - you dont know js作者</li>\n<li><a href=\"https://www.h5jun.com/\" target=\"_blank\" rel=\"noopener\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长</li>\n<li><a href=\"http://dr-axel.de/\" target=\"_blank\" rel=\"noopener\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者</li>\n<li><a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者</li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a> - React 核心开发成员，Redux 作者</li>\n<li><a href=\"http://evanyou.me\" target=\"_blank\" rel=\"noopener\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。</li>\n<li><a href=\"https://github.com/wintercn\" target=\"_blank\" rel=\"noopener\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V</li>\n<li><a href=\"https://github.com/lifesinger\" target=\"_blank\" rel=\"noopener\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。</li>\n<li><a href=\"http://github.com/RubyLouvre\" target=\"_blank\" rel=\"noopener\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。</li>\n<li><a href=\"https://github.com/JacksonTian\" target=\"_blank\" rel=\"noopener\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。</li>\n<li><a href=\"https://github.com/michaelliao\" target=\"_blank\" rel=\"noopener\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。</li>\n</ul>\n<h4 id=\"高质量的前端公号\"><a href=\"#高质量的前端公号\" class=\"headerlink\" title=\"高质量的前端公号\"></a>高质量的前端公号</h4><ul>\n<li>前端桃园</li>\n</ul>\n<h4 id=\"前端工具资源\"><a href=\"#前端工具资源\" class=\"headerlink\" title=\"前端工具资源\"></a>前端工具资源</h4><ul>\n<li><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">fed cheatsheet</a> - all in one，前端snippets速查</li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\" target=\"_blank\" rel=\"noopener\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段</li>\n</ul>\n<h4 id=\"rss\"><a href=\"#rss\" class=\"headerlink\" title=\"rss\"></a>rss</h4><!-- #### FE Conf -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不定期更新</span></span><br><span class=\"line\"><span class=\"comment\">//排名不分先后</span></span><br><span class=\"line\"><span class=\"comment\">//推荐请联系邮箱 scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h4><ul>\n<li><a href=\"http://www.taoweng.site\" target=\"_blank\" rel=\"noopener\">前端桃园</a></li>\n<li><a href=\"https://leihuang.dev/\" target=\"_blank\" rel=\"noopener\">Lei Huang</a></li>\n<li><a href=\"http://blog.eccto.cn/index\" target=\"_blank\" rel=\"noopener\">EricChen</a></li>\n<li><a href=\"https://www.liaoyunduo.top/\" target=\"_blank\" rel=\"noopener\">小心</a></li>\n</ul>\n<h4 id=\"优秀的前端团队\"><a href=\"#优秀的前端团队\" class=\"headerlink\" title=\"优秀的前端团队\"></a>优秀的前端团队</h4><ul>\n<li><a href=\"https://75team.com/\" target=\"_blank\" rel=\"noopener\">齐舞团</a></li>\n<li><a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度FEX</a></li>\n</ul>\n<h4 id=\"前端必读书籍\"><a href=\"#前端必读书籍\" class=\"headerlink\" title=\"前端必读书籍\"></a>前端必读书籍</h4><ul>\n<li>Javascript高级程序设计</li>\n<li>Javascript权威指南</li>\n<li>你不知道的Javascript</li>\n</ul>\n<h4 id=\"稳定的前端阅读源\"><a href=\"#稳定的前端阅读源\" class=\"headerlink\" title=\"稳定的前端阅读源\"></a>稳定的前端阅读源</h4><ul>\n<li><a href=\"https://javascriptweekly.com/issues\" target=\"_blank\" rel=\"noopener\">javascript weekly</a></li>\n<li><a href=\"https://75team.com/\" target=\"_blank\" rel=\"noopener\">齐舞周刊</a></li>\n<li><a href=\"https://github.com/Tnfe/TNFE-Weekly\" target=\"_blank\" rel=\"noopener\">腾讯TNFE团队-weekly</a></li>\n</ul>\n<h4 id=\"优质的开发者社区-阅读源\"><a href=\"#优质的开发者社区-阅读源\" class=\"headerlink\" title=\"优质的开发者社区/阅读源\"></a>优质的开发者社区/阅读源</h4><ul>\n<li><a href=\"http://www.jstips.co/\" target=\"_blank\" rel=\"noopener\">jstips</a></li>\n</ul>\n<h4 id=\"前端大佬\"><a href=\"#前端大佬\" class=\"headerlink\" title=\"前端大佬\"></a>前端大佬</h4><ul>\n<li><a href=\"https://me.getify.com/\" target=\"_blank\" rel=\"noopener\">getify - Kyle Simpson </a> - you dont know js作者</li>\n<li><a href=\"https://www.h5jun.com/\" target=\"_blank\" rel=\"noopener\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长</li>\n<li><a href=\"http://dr-axel.de/\" target=\"_blank\" rel=\"noopener\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者</li>\n<li><a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者</li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a> - React 核心开发成员，Redux 作者</li>\n<li><a href=\"http://evanyou.me\" target=\"_blank\" rel=\"noopener\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。</li>\n<li><a href=\"https://github.com/wintercn\" target=\"_blank\" rel=\"noopener\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V</li>\n<li><a href=\"https://github.com/lifesinger\" target=\"_blank\" rel=\"noopener\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。</li>\n<li><a href=\"http://github.com/RubyLouvre\" target=\"_blank\" rel=\"noopener\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。</li>\n<li><a href=\"https://github.com/JacksonTian\" target=\"_blank\" rel=\"noopener\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。</li>\n<li><a href=\"https://github.com/michaelliao\" target=\"_blank\" rel=\"noopener\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。</li>\n</ul>\n<h4 id=\"高质量的前端公号\"><a href=\"#高质量的前端公号\" class=\"headerlink\" title=\"高质量的前端公号\"></a>高质量的前端公号</h4><ul>\n<li>前端桃园</li>\n</ul>\n<h4 id=\"前端工具资源\"><a href=\"#前端工具资源\" class=\"headerlink\" title=\"前端工具资源\"></a>前端工具资源</h4><ul>\n<li><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">fed cheatsheet</a> - all in one，前端snippets速查</li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\" target=\"_blank\" rel=\"noopener\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段</li>\n</ul>\n<h4 id=\"rss\"><a href=\"#rss\" class=\"headerlink\" title=\"rss\"></a>rss</h4><!-- #### FE Conf -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不定期更新</span></span><br><span class=\"line\"><span class=\"comment\">//排名不分先后</span></span><br><span class=\"line\"><span class=\"comment\">//推荐请联系邮箱 scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure>"},{"title":"读书笔记","_content":"#### 读书笔记temp","source":"gitbook/index.md","raw":"---\ntitle: 读书笔记\n---\n#### 读书笔记temp","date":"2020-04-08T00:43:01.231Z","updated":"2020-04-08T00:43:01.231Z","path":"gitbook/index.html","_id":"ck94a9ap0000m07s6914hevwr","comments":1,"layout":"page","content":"<h4 id=\"读书笔记temp\"><a href=\"#读书笔记temp\" class=\"headerlink\" title=\"读书笔记temp\"></a>读书笔记temp</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"读书笔记temp\"><a href=\"#读书笔记temp\" class=\"headerlink\" title=\"读书笔记temp\"></a>读书笔记temp</h4>"},{"title":"自律打卡","_content":"#### 为什么要这样自律？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\">【肥宅的自我救赎之路】</a> \n\n#### 怎样自律的？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\">【自律计划】</a>\n\n#### 作息表？\n<img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"/>\n\n#### 在哪监控我每天自律了没有？\n<a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\">【打卡记录】（日更）</a>\n\n\n\n#### 打卡记录 / 每日心得\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\">【自律打卡】Day1</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\">【自律打卡】Day2</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\">【自律打卡】Day3</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day14</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\">【自律打卡】Day15</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\">【自律打卡】Day16</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\">【自律打卡】Day17</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day18</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day19</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day20</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\">【自律打卡】Day21</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\">【自律打卡】Day22</a>\n\n\n<small>计划：写一个脚本自动把文章链接加上来，自己转真累</small>","source":"self_regulation/index.md","raw":"---\ntitle: 自律打卡\n---\n#### 为什么要这样自律？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\">【肥宅的自我救赎之路】</a> \n\n#### 怎样自律的？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\">【自律计划】</a>\n\n#### 作息表？\n<img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"/>\n\n#### 在哪监控我每天自律了没有？\n<a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\">【打卡记录】（日更）</a>\n\n\n\n#### 打卡记录 / 每日心得\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\">【自律打卡】Day1</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\">【自律打卡】Day2</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\">【自律打卡】Day3</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day14</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\">【自律打卡】Day15</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\">【自律打卡】Day16</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\">【自律打卡】Day17</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day18</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day19</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day20</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\">【自律打卡】Day21</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\">【自律打卡】Day22</a>\n\n\n<small>计划：写一个脚本自动把文章链接加上来，自己转真累</small>","date":"2020-04-08T00:43:01.543Z","updated":"2020-04-08T00:43:01.543Z","path":"self_regulation/index.html","_id":"ck94a9ap1000p07s65dcpnh4l","comments":1,"layout":"page","content":"<h4 id=\"为什么要这样自律？\"><a href=\"#为什么要这样自律？\" class=\"headerlink\" title=\"为什么要这样自律？\"></a>为什么要这样自律？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【肥宅的自我救赎之路】</a> </p>\n<h4 id=\"怎样自律的？\"><a href=\"#怎样自律的？\" class=\"headerlink\" title=\"怎样自律的？\"></a>怎样自律的？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律计划】</a></p>\n<h4 id=\"作息表？\"><a href=\"#作息表？\" class=\"headerlink\" title=\"作息表？\"></a>作息表？</h4><p><img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"></p>\n<h4 id=\"在哪监控我每天自律了没有？\"><a href=\"#在哪监控我每天自律了没有？\" class=\"headerlink\" title=\"在哪监控我每天自律了没有？\"></a>在哪监控我每天自律了没有？</h4><p><a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\" target=\"_blank\" rel=\"noopener\">【打卡记录】（日更）</a></p>\n<h4 id=\"打卡记录-每日心得\"><a href=\"#打卡记录-每日心得\" class=\"headerlink\" title=\"打卡记录 / 每日心得\"></a>打卡记录 / 每日心得</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day1</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day2</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day3</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day14</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day15</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day16</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day17</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day18</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day19</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day20</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day21</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day22</a></p>\n<p><small>计划：写一个脚本自动把文章链接加上来，自己转真累</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"为什么要这样自律？\"><a href=\"#为什么要这样自律？\" class=\"headerlink\" title=\"为什么要这样自律？\"></a>为什么要这样自律？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【肥宅的自我救赎之路】</a> </p>\n<h4 id=\"怎样自律的？\"><a href=\"#怎样自律的？\" class=\"headerlink\" title=\"怎样自律的？\"></a>怎样自律的？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律计划】</a></p>\n<h4 id=\"作息表？\"><a href=\"#作息表？\" class=\"headerlink\" title=\"作息表？\"></a>作息表？</h4><p><img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"></p>\n<h4 id=\"在哪监控我每天自律了没有？\"><a href=\"#在哪监控我每天自律了没有？\" class=\"headerlink\" title=\"在哪监控我每天自律了没有？\"></a>在哪监控我每天自律了没有？</h4><p><a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\" target=\"_blank\" rel=\"noopener\">【打卡记录】（日更）</a></p>\n<h4 id=\"打卡记录-每日心得\"><a href=\"#打卡记录-每日心得\" class=\"headerlink\" title=\"打卡记录 / 每日心得\"></a>打卡记录 / 每日心得</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day1</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day2</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day3</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day14</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day15</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day16</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day17</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day18</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day19</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day20</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day21</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day22</a></p>\n<p><small>计划：写一个脚本自动把文章链接加上来，自己转真累</small></p>\n"}],"Post":[{"title":"2018年度javascript行业报告","date":"2018-12-30T16:00:00.000Z","description":"JavaScript生态圈总是在变化。新的库，新的框架，新的语言..这有时是有乐趣的，但有时也会让人感到压力。","toc":1,"top":0,"_content":"\n![](/images/stateofjs/000.png)\n\n# 数据来源\n\n来自 153 个不同的国家\n\n共 20,268 名 JavaScript 开发者参与调查\n\n中国占总数的 0.37%，共 75 个开发者\n\n(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/1.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/2.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/3.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/4.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/5.png)\n\n# 调查结果\n\n## 1.JavaScript Flavors\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/6.png)\n\n## 2.前端框架 Front-end Frameworks\n\n![](/images/stateofjs/7.png)\n\n## 3.数据层 Data Layer\n\n![](/images/stateofjs/8.png)\n\n## 4.后端框架 Back-end Frameworks\n\n![](/images/stateofjs/9.png)\n\n## 5.测试 Testing\n\n![](/images/stateofjs/10.png)\n\n## 6.移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/11.png)\n\n## 7.js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/12.png)\n\n## 8.浏览器 API Browser APIs\n\n![](/images/stateofjs/13.png)\n\n## 9.构建工具 Build Tools\n\n![](/images/stateofjs/14.png)\n\n## 10.函数库 Utility Libraries\n\n![](/images/stateofjs/15.png)\n\n## 11.编辑器 Text Editors\n\n![](/images/stateofjs/16.png)\n\n## 12.js 开发者的使用感受+期望\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/17.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/18.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/19.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/20.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/21.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/22.png)\n\n**“这项调查太长惹！”**\n\n![](/images/stateofjs/23.png)\n\n# 年度之最\n\n-   **最满意: Jest**\n\n> 96.5%的使用者表示会再次使用\n\n-   **最感兴趣: GraphQL**\n\n> 听说过 GraphQL 的开发者中有 87.7%表示想要学习\n\n-   **最多提及: Vuex**\n\n> 在“other libraries”提问中最多被提及的库\n\n-   **最多使用: React**\n\n> 年度被使用最多的库，参与调查者中有 14417 位使用 React\n\n-   **最黑马: Reason**\n\n> Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?\n\n-   **最特别: VSCode**\n\n> 我们今年刚刚爱上并无法自拔的工具\n\n# 参赛选手信息\n\n### Javascript Flavors\n\n-   ES6\n\n> ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范\n>\n> https://github.com/tc39/ecma262#ecmascript\n\n-   Typescript\n\n> 由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集\n>\n> https://github.com/Microsoft/TypeScript\n\n-   Flow\n\n> JavaScript 添加静态类型检查器\n>\n> https://github.com/facebook/flow\n\n-   Reason\n\n> 简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库\n>\n> http://reasonml.github.io/\n\n-   Elm\n\n> 生成具有出色性能且没有运行时异常的 JavaScript 的语言。\n>\n> https://elm-lang.org/\n\n-   ClojureScript\n\n> ClojureScript 是将 Clojure 成 JavaScript 的编译器。\n>\n> https://clojurescript.org/\n\n### 前端框架\n\n-   React\n\n> React 是一个用于设计用户界面的开源 JavaScript 库。\n>\n> https://github.com/facebook/react\n\n-   Vue.js\n\n> 一套用于构建用户界面的渐进式框架\n>\n> https://cn.vuejs.org/\n\n-   Angular\n\n> 基于 TypeScript 的开源前端 Web 应用程序平台。\n>\n> https://angular.io/\n\n-   Preact\n\n> 3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。\n>\n> https://github.com/developit/preact\n\n-   Ember\n\n> 用于创建大型的 Web 应用程序的 JavaScript 框架\n>\n> https://github.com/emberjs/ember.js\n\n-   Polymer\n\n> Web 组件库\n>\n> https://github.com/Polymer/polymer\n\n### 数据层\n\n-   Redux\n\n> JavaScript 应用程序的可预测状态容器\n>\n> https://github.com/reduxjs/redux\n\n-   GraphQL\n\n> 一种与后端服务相关联的查询语言和执行引擎\n>\n> https://github.com/facebook/graphql\n\n-   Apollo\n\n> 适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端\n>\n> https://github.com/apollographql/apollo-client\n\n-   MobX\n\n> 简单，可扩展的状态管理\n>\n> https://github.com/mobxjs/mobx\n\n-   Relay/Relay Modern\n\n> Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架\n>\n> https://github.com/facebook/relay\n\n### 后端框架\n\n-   Express\n\n> 快速简单的 Node 框架\n>\n> https://github.com/expressjs/express\n\n-   Next.js\n\n> 一个多功能 React 服务端框架\n>\n> https://nextjs.org\n\n-   Koa\n\n> 使用 ES2017 异步函数的 node.js 的中间件\n>\n> https://github.com/koajs/koa\n\n-   Meteor\n\n> JavaScript 应用程序平台\n>\n> https://github.com/meteor/meteor\n\n-   Sails\n\n> Node.js 的实时 MVC 框架\n>\n> https://github.com/balderdashy/sails\n\n-   FeathersJS\n\n> 适用于现代应用程序的 REST 和实时 API 层\n> https://github.com/feathersjs/feathers\n\n### Javascript 测试工具\n\n-   Jest\n\n> 令人愉快的 JavaScript 测试工具\n>\n> https://jestjs.io/\n\n-   Mocha\n\n> node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架\n>\n> https://github.com/mochajs/mocha\n\n-   Jasmine\n\n> 适用于浏览器和 node.js 的简单 JavaScript 测试框架\n>\n> https://github.com/jasmine/jasmine\n\n-   Enzyme\n\n> 用于 React 的 JavaScript 测试实用程序\n>\n> https://github.com/airbnb/enzyme\n\n-   Karma\n\n> 健壮的 Javascript 测试工具\n>\n> https://github.com/karma-runner/karma\n\n-   Storybook\n\n> 用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具\n>\n> https://github.com/storybooks/storybook\n\n-   Ava\n\n> 未来的 JavaScript 测试工具\n>\n> https://github.com/avajs/ava\n\n### 移动端/客户端\n\n-   Electron\n\n> 使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序\n>\n> https://github.com/electron/electron\n\n-   React Native\n\n> 使用 React 构建应用程序的框架\n>\n> https://github.com/facebook/react-native\n\n-   Native Apps\n\n> 原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等\n\n-   Cordova\n\n> 移动应用程序开发框架\n>\n> https://cordova.apache.org/\n\n-   Ionic\n\n> 使用开放式 Web 技术构建的原生和渐进式 Web 应用\n>\n> https://github.com/ionic-team/ionic\n\n-   NativeScript\n\n> 用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能\n>\n> https://github.com/NativeScript/NativeScript\n","source":"_posts/2018_javascript_report.md","raw":"---\ntitle: 2018年度javascript行业报告\ncategories:\n    - 03 JavaScript # 一级分类\ntags:\n    - stateOfJs\ndate: 2018-12-31\ndescription: JavaScript生态圈总是在变化。新的库，新的框架，新的语言..这有时是有乐趣的，但有时也会让人感到压力。\ntoc: 1\ntop: 0\n---\n\n![](/images/stateofjs/000.png)\n\n# 数据来源\n\n来自 153 个不同的国家\n\n共 20,268 名 JavaScript 开发者参与调查\n\n中国占总数的 0.37%，共 75 个开发者\n\n(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/1.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/2.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/3.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/4.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/5.png)\n\n# 调查结果\n\n## 1.JavaScript Flavors\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/6.png)\n\n## 2.前端框架 Front-end Frameworks\n\n![](/images/stateofjs/7.png)\n\n## 3.数据层 Data Layer\n\n![](/images/stateofjs/8.png)\n\n## 4.后端框架 Back-end Frameworks\n\n![](/images/stateofjs/9.png)\n\n## 5.测试 Testing\n\n![](/images/stateofjs/10.png)\n\n## 6.移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/11.png)\n\n## 7.js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/12.png)\n\n## 8.浏览器 API Browser APIs\n\n![](/images/stateofjs/13.png)\n\n## 9.构建工具 Build Tools\n\n![](/images/stateofjs/14.png)\n\n## 10.函数库 Utility Libraries\n\n![](/images/stateofjs/15.png)\n\n## 11.编辑器 Text Editors\n\n![](/images/stateofjs/16.png)\n\n## 12.js 开发者的使用感受+期望\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/17.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/18.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/19.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/20.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/21.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/22.png)\n\n**“这项调查太长惹！”**\n\n![](/images/stateofjs/23.png)\n\n# 年度之最\n\n-   **最满意: Jest**\n\n> 96.5%的使用者表示会再次使用\n\n-   **最感兴趣: GraphQL**\n\n> 听说过 GraphQL 的开发者中有 87.7%表示想要学习\n\n-   **最多提及: Vuex**\n\n> 在“other libraries”提问中最多被提及的库\n\n-   **最多使用: React**\n\n> 年度被使用最多的库，参与调查者中有 14417 位使用 React\n\n-   **最黑马: Reason**\n\n> Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?\n\n-   **最特别: VSCode**\n\n> 我们今年刚刚爱上并无法自拔的工具\n\n# 参赛选手信息\n\n### Javascript Flavors\n\n-   ES6\n\n> ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范\n>\n> https://github.com/tc39/ecma262#ecmascript\n\n-   Typescript\n\n> 由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集\n>\n> https://github.com/Microsoft/TypeScript\n\n-   Flow\n\n> JavaScript 添加静态类型检查器\n>\n> https://github.com/facebook/flow\n\n-   Reason\n\n> 简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库\n>\n> http://reasonml.github.io/\n\n-   Elm\n\n> 生成具有出色性能且没有运行时异常的 JavaScript 的语言。\n>\n> https://elm-lang.org/\n\n-   ClojureScript\n\n> ClojureScript 是将 Clojure 成 JavaScript 的编译器。\n>\n> https://clojurescript.org/\n\n### 前端框架\n\n-   React\n\n> React 是一个用于设计用户界面的开源 JavaScript 库。\n>\n> https://github.com/facebook/react\n\n-   Vue.js\n\n> 一套用于构建用户界面的渐进式框架\n>\n> https://cn.vuejs.org/\n\n-   Angular\n\n> 基于 TypeScript 的开源前端 Web 应用程序平台。\n>\n> https://angular.io/\n\n-   Preact\n\n> 3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。\n>\n> https://github.com/developit/preact\n\n-   Ember\n\n> 用于创建大型的 Web 应用程序的 JavaScript 框架\n>\n> https://github.com/emberjs/ember.js\n\n-   Polymer\n\n> Web 组件库\n>\n> https://github.com/Polymer/polymer\n\n### 数据层\n\n-   Redux\n\n> JavaScript 应用程序的可预测状态容器\n>\n> https://github.com/reduxjs/redux\n\n-   GraphQL\n\n> 一种与后端服务相关联的查询语言和执行引擎\n>\n> https://github.com/facebook/graphql\n\n-   Apollo\n\n> 适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端\n>\n> https://github.com/apollographql/apollo-client\n\n-   MobX\n\n> 简单，可扩展的状态管理\n>\n> https://github.com/mobxjs/mobx\n\n-   Relay/Relay Modern\n\n> Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架\n>\n> https://github.com/facebook/relay\n\n### 后端框架\n\n-   Express\n\n> 快速简单的 Node 框架\n>\n> https://github.com/expressjs/express\n\n-   Next.js\n\n> 一个多功能 React 服务端框架\n>\n> https://nextjs.org\n\n-   Koa\n\n> 使用 ES2017 异步函数的 node.js 的中间件\n>\n> https://github.com/koajs/koa\n\n-   Meteor\n\n> JavaScript 应用程序平台\n>\n> https://github.com/meteor/meteor\n\n-   Sails\n\n> Node.js 的实时 MVC 框架\n>\n> https://github.com/balderdashy/sails\n\n-   FeathersJS\n\n> 适用于现代应用程序的 REST 和实时 API 层\n> https://github.com/feathersjs/feathers\n\n### Javascript 测试工具\n\n-   Jest\n\n> 令人愉快的 JavaScript 测试工具\n>\n> https://jestjs.io/\n\n-   Mocha\n\n> node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架\n>\n> https://github.com/mochajs/mocha\n\n-   Jasmine\n\n> 适用于浏览器和 node.js 的简单 JavaScript 测试框架\n>\n> https://github.com/jasmine/jasmine\n\n-   Enzyme\n\n> 用于 React 的 JavaScript 测试实用程序\n>\n> https://github.com/airbnb/enzyme\n\n-   Karma\n\n> 健壮的 Javascript 测试工具\n>\n> https://github.com/karma-runner/karma\n\n-   Storybook\n\n> 用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具\n>\n> https://github.com/storybooks/storybook\n\n-   Ava\n\n> 未来的 JavaScript 测试工具\n>\n> https://github.com/avajs/ava\n\n### 移动端/客户端\n\n-   Electron\n\n> 使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序\n>\n> https://github.com/electron/electron\n\n-   React Native\n\n> 使用 React 构建应用程序的框架\n>\n> https://github.com/facebook/react-native\n\n-   Native Apps\n\n> 原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等\n\n-   Cordova\n\n> 移动应用程序开发框架\n>\n> https://cordova.apache.org/\n\n-   Ionic\n\n> 使用开放式 Web 技术构建的原生和渐进式 Web 应用\n>\n> https://github.com/ionic-team/ionic\n\n-   NativeScript\n\n> 用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能\n>\n> https://github.com/NativeScript/NativeScript\n","slug":"2018_javascript_report","published":1,"updated":"2020-04-08T00:43:01.109Z","_id":"ck94a9aok000107s6rd8dftbu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/stateofjs/000.png\" alt></p>\n<h1 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h1><p>来自 153 个不同的国家</p>\n<p>共 20,268 名 JavaScript 开发者参与调查</p>\n<p>中国占总数的 0.37%，共 75 个开发者</p>\n<p>(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)</p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/1.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/2.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/3.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/4.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/5.png\" alt></p>\n<h1 id=\"调查结果\"><a href=\"#调查结果\" class=\"headerlink\" title=\"调查结果\"></a>调查结果</h1><h2 id=\"1-JavaScript-Flavors\"><a href=\"#1-JavaScript-Flavors\" class=\"headerlink\" title=\"1.JavaScript Flavors\"></a>1.JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/6.png\" alt></p>\n<h2 id=\"2-前端框架-Front-end-Frameworks\"><a href=\"#2-前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"2.前端框架 Front-end Frameworks\"></a>2.前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/7.png\" alt></p>\n<h2 id=\"3-数据层-Data-Layer\"><a href=\"#3-数据层-Data-Layer\" class=\"headerlink\" title=\"3.数据层 Data Layer\"></a>3.数据层 Data Layer</h2><p><img src=\"/images/stateofjs/8.png\" alt></p>\n<h2 id=\"4-后端框架-Back-end-Frameworks\"><a href=\"#4-后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"4.后端框架 Back-end Frameworks\"></a>4.后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/9.png\" alt></p>\n<h2 id=\"5-测试-Testing\"><a href=\"#5-测试-Testing\" class=\"headerlink\" title=\"5.测试 Testing\"></a>5.测试 Testing</h2><p><img src=\"/images/stateofjs/10.png\" alt></p>\n<h2 id=\"6-移动端-客户端-Mobile-amp-Desktop\"><a href=\"#6-移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"6.移动端/客户端 Mobile &amp; Desktop\"></a>6.移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/11.png\" alt></p>\n<h2 id=\"7-js-开发者使用的其他语言-Other-Languages\"><a href=\"#7-js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"7.js 开发者使用的其他语言 Other Languages\"></a>7.js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/12.png\" alt></p>\n<h2 id=\"8-浏览器-API-Browser-APIs\"><a href=\"#8-浏览器-API-Browser-APIs\" class=\"headerlink\" title=\"8.浏览器 API Browser APIs\"></a>8.浏览器 API Browser APIs</h2><p><img src=\"/images/stateofjs/13.png\" alt></p>\n<h2 id=\"9-构建工具-Build-Tools\"><a href=\"#9-构建工具-Build-Tools\" class=\"headerlink\" title=\"9.构建工具 Build Tools\"></a>9.构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/14.png\" alt></p>\n<h2 id=\"10-函数库-Utility-Libraries\"><a href=\"#10-函数库-Utility-Libraries\" class=\"headerlink\" title=\"10.函数库 Utility Libraries\"></a>10.函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/15.png\" alt></p>\n<h2 id=\"11-编辑器-Text-Editors\"><a href=\"#11-编辑器-Text-Editors\" class=\"headerlink\" title=\"11.编辑器 Text Editors\"></a>11.编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/16.png\" alt></p>\n<h2 id=\"12-js-开发者的使用感受-期望\"><a href=\"#12-js-开发者的使用感受-期望\" class=\"headerlink\" title=\"12.js 开发者的使用感受+期望\"></a>12.js 开发者的使用感受+期望</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/17.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/18.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/19.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/20.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/21.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/22.png\" alt></p>\n<p><strong>“这项调查太长惹！”</strong></p>\n<p><img src=\"/images/stateofjs/23.png\" alt></p>\n<h1 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h1><ul>\n<li><strong>最满意: Jest</strong></li>\n</ul>\n<blockquote>\n<p>96.5%的使用者表示会再次使用</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过 GraphQL 的开发者中有 87.7%表示想要学习</p>\n</blockquote>\n<ul>\n<li><strong>最多提及: Vuex</strong></li>\n</ul>\n<blockquote>\n<p>在“other libraries”提问中最多被提及的库</p>\n</blockquote>\n<ul>\n<li><strong>最多使用: React</strong></li>\n</ul>\n<blockquote>\n<p>年度被使用最多的库，参与调查者中有 14417 位使用 React</p>\n</blockquote>\n<ul>\n<li><strong>最黑马: Reason</strong></li>\n</ul>\n<blockquote>\n<p>Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?</p>\n</blockquote>\n<ul>\n<li><strong>最特别: VSCode</strong></li>\n</ul>\n<blockquote>\n<p>我们今年刚刚爱上并无法自拔的工具</p>\n</blockquote>\n<h1 id=\"参赛选手信息\"><a href=\"#参赛选手信息\" class=\"headerlink\" title=\"参赛选手信息\"></a>参赛选手信息</h1><h3 id=\"Javascript-Flavors\"><a href=\"#Javascript-Flavors\" class=\"headerlink\" title=\"Javascript Flavors\"></a>Javascript Flavors</h3><ul>\n<li>ES6</li>\n</ul>\n<blockquote>\n<p>ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范</p>\n<p><a href=\"https://github.com/tc39/ecma262#ecmascript\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/ecma262#ecmascript</a></p>\n</blockquote>\n<ul>\n<li>Typescript</li>\n</ul>\n<blockquote>\n<p>由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript</a></p>\n</blockquote>\n<ul>\n<li>Flow</li>\n</ul>\n<blockquote>\n<p>JavaScript 添加静态类型检查器</p>\n<p><a href=\"https://github.com/facebook/flow\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/flow</a></p>\n</blockquote>\n<ul>\n<li>Reason</li>\n</ul>\n<blockquote>\n<p>简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库</p>\n<p><a href=\"http://reasonml.github.io/\" target=\"_blank\" rel=\"noopener\">http://reasonml.github.io/</a></p>\n</blockquote>\n<ul>\n<li>Elm</li>\n</ul>\n<blockquote>\n<p>生成具有出色性能且没有运行时异常的 JavaScript 的语言。</p>\n<p><a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"noopener\">https://elm-lang.org/</a></p>\n</blockquote>\n<ul>\n<li>ClojureScript</li>\n</ul>\n<blockquote>\n<p>ClojureScript 是将 Clojure 成 JavaScript 的编译器。</p>\n<p><a href=\"https://clojurescript.org/\" target=\"_blank\" rel=\"noopener\">https://clojurescript.org/</a></p>\n</blockquote>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><ul>\n<li>React</li>\n</ul>\n<blockquote>\n<p>React 是一个用于设计用户界面的开源 JavaScript 库。</p>\n<p><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></p>\n</blockquote>\n<ul>\n<li>Vue.js</li>\n</ul>\n<blockquote>\n<p>一套用于构建用户界面的渐进式框架</p>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a></p>\n</blockquote>\n<ul>\n<li>Angular</li>\n</ul>\n<blockquote>\n<p>基于 TypeScript 的开源前端 Web 应用程序平台。</p>\n<p><a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">https://angular.io/</a></p>\n</blockquote>\n<ul>\n<li>Preact</li>\n</ul>\n<blockquote>\n<p>3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。</p>\n<p><a href=\"https://github.com/developit/preact\" target=\"_blank\" rel=\"noopener\">https://github.com/developit/preact</a></p>\n</blockquote>\n<ul>\n<li>Ember</li>\n</ul>\n<blockquote>\n<p>用于创建大型的 Web 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/emberjs/ember.js\" target=\"_blank\" rel=\"noopener\">https://github.com/emberjs/ember.js</a></p>\n</blockquote>\n<ul>\n<li>Polymer</li>\n</ul>\n<blockquote>\n<p>Web 组件库</p>\n<p><a href=\"https://github.com/Polymer/polymer\" target=\"_blank\" rel=\"noopener\">https://github.com/Polymer/polymer</a></p>\n</blockquote>\n<h3 id=\"数据层\"><a href=\"#数据层\" class=\"headerlink\" title=\"数据层\"></a>数据层</h3><ul>\n<li>Redux</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序的可预测状态容器</p>\n<p><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux</a></p>\n</blockquote>\n<ul>\n<li>GraphQL</li>\n</ul>\n<blockquote>\n<p>一种与后端服务相关联的查询语言和执行引擎</p>\n<p><a href=\"https://github.com/facebook/graphql\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/graphql</a></p>\n</blockquote>\n<ul>\n<li>Apollo</li>\n</ul>\n<blockquote>\n<p>适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端</p>\n<p><a href=\"https://github.com/apollographql/apollo-client\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/apollo-client</a></p>\n</blockquote>\n<ul>\n<li>MobX</li>\n</ul>\n<blockquote>\n<p>简单，可扩展的状态管理</p>\n<p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"noopener\">https://github.com/mobxjs/mobx</a></p>\n</blockquote>\n<ul>\n<li>Relay/Relay Modern</li>\n</ul>\n<blockquote>\n<p>Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/facebook/relay\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/relay</a></p>\n</blockquote>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li>Express</li>\n</ul>\n<blockquote>\n<p>快速简单的 Node 框架</p>\n<p><a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<ul>\n<li>Next.js</li>\n</ul>\n<blockquote>\n<p>一个多功能 React 服务端框架</p>\n<p><a href=\"https://nextjs.org\" target=\"_blank\" rel=\"noopener\">https://nextjs.org</a></p>\n</blockquote>\n<ul>\n<li>Koa</li>\n</ul>\n<blockquote>\n<p>使用 ES2017 异步函数的 node.js 的中间件</p>\n<p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">https://github.com/koajs/koa</a></p>\n</blockquote>\n<ul>\n<li>Meteor</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序平台</p>\n<p><a href=\"https://github.com/meteor/meteor\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/meteor</a></p>\n</blockquote>\n<ul>\n<li>Sails</li>\n</ul>\n<blockquote>\n<p>Node.js 的实时 MVC 框架</p>\n<p><a href=\"https://github.com/balderdashy/sails\" target=\"_blank\" rel=\"noopener\">https://github.com/balderdashy/sails</a></p>\n</blockquote>\n<ul>\n<li>FeathersJS</li>\n</ul>\n<blockquote>\n<p>适用于现代应用程序的 REST 和实时 API 层<br><a href=\"https://github.com/feathersjs/feathers\" target=\"_blank\" rel=\"noopener\">https://github.com/feathersjs/feathers</a></p>\n</blockquote>\n<h3 id=\"Javascript-测试工具\"><a href=\"#Javascript-测试工具\" class=\"headerlink\" title=\"Javascript 测试工具\"></a>Javascript 测试工具</h3><ul>\n<li>Jest</li>\n</ul>\n<blockquote>\n<p>令人愉快的 JavaScript 测试工具</p>\n<p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></p>\n</blockquote>\n<ul>\n<li>Mocha</li>\n</ul>\n<blockquote>\n<p>node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架</p>\n<p><a href=\"https://github.com/mochajs/mocha\" target=\"_blank\" rel=\"noopener\">https://github.com/mochajs/mocha</a></p>\n</blockquote>\n<ul>\n<li>Jasmine</li>\n</ul>\n<blockquote>\n<p>适用于浏览器和 node.js 的简单 JavaScript 测试框架</p>\n<p><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"noopener\">https://github.com/jasmine/jasmine</a></p>\n</blockquote>\n<ul>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>用于 React 的 JavaScript 测试实用程序</p>\n<p><a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noopener\">https://github.com/airbnb/enzyme</a></p>\n</blockquote>\n<ul>\n<li>Karma</li>\n</ul>\n<blockquote>\n<p>健壮的 Javascript 测试工具</p>\n<p><a href=\"https://github.com/karma-runner/karma\" target=\"_blank\" rel=\"noopener\">https://github.com/karma-runner/karma</a></p>\n</blockquote>\n<ul>\n<li>Storybook</li>\n</ul>\n<blockquote>\n<p>用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具</p>\n<p><a href=\"https://github.com/storybooks/storybook\" target=\"_blank\" rel=\"noopener\">https://github.com/storybooks/storybook</a></p>\n</blockquote>\n<ul>\n<li>Ava</li>\n</ul>\n<blockquote>\n<p>未来的 JavaScript 测试工具</p>\n<p><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">https://github.com/avajs/ava</a></p>\n</blockquote>\n<h3 id=\"移动端-客户端\"><a href=\"#移动端-客户端\" class=\"headerlink\" title=\"移动端/客户端\"></a>移动端/客户端</h3><ul>\n<li>Electron</li>\n</ul>\n<blockquote>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序</p>\n<p><a href=\"https://github.com/electron/electron\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron</a></p>\n</blockquote>\n<ul>\n<li>React Native</li>\n</ul>\n<blockquote>\n<p>使用 React 构建应用程序的框架</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native</a></p>\n</blockquote>\n<ul>\n<li>Native Apps</li>\n</ul>\n<blockquote>\n<p>原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等</p>\n</blockquote>\n<ul>\n<li>Cordova</li>\n</ul>\n<blockquote>\n<p>移动应用程序开发框架</p>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<ul>\n<li>Ionic</li>\n</ul>\n<blockquote>\n<p>使用开放式 Web 技术构建的原生和渐进式 Web 应用</p>\n<p><a href=\"https://github.com/ionic-team/ionic\" target=\"_blank\" rel=\"noopener\">https://github.com/ionic-team/ionic</a></p>\n</blockquote>\n<ul>\n<li>NativeScript</li>\n</ul>\n<blockquote>\n<p>用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能</p>\n<p><a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/NativeScript/NativeScript</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/stateofjs/000.png\" alt></p>\n<h1 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h1><p>来自 153 个不同的国家</p>\n<p>共 20,268 名 JavaScript 开发者参与调查</p>\n<p>中国占总数的 0.37%，共 75 个开发者</p>\n<p>(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)</p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/1.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/2.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/3.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/4.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/5.png\" alt></p>\n<h1 id=\"调查结果\"><a href=\"#调查结果\" class=\"headerlink\" title=\"调查结果\"></a>调查结果</h1><h2 id=\"1-JavaScript-Flavors\"><a href=\"#1-JavaScript-Flavors\" class=\"headerlink\" title=\"1.JavaScript Flavors\"></a>1.JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/6.png\" alt></p>\n<h2 id=\"2-前端框架-Front-end-Frameworks\"><a href=\"#2-前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"2.前端框架 Front-end Frameworks\"></a>2.前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/7.png\" alt></p>\n<h2 id=\"3-数据层-Data-Layer\"><a href=\"#3-数据层-Data-Layer\" class=\"headerlink\" title=\"3.数据层 Data Layer\"></a>3.数据层 Data Layer</h2><p><img src=\"/images/stateofjs/8.png\" alt></p>\n<h2 id=\"4-后端框架-Back-end-Frameworks\"><a href=\"#4-后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"4.后端框架 Back-end Frameworks\"></a>4.后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/9.png\" alt></p>\n<h2 id=\"5-测试-Testing\"><a href=\"#5-测试-Testing\" class=\"headerlink\" title=\"5.测试 Testing\"></a>5.测试 Testing</h2><p><img src=\"/images/stateofjs/10.png\" alt></p>\n<h2 id=\"6-移动端-客户端-Mobile-amp-Desktop\"><a href=\"#6-移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"6.移动端/客户端 Mobile &amp; Desktop\"></a>6.移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/11.png\" alt></p>\n<h2 id=\"7-js-开发者使用的其他语言-Other-Languages\"><a href=\"#7-js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"7.js 开发者使用的其他语言 Other Languages\"></a>7.js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/12.png\" alt></p>\n<h2 id=\"8-浏览器-API-Browser-APIs\"><a href=\"#8-浏览器-API-Browser-APIs\" class=\"headerlink\" title=\"8.浏览器 API Browser APIs\"></a>8.浏览器 API Browser APIs</h2><p><img src=\"/images/stateofjs/13.png\" alt></p>\n<h2 id=\"9-构建工具-Build-Tools\"><a href=\"#9-构建工具-Build-Tools\" class=\"headerlink\" title=\"9.构建工具 Build Tools\"></a>9.构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/14.png\" alt></p>\n<h2 id=\"10-函数库-Utility-Libraries\"><a href=\"#10-函数库-Utility-Libraries\" class=\"headerlink\" title=\"10.函数库 Utility Libraries\"></a>10.函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/15.png\" alt></p>\n<h2 id=\"11-编辑器-Text-Editors\"><a href=\"#11-编辑器-Text-Editors\" class=\"headerlink\" title=\"11.编辑器 Text Editors\"></a>11.编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/16.png\" alt></p>\n<h2 id=\"12-js-开发者的使用感受-期望\"><a href=\"#12-js-开发者的使用感受-期望\" class=\"headerlink\" title=\"12.js 开发者的使用感受+期望\"></a>12.js 开发者的使用感受+期望</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/17.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/18.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/19.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/20.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/21.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/22.png\" alt></p>\n<p><strong>“这项调查太长惹！”</strong></p>\n<p><img src=\"/images/stateofjs/23.png\" alt></p>\n<h1 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h1><ul>\n<li><strong>最满意: Jest</strong></li>\n</ul>\n<blockquote>\n<p>96.5%的使用者表示会再次使用</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过 GraphQL 的开发者中有 87.7%表示想要学习</p>\n</blockquote>\n<ul>\n<li><strong>最多提及: Vuex</strong></li>\n</ul>\n<blockquote>\n<p>在“other libraries”提问中最多被提及的库</p>\n</blockquote>\n<ul>\n<li><strong>最多使用: React</strong></li>\n</ul>\n<blockquote>\n<p>年度被使用最多的库，参与调查者中有 14417 位使用 React</p>\n</blockquote>\n<ul>\n<li><strong>最黑马: Reason</strong></li>\n</ul>\n<blockquote>\n<p>Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?</p>\n</blockquote>\n<ul>\n<li><strong>最特别: VSCode</strong></li>\n</ul>\n<blockquote>\n<p>我们今年刚刚爱上并无法自拔的工具</p>\n</blockquote>\n<h1 id=\"参赛选手信息\"><a href=\"#参赛选手信息\" class=\"headerlink\" title=\"参赛选手信息\"></a>参赛选手信息</h1><h3 id=\"Javascript-Flavors\"><a href=\"#Javascript-Flavors\" class=\"headerlink\" title=\"Javascript Flavors\"></a>Javascript Flavors</h3><ul>\n<li>ES6</li>\n</ul>\n<blockquote>\n<p>ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范</p>\n<p><a href=\"https://github.com/tc39/ecma262#ecmascript\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/ecma262#ecmascript</a></p>\n</blockquote>\n<ul>\n<li>Typescript</li>\n</ul>\n<blockquote>\n<p>由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript</a></p>\n</blockquote>\n<ul>\n<li>Flow</li>\n</ul>\n<blockquote>\n<p>JavaScript 添加静态类型检查器</p>\n<p><a href=\"https://github.com/facebook/flow\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/flow</a></p>\n</blockquote>\n<ul>\n<li>Reason</li>\n</ul>\n<blockquote>\n<p>简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库</p>\n<p><a href=\"http://reasonml.github.io/\" target=\"_blank\" rel=\"noopener\">http://reasonml.github.io/</a></p>\n</blockquote>\n<ul>\n<li>Elm</li>\n</ul>\n<blockquote>\n<p>生成具有出色性能且没有运行时异常的 JavaScript 的语言。</p>\n<p><a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"noopener\">https://elm-lang.org/</a></p>\n</blockquote>\n<ul>\n<li>ClojureScript</li>\n</ul>\n<blockquote>\n<p>ClojureScript 是将 Clojure 成 JavaScript 的编译器。</p>\n<p><a href=\"https://clojurescript.org/\" target=\"_blank\" rel=\"noopener\">https://clojurescript.org/</a></p>\n</blockquote>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><ul>\n<li>React</li>\n</ul>\n<blockquote>\n<p>React 是一个用于设计用户界面的开源 JavaScript 库。</p>\n<p><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></p>\n</blockquote>\n<ul>\n<li>Vue.js</li>\n</ul>\n<blockquote>\n<p>一套用于构建用户界面的渐进式框架</p>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a></p>\n</blockquote>\n<ul>\n<li>Angular</li>\n</ul>\n<blockquote>\n<p>基于 TypeScript 的开源前端 Web 应用程序平台。</p>\n<p><a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">https://angular.io/</a></p>\n</blockquote>\n<ul>\n<li>Preact</li>\n</ul>\n<blockquote>\n<p>3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。</p>\n<p><a href=\"https://github.com/developit/preact\" target=\"_blank\" rel=\"noopener\">https://github.com/developit/preact</a></p>\n</blockquote>\n<ul>\n<li>Ember</li>\n</ul>\n<blockquote>\n<p>用于创建大型的 Web 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/emberjs/ember.js\" target=\"_blank\" rel=\"noopener\">https://github.com/emberjs/ember.js</a></p>\n</blockquote>\n<ul>\n<li>Polymer</li>\n</ul>\n<blockquote>\n<p>Web 组件库</p>\n<p><a href=\"https://github.com/Polymer/polymer\" target=\"_blank\" rel=\"noopener\">https://github.com/Polymer/polymer</a></p>\n</blockquote>\n<h3 id=\"数据层\"><a href=\"#数据层\" class=\"headerlink\" title=\"数据层\"></a>数据层</h3><ul>\n<li>Redux</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序的可预测状态容器</p>\n<p><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux</a></p>\n</blockquote>\n<ul>\n<li>GraphQL</li>\n</ul>\n<blockquote>\n<p>一种与后端服务相关联的查询语言和执行引擎</p>\n<p><a href=\"https://github.com/facebook/graphql\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/graphql</a></p>\n</blockquote>\n<ul>\n<li>Apollo</li>\n</ul>\n<blockquote>\n<p>适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端</p>\n<p><a href=\"https://github.com/apollographql/apollo-client\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/apollo-client</a></p>\n</blockquote>\n<ul>\n<li>MobX</li>\n</ul>\n<blockquote>\n<p>简单，可扩展的状态管理</p>\n<p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"noopener\">https://github.com/mobxjs/mobx</a></p>\n</blockquote>\n<ul>\n<li>Relay/Relay Modern</li>\n</ul>\n<blockquote>\n<p>Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/facebook/relay\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/relay</a></p>\n</blockquote>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li>Express</li>\n</ul>\n<blockquote>\n<p>快速简单的 Node 框架</p>\n<p><a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<ul>\n<li>Next.js</li>\n</ul>\n<blockquote>\n<p>一个多功能 React 服务端框架</p>\n<p><a href=\"https://nextjs.org\" target=\"_blank\" rel=\"noopener\">https://nextjs.org</a></p>\n</blockquote>\n<ul>\n<li>Koa</li>\n</ul>\n<blockquote>\n<p>使用 ES2017 异步函数的 node.js 的中间件</p>\n<p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">https://github.com/koajs/koa</a></p>\n</blockquote>\n<ul>\n<li>Meteor</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序平台</p>\n<p><a href=\"https://github.com/meteor/meteor\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/meteor</a></p>\n</blockquote>\n<ul>\n<li>Sails</li>\n</ul>\n<blockquote>\n<p>Node.js 的实时 MVC 框架</p>\n<p><a href=\"https://github.com/balderdashy/sails\" target=\"_blank\" rel=\"noopener\">https://github.com/balderdashy/sails</a></p>\n</blockquote>\n<ul>\n<li>FeathersJS</li>\n</ul>\n<blockquote>\n<p>适用于现代应用程序的 REST 和实时 API 层<br><a href=\"https://github.com/feathersjs/feathers\" target=\"_blank\" rel=\"noopener\">https://github.com/feathersjs/feathers</a></p>\n</blockquote>\n<h3 id=\"Javascript-测试工具\"><a href=\"#Javascript-测试工具\" class=\"headerlink\" title=\"Javascript 测试工具\"></a>Javascript 测试工具</h3><ul>\n<li>Jest</li>\n</ul>\n<blockquote>\n<p>令人愉快的 JavaScript 测试工具</p>\n<p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></p>\n</blockquote>\n<ul>\n<li>Mocha</li>\n</ul>\n<blockquote>\n<p>node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架</p>\n<p><a href=\"https://github.com/mochajs/mocha\" target=\"_blank\" rel=\"noopener\">https://github.com/mochajs/mocha</a></p>\n</blockquote>\n<ul>\n<li>Jasmine</li>\n</ul>\n<blockquote>\n<p>适用于浏览器和 node.js 的简单 JavaScript 测试框架</p>\n<p><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"noopener\">https://github.com/jasmine/jasmine</a></p>\n</blockquote>\n<ul>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>用于 React 的 JavaScript 测试实用程序</p>\n<p><a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noopener\">https://github.com/airbnb/enzyme</a></p>\n</blockquote>\n<ul>\n<li>Karma</li>\n</ul>\n<blockquote>\n<p>健壮的 Javascript 测试工具</p>\n<p><a href=\"https://github.com/karma-runner/karma\" target=\"_blank\" rel=\"noopener\">https://github.com/karma-runner/karma</a></p>\n</blockquote>\n<ul>\n<li>Storybook</li>\n</ul>\n<blockquote>\n<p>用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具</p>\n<p><a href=\"https://github.com/storybooks/storybook\" target=\"_blank\" rel=\"noopener\">https://github.com/storybooks/storybook</a></p>\n</blockquote>\n<ul>\n<li>Ava</li>\n</ul>\n<blockquote>\n<p>未来的 JavaScript 测试工具</p>\n<p><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">https://github.com/avajs/ava</a></p>\n</blockquote>\n<h3 id=\"移动端-客户端\"><a href=\"#移动端-客户端\" class=\"headerlink\" title=\"移动端/客户端\"></a>移动端/客户端</h3><ul>\n<li>Electron</li>\n</ul>\n<blockquote>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序</p>\n<p><a href=\"https://github.com/electron/electron\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron</a></p>\n</blockquote>\n<ul>\n<li>React Native</li>\n</ul>\n<blockquote>\n<p>使用 React 构建应用程序的框架</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native</a></p>\n</blockquote>\n<ul>\n<li>Native Apps</li>\n</ul>\n<blockquote>\n<p>原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等</p>\n</blockquote>\n<ul>\n<li>Cordova</li>\n</ul>\n<blockquote>\n<p>移动应用程序开发框架</p>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<ul>\n<li>Ionic</li>\n</ul>\n<blockquote>\n<p>使用开放式 Web 技术构建的原生和渐进式 Web 应用</p>\n<p><a href=\"https://github.com/ionic-team/ionic\" target=\"_blank\" rel=\"noopener\">https://github.com/ionic-team/ionic</a></p>\n</blockquote>\n<ul>\n<li>NativeScript</li>\n</ul>\n<blockquote>\n<p>用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能</p>\n<p><a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/NativeScript/NativeScript</a></p>\n</blockquote>\n"},{"title":"360FED课程——HTML","date":"2018-09-01T16:00:00.000Z","description":"这么穷为什么还花钱买HTML学？","toc":1,"top":0,"_content":"\n# 1. 前端做什么\n\n用 web 标准技术 html css js svg http 等\n\n做界面与交互\n\n功能+美观+无障碍+安全+兼容+性能+体验\n\n# 2. 知识图谱/技术栈\n\n## 2.1. 语言\n\n-   js\n-   html\n-   css\n-   php\n\n## 2.2. 行业标准\n\n-   DOM\n-   ES2018\n-   HTTP\n-   JSON\n-   XML\n\n## 2.3. 框架\n\n-   React.js\n-   Angular.js\n-   jQuery\n-   Vue.js\n-   lodash\n\n## 2.4. 兼容性\n\n-   IE 等浏览器\n-   CSS3 新特性\n-   HTML5 新特性\n-   ES2018\n-   移动端\n\n## 2.5. 编程思想\n\n-   函数式编程\n-   面向对象\n-   设计模式\n\n## 2.6. 调试\n\n-   浏览器\n-   Fiddler http\n\n## 2.7. 工程化\n\n-   npm\n-   webpack\n-   postcss\n\n## 2.8. 安全性\n\n-   XSS\n-   CSRF\n-   加密解密\n-   编解码\n\n## 2.9. 性能\n\n-   优化规则\n-   开发者工具\n-   浏览器原理\n\n## 2.10. 团队协作\n\n-   git/svn\n-   编码规范/eslint\n-   文档管理\n\n## 2.11. 交互设计\n\n# 3. 前端边界\n\nnode、electron、react native、webRTC、WebGL、WEBAssembly\n\n# 4. HTML\n\n## 4.1. doctype\n\n-   指定文档使用的标准和版本；\n-   浏览器根据 doctype 决定使用哪种渲染模式；\n-   没写会以怪异模式渲染（盒模型不同等待）\n-   渲染模式\n\n## 4.2. 语义化\n\n-   元素、属性、属性值都有特定含义，应该遵循语义来写 HTML\n-   可读性、可维护性、搜索引擎优化、无障碍性\n\n## 4.3. 标签\n\n### 4.3.1. flow 流式元素：\n\n-   heading 标题\n-   sectioning 章节\n-   phrasing 段落内容 p h\n-   Embedded 嵌入式内容 audio canvas\n-   interactive 可交互性内容 button a\n-   metadata 元数据元素 base link meta noscript script style title\n\n### 4.3.2. 看规范\n\n## 4.4. HTML 扩展\n\n### 4.4.1. meta 标签（增加元数据\n\n```HTML\n<!-- 编码 -->\n<meta charset=\"utf-8\">\n\n<!-- 指定http header -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'\">\n\n<!-- seo优化 -->\n<meta name=\"keywords\" content=\"关键词\">\n<meta name=\"description\" content=\"页面介绍\">\n\n<!-- 移动设备的viewport 初始缩放比例，视口宽度 -->\n<meta name=\"viewport\" content=\"initial-scale=1\">\n\n<!-- 关闭IOS电话号码识别 -->\n<meta name=\"format-detection\" content=\"telphone=no\">\n\n<!-- 360等双核浏览器 指定渲染内核 -->\n<meta name=\"renderer\" content=\"webkit\">\n\n<!-- 指定IE渲染模式 -->\n<meta name=\"X-UA-Compatibla\" content=\"IE=Edge\">\n```\n\n### 4.4.2. data-\\*属性（规范内-自定义的属性）\n\n```HTML\n  datasetAPI\n    <el data-id=\"\"/>\n    el.dataset.id\n```\n\n### 4.4.3. link\n\n-   rel 属性（relation 关系，外部资源与当前页面的关系）\n\n```html\n<!-- 引入css -->\n<link rel=\"stylesheet\" href=\"\" />\n\n<!--\n    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender\n-->\n<link rel=\"dns-prefetch\" href=\"\" /> <link rel=\"prefetch\" href=\"\" />\n<link rel=\"prerender\" href=\"\" />\n\n<!-- favicon：rel=icon -->\n<link rel=\"icon\" type=\"image/png\" href=\"\" />\n\n<!-- RSS：rel=alternate -->\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"\" />\n```\n\n### 4.4.4. JSON-LD\n\nLD：linkdata 链接的数据 (直接在页面嵌 json 数据)\n\n```js\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http://www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n//  应用例如分享页面时的数据\n//  搜索引擎能识别等等\n//  分享链接带有一些标题图片等信息\n</script>\n```\n\n## 4.5. Web 无障碍/Accessibility\n\n-   一些 Web 开发者规范：\n    -   WCAG2.0\n    -   ARIA\n-   提升无障碍性\n    -   img alt\n    -   noscript\n    -   input 和 label 对应\n    -   图片验证码与语音验证码\n    -   文字背景对比度\n    -   键盘可操作（tab modal focus）\n\n## 4.6. 工具\n\n-   [W3C Validator（检查 html 合法性）](http://validator.w3.org/)\n-   emmet（插件）\n-   markdown（适合写文档）\n\n## 4.7. 参考链接\n\n-   [HTML: The Living Standard](https://html.spec.whatwg.org/dev/)\n-   [Activating Browser Modes with Doctype](https://hsivonen.fi/doctype/)\n-   [Accessibility](https://www.w3.org/standards/webdesign/accessibility)\n-   Web Content Accessibility Guidelines 2.0\n-   [HTML5 Doctor: Semantics](http://html5doctor.com/element-index/)\n\n## 全局属性\n\n### class id style\n\n### title\n\n（兼容性最好的 tooltip😂）\n\n### tabindex\n\ntab 键控制次序\n\n### lang\n\n语言代码（利于语义化机器理解）（语言代码参考手册http://www.runoob.com/tags/html-language-codes.html）\n\n### dir\n\n文本方向（rtl ltr auto）\n\n### accesskey\n\n元素的键盘访问快捷键（例值为'h'则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + 'h'）\n\n## （HTML5 全局属性）\n\n### data-\\*属性\n\n属性名不要包含大写字母，在 data- 后必须至少有一个字符。\n该属性可以是任何字符串\n\n```\nel.getAttribute(\"data-xx\")\n```\n\n### hidden\n\n不需要属性值，隐藏元素，原理是 display:none\n\n### contenteditable\n\n元素是否可编辑\n\n### contextmenu\n\n（说是目前只有 firefox 支持，亲测没效果\n\n```\n<p contextmenu=\"mymenu\"></p>\n<menu id=\"mymenu\">\n    <command label=\"xxx\" onclick=\"fn()\"/>\n    <command label=\"xxx\" onclick=\"fn()\"/>\n</menu>\n```\n\n### draggable：(与 HTML5drag 结合用)\n\n```javascript\n\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n<p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\">这是一段可移动的段落。可把该段落拖入上下的矩形。</p>\n<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\nfunction allowDrop(ev){\n\tev.preventDefault();\n}\nfunction drag(ev){\n\tev.dataTransfer.setData(\"Text\",ev.target.id);\n}\nfunction drop(ev){\n\tvar data=ev.dataTransfer.getData(\"Text\");\n\tev.target.appendChild(document.getElementById(data));\n\tev.preventDefault();\n}\n\n```\n\n### dropzone 属性:\n\n规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持\n\n### sppelcheck：\n\n对元素的文本进行拼写检查\n\n### translate 属性：\n\n规定元素内容是否要翻译，=yes|no\n\n# 遗留\n\n表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值\nvideo 不能嵌套 img\np 不能嵌套 div\nfigure dfn cite 标签\n\n---\n\n    “因为你永远不知道你不知道的有多少”\n","source":"_posts/360fe_01_html.md","raw":"---\ntitle: 360FED课程——HTML\ncategories:\n    - 01 HTML # 一级分类\ntags:\n    - 360fed\ndate: 2018-09-02\ndescription: 这么穷为什么还花钱买HTML学？\ntoc: 1\ntop: 0\n---\n\n# 1. 前端做什么\n\n用 web 标准技术 html css js svg http 等\n\n做界面与交互\n\n功能+美观+无障碍+安全+兼容+性能+体验\n\n# 2. 知识图谱/技术栈\n\n## 2.1. 语言\n\n-   js\n-   html\n-   css\n-   php\n\n## 2.2. 行业标准\n\n-   DOM\n-   ES2018\n-   HTTP\n-   JSON\n-   XML\n\n## 2.3. 框架\n\n-   React.js\n-   Angular.js\n-   jQuery\n-   Vue.js\n-   lodash\n\n## 2.4. 兼容性\n\n-   IE 等浏览器\n-   CSS3 新特性\n-   HTML5 新特性\n-   ES2018\n-   移动端\n\n## 2.5. 编程思想\n\n-   函数式编程\n-   面向对象\n-   设计模式\n\n## 2.6. 调试\n\n-   浏览器\n-   Fiddler http\n\n## 2.7. 工程化\n\n-   npm\n-   webpack\n-   postcss\n\n## 2.8. 安全性\n\n-   XSS\n-   CSRF\n-   加密解密\n-   编解码\n\n## 2.9. 性能\n\n-   优化规则\n-   开发者工具\n-   浏览器原理\n\n## 2.10. 团队协作\n\n-   git/svn\n-   编码规范/eslint\n-   文档管理\n\n## 2.11. 交互设计\n\n# 3. 前端边界\n\nnode、electron、react native、webRTC、WebGL、WEBAssembly\n\n# 4. HTML\n\n## 4.1. doctype\n\n-   指定文档使用的标准和版本；\n-   浏览器根据 doctype 决定使用哪种渲染模式；\n-   没写会以怪异模式渲染（盒模型不同等待）\n-   渲染模式\n\n## 4.2. 语义化\n\n-   元素、属性、属性值都有特定含义，应该遵循语义来写 HTML\n-   可读性、可维护性、搜索引擎优化、无障碍性\n\n## 4.3. 标签\n\n### 4.3.1. flow 流式元素：\n\n-   heading 标题\n-   sectioning 章节\n-   phrasing 段落内容 p h\n-   Embedded 嵌入式内容 audio canvas\n-   interactive 可交互性内容 button a\n-   metadata 元数据元素 base link meta noscript script style title\n\n### 4.3.2. 看规范\n\n## 4.4. HTML 扩展\n\n### 4.4.1. meta 标签（增加元数据\n\n```HTML\n<!-- 编码 -->\n<meta charset=\"utf-8\">\n\n<!-- 指定http header -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'\">\n\n<!-- seo优化 -->\n<meta name=\"keywords\" content=\"关键词\">\n<meta name=\"description\" content=\"页面介绍\">\n\n<!-- 移动设备的viewport 初始缩放比例，视口宽度 -->\n<meta name=\"viewport\" content=\"initial-scale=1\">\n\n<!-- 关闭IOS电话号码识别 -->\n<meta name=\"format-detection\" content=\"telphone=no\">\n\n<!-- 360等双核浏览器 指定渲染内核 -->\n<meta name=\"renderer\" content=\"webkit\">\n\n<!-- 指定IE渲染模式 -->\n<meta name=\"X-UA-Compatibla\" content=\"IE=Edge\">\n```\n\n### 4.4.2. data-\\*属性（规范内-自定义的属性）\n\n```HTML\n  datasetAPI\n    <el data-id=\"\"/>\n    el.dataset.id\n```\n\n### 4.4.3. link\n\n-   rel 属性（relation 关系，外部资源与当前页面的关系）\n\n```html\n<!-- 引入css -->\n<link rel=\"stylesheet\" href=\"\" />\n\n<!--\n    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender\n-->\n<link rel=\"dns-prefetch\" href=\"\" /> <link rel=\"prefetch\" href=\"\" />\n<link rel=\"prerender\" href=\"\" />\n\n<!-- favicon：rel=icon -->\n<link rel=\"icon\" type=\"image/png\" href=\"\" />\n\n<!-- RSS：rel=alternate -->\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"\" />\n```\n\n### 4.4.4. JSON-LD\n\nLD：linkdata 链接的数据 (直接在页面嵌 json 数据)\n\n```js\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http://www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n//  应用例如分享页面时的数据\n//  搜索引擎能识别等等\n//  分享链接带有一些标题图片等信息\n</script>\n```\n\n## 4.5. Web 无障碍/Accessibility\n\n-   一些 Web 开发者规范：\n    -   WCAG2.0\n    -   ARIA\n-   提升无障碍性\n    -   img alt\n    -   noscript\n    -   input 和 label 对应\n    -   图片验证码与语音验证码\n    -   文字背景对比度\n    -   键盘可操作（tab modal focus）\n\n## 4.6. 工具\n\n-   [W3C Validator（检查 html 合法性）](http://validator.w3.org/)\n-   emmet（插件）\n-   markdown（适合写文档）\n\n## 4.7. 参考链接\n\n-   [HTML: The Living Standard](https://html.spec.whatwg.org/dev/)\n-   [Activating Browser Modes with Doctype](https://hsivonen.fi/doctype/)\n-   [Accessibility](https://www.w3.org/standards/webdesign/accessibility)\n-   Web Content Accessibility Guidelines 2.0\n-   [HTML5 Doctor: Semantics](http://html5doctor.com/element-index/)\n\n## 全局属性\n\n### class id style\n\n### title\n\n（兼容性最好的 tooltip😂）\n\n### tabindex\n\ntab 键控制次序\n\n### lang\n\n语言代码（利于语义化机器理解）（语言代码参考手册http://www.runoob.com/tags/html-language-codes.html）\n\n### dir\n\n文本方向（rtl ltr auto）\n\n### accesskey\n\n元素的键盘访问快捷键（例值为'h'则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + 'h'）\n\n## （HTML5 全局属性）\n\n### data-\\*属性\n\n属性名不要包含大写字母，在 data- 后必须至少有一个字符。\n该属性可以是任何字符串\n\n```\nel.getAttribute(\"data-xx\")\n```\n\n### hidden\n\n不需要属性值，隐藏元素，原理是 display:none\n\n### contenteditable\n\n元素是否可编辑\n\n### contextmenu\n\n（说是目前只有 firefox 支持，亲测没效果\n\n```\n<p contextmenu=\"mymenu\"></p>\n<menu id=\"mymenu\">\n    <command label=\"xxx\" onclick=\"fn()\"/>\n    <command label=\"xxx\" onclick=\"fn()\"/>\n</menu>\n```\n\n### draggable：(与 HTML5drag 结合用)\n\n```javascript\n\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n<p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\">这是一段可移动的段落。可把该段落拖入上下的矩形。</p>\n<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\nfunction allowDrop(ev){\n\tev.preventDefault();\n}\nfunction drag(ev){\n\tev.dataTransfer.setData(\"Text\",ev.target.id);\n}\nfunction drop(ev){\n\tvar data=ev.dataTransfer.getData(\"Text\");\n\tev.target.appendChild(document.getElementById(data));\n\tev.preventDefault();\n}\n\n```\n\n### dropzone 属性:\n\n规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持\n\n### sppelcheck：\n\n对元素的文本进行拼写检查\n\n### translate 属性：\n\n规定元素内容是否要翻译，=yes|no\n\n# 遗留\n\n表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值\nvideo 不能嵌套 img\np 不能嵌套 div\nfigure dfn cite 标签\n\n---\n\n    “因为你永远不知道你不知道的有多少”\n","slug":"360fe_01_html","published":1,"updated":"2020-04-08T00:43:01.112Z","_id":"ck94a9aoo000307s6w7pzuvak","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-前端做什么\"><a href=\"#1-前端做什么\" class=\"headerlink\" title=\"1. 前端做什么\"></a>1. 前端做什么</h1><p>用 web 标准技术 html css js svg http 等</p>\n<p>做界面与交互</p>\n<p>功能+美观+无障碍+安全+兼容+性能+体验</p>\n<h1 id=\"2-知识图谱-技术栈\"><a href=\"#2-知识图谱-技术栈\" class=\"headerlink\" title=\"2. 知识图谱/技术栈\"></a>2. 知识图谱/技术栈</h1><h2 id=\"2-1-语言\"><a href=\"#2-1-语言\" class=\"headerlink\" title=\"2.1. 语言\"></a>2.1. 语言</h2><ul>\n<li>js</li>\n<li>html</li>\n<li>css</li>\n<li>php</li>\n</ul>\n<h2 id=\"2-2-行业标准\"><a href=\"#2-2-行业标准\" class=\"headerlink\" title=\"2.2. 行业标准\"></a>2.2. 行业标准</h2><ul>\n<li>DOM</li>\n<li>ES2018</li>\n<li>HTTP</li>\n<li>JSON</li>\n<li>XML</li>\n</ul>\n<h2 id=\"2-3-框架\"><a href=\"#2-3-框架\" class=\"headerlink\" title=\"2.3. 框架\"></a>2.3. 框架</h2><ul>\n<li>React.js</li>\n<li>Angular.js</li>\n<li>jQuery</li>\n<li>Vue.js</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"2-4-兼容性\"><a href=\"#2-4-兼容性\" class=\"headerlink\" title=\"2.4. 兼容性\"></a>2.4. 兼容性</h2><ul>\n<li>IE 等浏览器</li>\n<li>CSS3 新特性</li>\n<li>HTML5 新特性</li>\n<li>ES2018</li>\n<li>移动端</li>\n</ul>\n<h2 id=\"2-5-编程思想\"><a href=\"#2-5-编程思想\" class=\"headerlink\" title=\"2.5. 编程思想\"></a>2.5. 编程思想</h2><ul>\n<li>函数式编程</li>\n<li>面向对象</li>\n<li>设计模式</li>\n</ul>\n<h2 id=\"2-6-调试\"><a href=\"#2-6-调试\" class=\"headerlink\" title=\"2.6. 调试\"></a>2.6. 调试</h2><ul>\n<li>浏览器</li>\n<li>Fiddler http</li>\n</ul>\n<h2 id=\"2-7-工程化\"><a href=\"#2-7-工程化\" class=\"headerlink\" title=\"2.7. 工程化\"></a>2.7. 工程化</h2><ul>\n<li>npm</li>\n<li>webpack</li>\n<li>postcss</li>\n</ul>\n<h2 id=\"2-8-安全性\"><a href=\"#2-8-安全性\" class=\"headerlink\" title=\"2.8. 安全性\"></a>2.8. 安全性</h2><ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>加密解密</li>\n<li>编解码</li>\n</ul>\n<h2 id=\"2-9-性能\"><a href=\"#2-9-性能\" class=\"headerlink\" title=\"2.9. 性能\"></a>2.9. 性能</h2><ul>\n<li>优化规则</li>\n<li>开发者工具</li>\n<li>浏览器原理</li>\n</ul>\n<h2 id=\"2-10-团队协作\"><a href=\"#2-10-团队协作\" class=\"headerlink\" title=\"2.10. 团队协作\"></a>2.10. 团队协作</h2><ul>\n<li>git/svn</li>\n<li>编码规范/eslint</li>\n<li>文档管理</li>\n</ul>\n<h2 id=\"2-11-交互设计\"><a href=\"#2-11-交互设计\" class=\"headerlink\" title=\"2.11. 交互设计\"></a>2.11. 交互设计</h2><h1 id=\"3-前端边界\"><a href=\"#3-前端边界\" class=\"headerlink\" title=\"3. 前端边界\"></a>3. 前端边界</h1><p>node、electron、react native、webRTC、WebGL、WEBAssembly</p>\n<h1 id=\"4-HTML\"><a href=\"#4-HTML\" class=\"headerlink\" title=\"4. HTML\"></a>4. HTML</h1><h2 id=\"4-1-doctype\"><a href=\"#4-1-doctype\" class=\"headerlink\" title=\"4.1. doctype\"></a>4.1. doctype</h2><ul>\n<li>指定文档使用的标准和版本；</li>\n<li>浏览器根据 doctype 决定使用哪种渲染模式；</li>\n<li>没写会以怪异模式渲染（盒模型不同等待）</li>\n<li>渲染模式</li>\n</ul>\n<h2 id=\"4-2-语义化\"><a href=\"#4-2-语义化\" class=\"headerlink\" title=\"4.2. 语义化\"></a>4.2. 语义化</h2><ul>\n<li>元素、属性、属性值都有特定含义，应该遵循语义来写 HTML</li>\n<li>可读性、可维护性、搜索引擎优化、无障碍性</li>\n</ul>\n<h2 id=\"4-3-标签\"><a href=\"#4-3-标签\" class=\"headerlink\" title=\"4.3. 标签\"></a>4.3. 标签</h2><h3 id=\"4-3-1-flow-流式元素：\"><a href=\"#4-3-1-flow-流式元素：\" class=\"headerlink\" title=\"4.3.1. flow 流式元素：\"></a>4.3.1. flow 流式元素：</h3><ul>\n<li>heading 标题</li>\n<li>sectioning 章节</li>\n<li>phrasing 段落内容 p h</li>\n<li>Embedded 嵌入式内容 audio canvas</li>\n<li>interactive 可交互性内容 button a</li>\n<li>metadata 元数据元素 base link meta noscript script style title</li>\n</ul>\n<h3 id=\"4-3-2-看规范\"><a href=\"#4-3-2-看规范\" class=\"headerlink\" title=\"4.3.2. 看规范\"></a>4.3.2. 看规范</h3><h2 id=\"4-4-HTML-扩展\"><a href=\"#4-4-HTML-扩展\" class=\"headerlink\" title=\"4.4. HTML 扩展\"></a>4.4. HTML 扩展</h2><h3 id=\"4-4-1-meta-标签（增加元数据\"><a href=\"#4-4-1-meta-标签（增加元数据\" class=\"headerlink\" title=\"4.4.1. meta 标签（增加元数据\"></a>4.4.1. meta 标签（增加元数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 编码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定http header --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Security-Policy\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"script-src 'self'\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- seo优化 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"页面介绍\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动设备的viewport 初始缩放比例，视口宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 关闭IOS电话号码识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 360等双核浏览器 指定渲染内核 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定IE渲染模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"X-UA-Compatibla\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-data-属性（规范内-自定义的属性）\"><a href=\"#4-4-2-data-属性（规范内-自定义的属性）\" class=\"headerlink\" title=\"4.4.2. data-*属性（规范内-自定义的属性）\"></a>4.4.2. data-*属性（规范内-自定义的属性）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasetAPI</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  el.dataset.id</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-3-link\"><a href=\"#4-4-3-link\" class=\"headerlink\" title=\"4.4.3. link\"></a>4.4.3. link</h3><ul>\n<li>rel 属性（relation 关系，外部资源与当前页面的关系）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- favicon：rel=icon --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- RSS：rel=alternate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-4-JSON-LD\"><a href=\"#4-4-4-JSON-LD\" class=\"headerlink\" title=\"4.4.4. JSON-LD\"></a>4.4.4. JSON-LD</h3><p>LD：linkdata 链接的数据 (直接在页面嵌 json 数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"application/ld+json\"</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"@context\"</span>: <span class=\"string\">\"http://schema.org\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"Person\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jobTitle\"</span>: <span class=\"string\">\"Graduate research assistant\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"affiliation\"</span>: <span class=\"string\">\"University of Dreams\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"additionalName\"</span>: <span class=\"string\">\"Johnny\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://www.example.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"PostalAddress\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"streetAddress\"</span>: <span class=\"string\">\"1234 Peach Drive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressLocality\"</span>: <span class=\"string\">\"Wonderland\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressRegion\"</span>: <span class=\"string\">\"Georgia\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  应用例如分享页面时的数据</span></span><br><span class=\"line\"><span class=\"comment\">//  搜索引擎能识别等等</span></span><br><span class=\"line\"><span class=\"comment\">//  分享链接带有一些标题图片等信息</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-Web-无障碍-Accessibility\"><a href=\"#4-5-Web-无障碍-Accessibility\" class=\"headerlink\" title=\"4.5. Web 无障碍/Accessibility\"></a>4.5. Web 无障碍/Accessibility</h2><ul>\n<li>一些 Web 开发者规范：<ul>\n<li>WCAG2.0</li>\n<li>ARIA</li>\n</ul>\n</li>\n<li>提升无障碍性<ul>\n<li>img alt</li>\n<li>noscript</li>\n<li>input 和 label 对应</li>\n<li>图片验证码与语音验证码</li>\n<li>文字背景对比度</li>\n<li>键盘可操作（tab modal focus）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-6-工具\"><a href=\"#4-6-工具\" class=\"headerlink\" title=\"4.6. 工具\"></a>4.6. 工具</h2><ul>\n<li><a href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"noopener\">W3C Validator（检查 html 合法性）</a></li>\n<li>emmet（插件）</li>\n<li>markdown（适合写文档）</li>\n</ul>\n<h2 id=\"4-7-参考链接\"><a href=\"#4-7-参考链接\" class=\"headerlink\" title=\"4.7. 参考链接\"></a>4.7. 参考链接</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/dev/\" target=\"_blank\" rel=\"noopener\">HTML: The Living Standard</a></li>\n<li><a href=\"https://hsivonen.fi/doctype/\" target=\"_blank\" rel=\"noopener\">Activating Browser Modes with Doctype</a></li>\n<li><a href=\"https://www.w3.org/standards/webdesign/accessibility\" target=\"_blank\" rel=\"noopener\">Accessibility</a></li>\n<li>Web Content Accessibility Guidelines 2.0</li>\n<li><a href=\"http://html5doctor.com/element-index/\" target=\"_blank\" rel=\"noopener\">HTML5 Doctor: Semantics</a></li>\n</ul>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><h3 id=\"class-id-style\"><a href=\"#class-id-style\" class=\"headerlink\" title=\"class id style\"></a>class id style</h3><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>（兼容性最好的 tooltip😂）</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>tab 键控制次序</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>语言代码（利于语义化机器理解）（语言代码参考手册<a href=\"http://www.runoob.com/tags/html-language-codes.html）\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/tags/html-language-codes.html）</a></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>文本方向（rtl ltr auto）</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>元素的键盘访问快捷键（例值为’h’则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + ‘h’）</p>\n<h2 id=\"（HTML5-全局属性）\"><a href=\"#（HTML5-全局属性）\" class=\"headerlink\" title=\"（HTML5 全局属性）\"></a>（HTML5 全局属性）</h2><h3 id=\"data-属性\"><a href=\"#data-属性\" class=\"headerlink\" title=\"data-*属性\"></a>data-*属性</h3><p>属性名不要包含大写字母，在 data- 后必须至少有一个字符。<br>该属性可以是任何字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.getAttribute(&quot;data-xx&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>不需要属性值，隐藏元素，原理是 display:none</p>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>元素是否可编辑</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>（说是目前只有 firefox 支持，亲测没效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p contextmenu=&quot;mymenu&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;menu id=&quot;mymenu&quot;&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"draggable：-与-HTML5drag-结合用\"><a href=\"#draggable：-与-HTML5drag-结合用\" class=\"headerlink\" title=\"draggable：(与 HTML5drag 结合用)\"></a>draggable：(与 HTML5drag 结合用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\"&gt;这是一段可移动的段落。可把该段落拖入上下的矩形。&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div2\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function allowDrop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drag(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.dataTransfer.setData(\"Text\",ev.target.id);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tvar data=ev.dataTransfer.getData(\"Text\");</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.target.appendChild(document.getElementById(data));</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dropzone-属性\"><a href=\"#dropzone-属性\" class=\"headerlink\" title=\"dropzone 属性:\"></a>dropzone 属性:</h3><p>规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持</p>\n<h3 id=\"sppelcheck：\"><a href=\"#sppelcheck：\" class=\"headerlink\" title=\"sppelcheck：\"></a>sppelcheck：</h3><p>对元素的文本进行拼写检查</p>\n<h3 id=\"translate-属性：\"><a href=\"#translate-属性：\" class=\"headerlink\" title=\"translate 属性：\"></a>translate 属性：</h3><p>规定元素内容是否要翻译，=yes|no</p>\n<h1 id=\"遗留\"><a href=\"#遗留\" class=\"headerlink\" title=\"遗留\"></a>遗留</h1><p>表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值<br>video 不能嵌套 img<br>p 不能嵌套 div<br>figure dfn cite 标签</p>\n<hr>\n<pre><code>“因为你永远不知道你不知道的有多少”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-前端做什么\"><a href=\"#1-前端做什么\" class=\"headerlink\" title=\"1. 前端做什么\"></a>1. 前端做什么</h1><p>用 web 标准技术 html css js svg http 等</p>\n<p>做界面与交互</p>\n<p>功能+美观+无障碍+安全+兼容+性能+体验</p>\n<h1 id=\"2-知识图谱-技术栈\"><a href=\"#2-知识图谱-技术栈\" class=\"headerlink\" title=\"2. 知识图谱/技术栈\"></a>2. 知识图谱/技术栈</h1><h2 id=\"2-1-语言\"><a href=\"#2-1-语言\" class=\"headerlink\" title=\"2.1. 语言\"></a>2.1. 语言</h2><ul>\n<li>js</li>\n<li>html</li>\n<li>css</li>\n<li>php</li>\n</ul>\n<h2 id=\"2-2-行业标准\"><a href=\"#2-2-行业标准\" class=\"headerlink\" title=\"2.2. 行业标准\"></a>2.2. 行业标准</h2><ul>\n<li>DOM</li>\n<li>ES2018</li>\n<li>HTTP</li>\n<li>JSON</li>\n<li>XML</li>\n</ul>\n<h2 id=\"2-3-框架\"><a href=\"#2-3-框架\" class=\"headerlink\" title=\"2.3. 框架\"></a>2.3. 框架</h2><ul>\n<li>React.js</li>\n<li>Angular.js</li>\n<li>jQuery</li>\n<li>Vue.js</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"2-4-兼容性\"><a href=\"#2-4-兼容性\" class=\"headerlink\" title=\"2.4. 兼容性\"></a>2.4. 兼容性</h2><ul>\n<li>IE 等浏览器</li>\n<li>CSS3 新特性</li>\n<li>HTML5 新特性</li>\n<li>ES2018</li>\n<li>移动端</li>\n</ul>\n<h2 id=\"2-5-编程思想\"><a href=\"#2-5-编程思想\" class=\"headerlink\" title=\"2.5. 编程思想\"></a>2.5. 编程思想</h2><ul>\n<li>函数式编程</li>\n<li>面向对象</li>\n<li>设计模式</li>\n</ul>\n<h2 id=\"2-6-调试\"><a href=\"#2-6-调试\" class=\"headerlink\" title=\"2.6. 调试\"></a>2.6. 调试</h2><ul>\n<li>浏览器</li>\n<li>Fiddler http</li>\n</ul>\n<h2 id=\"2-7-工程化\"><a href=\"#2-7-工程化\" class=\"headerlink\" title=\"2.7. 工程化\"></a>2.7. 工程化</h2><ul>\n<li>npm</li>\n<li>webpack</li>\n<li>postcss</li>\n</ul>\n<h2 id=\"2-8-安全性\"><a href=\"#2-8-安全性\" class=\"headerlink\" title=\"2.8. 安全性\"></a>2.8. 安全性</h2><ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>加密解密</li>\n<li>编解码</li>\n</ul>\n<h2 id=\"2-9-性能\"><a href=\"#2-9-性能\" class=\"headerlink\" title=\"2.9. 性能\"></a>2.9. 性能</h2><ul>\n<li>优化规则</li>\n<li>开发者工具</li>\n<li>浏览器原理</li>\n</ul>\n<h2 id=\"2-10-团队协作\"><a href=\"#2-10-团队协作\" class=\"headerlink\" title=\"2.10. 团队协作\"></a>2.10. 团队协作</h2><ul>\n<li>git/svn</li>\n<li>编码规范/eslint</li>\n<li>文档管理</li>\n</ul>\n<h2 id=\"2-11-交互设计\"><a href=\"#2-11-交互设计\" class=\"headerlink\" title=\"2.11. 交互设计\"></a>2.11. 交互设计</h2><h1 id=\"3-前端边界\"><a href=\"#3-前端边界\" class=\"headerlink\" title=\"3. 前端边界\"></a>3. 前端边界</h1><p>node、electron、react native、webRTC、WebGL、WEBAssembly</p>\n<h1 id=\"4-HTML\"><a href=\"#4-HTML\" class=\"headerlink\" title=\"4. HTML\"></a>4. HTML</h1><h2 id=\"4-1-doctype\"><a href=\"#4-1-doctype\" class=\"headerlink\" title=\"4.1. doctype\"></a>4.1. doctype</h2><ul>\n<li>指定文档使用的标准和版本；</li>\n<li>浏览器根据 doctype 决定使用哪种渲染模式；</li>\n<li>没写会以怪异模式渲染（盒模型不同等待）</li>\n<li>渲染模式</li>\n</ul>\n<h2 id=\"4-2-语义化\"><a href=\"#4-2-语义化\" class=\"headerlink\" title=\"4.2. 语义化\"></a>4.2. 语义化</h2><ul>\n<li>元素、属性、属性值都有特定含义，应该遵循语义来写 HTML</li>\n<li>可读性、可维护性、搜索引擎优化、无障碍性</li>\n</ul>\n<h2 id=\"4-3-标签\"><a href=\"#4-3-标签\" class=\"headerlink\" title=\"4.3. 标签\"></a>4.3. 标签</h2><h3 id=\"4-3-1-flow-流式元素：\"><a href=\"#4-3-1-flow-流式元素：\" class=\"headerlink\" title=\"4.3.1. flow 流式元素：\"></a>4.3.1. flow 流式元素：</h3><ul>\n<li>heading 标题</li>\n<li>sectioning 章节</li>\n<li>phrasing 段落内容 p h</li>\n<li>Embedded 嵌入式内容 audio canvas</li>\n<li>interactive 可交互性内容 button a</li>\n<li>metadata 元数据元素 base link meta noscript script style title</li>\n</ul>\n<h3 id=\"4-3-2-看规范\"><a href=\"#4-3-2-看规范\" class=\"headerlink\" title=\"4.3.2. 看规范\"></a>4.3.2. 看规范</h3><h2 id=\"4-4-HTML-扩展\"><a href=\"#4-4-HTML-扩展\" class=\"headerlink\" title=\"4.4. HTML 扩展\"></a>4.4. HTML 扩展</h2><h3 id=\"4-4-1-meta-标签（增加元数据\"><a href=\"#4-4-1-meta-标签（增加元数据\" class=\"headerlink\" title=\"4.4.1. meta 标签（增加元数据\"></a>4.4.1. meta 标签（增加元数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 编码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定http header --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Security-Policy\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"script-src 'self'\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- seo优化 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"页面介绍\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动设备的viewport 初始缩放比例，视口宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 关闭IOS电话号码识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 360等双核浏览器 指定渲染内核 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定IE渲染模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"X-UA-Compatibla\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-data-属性（规范内-自定义的属性）\"><a href=\"#4-4-2-data-属性（规范内-自定义的属性）\" class=\"headerlink\" title=\"4.4.2. data-*属性（规范内-自定义的属性）\"></a>4.4.2. data-*属性（规范内-自定义的属性）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasetAPI</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  el.dataset.id</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-3-link\"><a href=\"#4-4-3-link\" class=\"headerlink\" title=\"4.4.3. link\"></a>4.4.3. link</h3><ul>\n<li>rel 属性（relation 关系，外部资源与当前页面的关系）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- favicon：rel=icon --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- RSS：rel=alternate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-4-JSON-LD\"><a href=\"#4-4-4-JSON-LD\" class=\"headerlink\" title=\"4.4.4. JSON-LD\"></a>4.4.4. JSON-LD</h3><p>LD：linkdata 链接的数据 (直接在页面嵌 json 数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"application/ld+json\"</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"@context\"</span>: <span class=\"string\">\"http://schema.org\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"Person\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jobTitle\"</span>: <span class=\"string\">\"Graduate research assistant\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"affiliation\"</span>: <span class=\"string\">\"University of Dreams\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"additionalName\"</span>: <span class=\"string\">\"Johnny\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://www.example.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"PostalAddress\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"streetAddress\"</span>: <span class=\"string\">\"1234 Peach Drive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressLocality\"</span>: <span class=\"string\">\"Wonderland\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressRegion\"</span>: <span class=\"string\">\"Georgia\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  应用例如分享页面时的数据</span></span><br><span class=\"line\"><span class=\"comment\">//  搜索引擎能识别等等</span></span><br><span class=\"line\"><span class=\"comment\">//  分享链接带有一些标题图片等信息</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-Web-无障碍-Accessibility\"><a href=\"#4-5-Web-无障碍-Accessibility\" class=\"headerlink\" title=\"4.5. Web 无障碍/Accessibility\"></a>4.5. Web 无障碍/Accessibility</h2><ul>\n<li>一些 Web 开发者规范：<ul>\n<li>WCAG2.0</li>\n<li>ARIA</li>\n</ul>\n</li>\n<li>提升无障碍性<ul>\n<li>img alt</li>\n<li>noscript</li>\n<li>input 和 label 对应</li>\n<li>图片验证码与语音验证码</li>\n<li>文字背景对比度</li>\n<li>键盘可操作（tab modal focus）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-6-工具\"><a href=\"#4-6-工具\" class=\"headerlink\" title=\"4.6. 工具\"></a>4.6. 工具</h2><ul>\n<li><a href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"noopener\">W3C Validator（检查 html 合法性）</a></li>\n<li>emmet（插件）</li>\n<li>markdown（适合写文档）</li>\n</ul>\n<h2 id=\"4-7-参考链接\"><a href=\"#4-7-参考链接\" class=\"headerlink\" title=\"4.7. 参考链接\"></a>4.7. 参考链接</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/dev/\" target=\"_blank\" rel=\"noopener\">HTML: The Living Standard</a></li>\n<li><a href=\"https://hsivonen.fi/doctype/\" target=\"_blank\" rel=\"noopener\">Activating Browser Modes with Doctype</a></li>\n<li><a href=\"https://www.w3.org/standards/webdesign/accessibility\" target=\"_blank\" rel=\"noopener\">Accessibility</a></li>\n<li>Web Content Accessibility Guidelines 2.0</li>\n<li><a href=\"http://html5doctor.com/element-index/\" target=\"_blank\" rel=\"noopener\">HTML5 Doctor: Semantics</a></li>\n</ul>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><h3 id=\"class-id-style\"><a href=\"#class-id-style\" class=\"headerlink\" title=\"class id style\"></a>class id style</h3><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>（兼容性最好的 tooltip😂）</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>tab 键控制次序</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>语言代码（利于语义化机器理解）（语言代码参考手册<a href=\"http://www.runoob.com/tags/html-language-codes.html）\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/tags/html-language-codes.html）</a></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>文本方向（rtl ltr auto）</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>元素的键盘访问快捷键（例值为’h’则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + ‘h’）</p>\n<h2 id=\"（HTML5-全局属性）\"><a href=\"#（HTML5-全局属性）\" class=\"headerlink\" title=\"（HTML5 全局属性）\"></a>（HTML5 全局属性）</h2><h3 id=\"data-属性\"><a href=\"#data-属性\" class=\"headerlink\" title=\"data-*属性\"></a>data-*属性</h3><p>属性名不要包含大写字母，在 data- 后必须至少有一个字符。<br>该属性可以是任何字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.getAttribute(&quot;data-xx&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>不需要属性值，隐藏元素，原理是 display:none</p>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>元素是否可编辑</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>（说是目前只有 firefox 支持，亲测没效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p contextmenu=&quot;mymenu&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;menu id=&quot;mymenu&quot;&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"draggable：-与-HTML5drag-结合用\"><a href=\"#draggable：-与-HTML5drag-结合用\" class=\"headerlink\" title=\"draggable：(与 HTML5drag 结合用)\"></a>draggable：(与 HTML5drag 结合用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\"&gt;这是一段可移动的段落。可把该段落拖入上下的矩形。&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div2\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function allowDrop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drag(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.dataTransfer.setData(\"Text\",ev.target.id);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tvar data=ev.dataTransfer.getData(\"Text\");</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.target.appendChild(document.getElementById(data));</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dropzone-属性\"><a href=\"#dropzone-属性\" class=\"headerlink\" title=\"dropzone 属性:\"></a>dropzone 属性:</h3><p>规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持</p>\n<h3 id=\"sppelcheck：\"><a href=\"#sppelcheck：\" class=\"headerlink\" title=\"sppelcheck：\"></a>sppelcheck：</h3><p>对元素的文本进行拼写检查</p>\n<h3 id=\"translate-属性：\"><a href=\"#translate-属性：\" class=\"headerlink\" title=\"translate 属性：\"></a>translate 属性：</h3><p>规定元素内容是否要翻译，=yes|no</p>\n<h1 id=\"遗留\"><a href=\"#遗留\" class=\"headerlink\" title=\"遗留\"></a>遗留</h1><p>表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值<br>video 不能嵌套 img<br>p 不能嵌套 div<br>figure dfn cite 标签</p>\n<hr>\n<pre><code>“因为你永远不知道你不知道的有多少”\n</code></pre>"},{"title":"360FED课程——CSS","date":"2018-09-06T16:00:00.000Z","description":"大佬为什么是大佬？","toc":1,"top":0,"_content":"\n# css\n\ncascading stylesheet\n级联样式表\n\n# Level 版本\n\n-   CSS Level 1（废弃\n-   CSS Level 2 (CSS 2.2 完整规范)\n-   CSS Level 3（在 2.2 的基础上增加新模块特性\n    -   Color Module Level 3\n    -   Selectors Level 3\n    -   Media Queries\n    -   Fonts Level 3\n\n# 选择器\n\n## 简单\n\n-   通配 \\*\n-   标签 E\n-   类 .class\n-   id #id\n\n## 属性选择器 [ ]\n\n```css\n/* 具有某个属性 */\n[disabled]\n\n/* 属性为指定的值 */\n[type=\"checkbox\"]\n\n/* 属性值包含某个字符串 */\n[href*=\"example\"]\n\n/* 属性值以某个字符串开头 */\n[href^=\"http:\"]\n\n/* 属性值以某个字符串结束 */\n[href$=\"jpg\"]\n\n/* 属性值以空格分割后包含某个字符串 */\n[lang~＝\"zh-cn\"]/* class选择器的实现机制 */\n```\n\n## 伪类\n\n```css\n/* 动态性伪类，根据状态选择 */\na:link    { ... }       /* 未访问过的链接 */\na:visited { ... }       /* 已访问过的链接 */\n\na:hover   { ... }       /* 鼠标移到链接上的样式 */\na:active  { ... }       /* 鼠标在连接上按下时的样式 */\na:focus   { ... }       /* 获得焦点时的样式 */\n\ninput:disabled { ... }  /* 禁用时的样式 */\ninput:checked { ... }   /* 选中时的样式 */\n                        /*利用:checked来做某些toggle组件状态转换*/\n\n/* 结构性伪类 */\n:first-child\n:last-child\n:nth-child(2n+1)\n\n:first-of-type\n:last-of-type\ndiv:nth-of-type(2n+1)   /*对nth-child()增加类型限制*/\n\n:empty\n```\n\n## 组合性选择器\n\n-   后代 E F\n-   父子 E>F\n-   兄弟 E~F\n-   相邻兄弟 E+F\n\n# 伪元素\n\n-   ::before\n-   ::after\n-   ::first-letter\n-   ::first-line\n\n# 优先级/特异度 Specificity\n\n-   !important > 内联 > id > （伪）类 > （伪）元素\n-   覆盖：同样优先级：后面写的覆盖前面写的\n-   复合选择器：从优先级高的选择器 的 数量 开始比较\n\n# 样式来源\n\n-   页面开发者\n-   用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载\n-   浏览器预设\n    -   [Mozilla Firefox 预设样式](https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css)\n    -   [Google Chrome 预设样式](https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css)\n-   优先级： 开发者 > 用户设置 > 浏览器预设\n-   加了!important 的优先级：用户 important > 开发者 important > 开发者 > 用户设置 > 浏览器预设\n\n# 默认值策略 Defaulting\n\n## 继承\n\n某些属性若不指定值，会自动继承父元素的 ！！！【计算值】\n\n## 显示继承\n\n```css\nhtml {\n    box-sizing: border-box;\n}\n* {\n    box-sizing: inherit;\n    /* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */\n}\n#xxx {\n    box-sizing: content-box;\n}\n```\n\n## 初始值 initial\n\n-   CSS 中，每个属性都有一个初始值\n-   background-color 的初始值为 transparent\n-   margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同\n-   可以显式重置为初始值，比如 background-color: initial\n-   可以上 mdn 查初始值\n\n# CSS 求值过程\n\n## 一个令人疑惑的很皮的 CSS 求值例子\n\n```html\n<article>\n    <h1>卡尔斯巴德洞窟</h1>\n    <p>\n        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，\n        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以\n        通过电梯直接到达230米的洞穴深处。\n    </p>\n</article>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 150%;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为24px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为24px*/\n    }\n</style>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 1.5;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为60px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为21px*/\n    }\n</style>\n\n<!--\n    原因：\n    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px\n\n    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height\n\n    总结：子元素继承到的是父元素的 计算值（一个绝对值）\n-->\n```\n\n## CSS 求值详细过程\n\n-   filtering：有效选择器 有效属性值 符合 media ，筛选出所有**声明值 Declared Values**\n-   cascading：选出优先级最高的一条声明，得到**层叠值 Cascaded Value**\n-   defaulting：当层叠值为空时，用 继承 | 初始值，得到**指定值 Specified Value**\n-   resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到**计算值 Computed Value**\n-   formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到**使用值 Used Value**\n-   constraining：将小数像素转为整数，得到**实际值**\n\n# CSS 排版原理\n\n## 盒模型\n\n### content-box：\n\n-   margin\n-   border\n-   padding\n-   content（width height）\n\n### border-box\n\n-   margin\n-   border （width = border + padding + content_width）\n-   padding\n-   content\n\n## height 100%（一般不用\n\n-   高度百分数，是相对于父元素的高度\n-   若父元素无高度，则百分比高度不生效\n-   用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度\n\n## padding 100%\n\n-   padding 百分比值，不论是 padding top、left，都是相对于**父元素宽度**\n-   应用：做固定宽高比的盒子.\n\n## margin 折叠\n\n上下相邻元素的间距会取其 margin 中较大值。\n\n## border：四条边不同颜色\n\n-   实际相邻的 border 交界处，是斜切的。\n-   当元素的 width height 为 0 时，会得到四个三角形\n\n# background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\n\n# 视觉格式化模型\n\n## Viewport 视口\n\n浏览器的可视区域，所有元素都在 viewport 内\n\n## 块级元素(Block-level Elements)\n\n-   会被格式化成块状的元素\n-   例如 p、div、section 等\n-   将 display 设置为 block、list-item、table 会使元素变为块级\n\n## 行内元素(Inline-level Elements)\n\n-   不会为其内容生成块级框\n-   让其内容分布在多行中\n-   display 设置为 inline、inline-block、inline-table 会使元素变为行级\n\n---\n\n    “因为大佬比你知道的多”\n","source":"_posts/360fe_02_css.md","raw":"---\ntitle: 360FED课程——CSS\ncategories:\n    - 02 CSS # 一级分类\ntags:\ndate: 2018-09-07\ndescription: 大佬为什么是大佬？\ntoc: 1\ntop: 0\n---\n\n# css\n\ncascading stylesheet\n级联样式表\n\n# Level 版本\n\n-   CSS Level 1（废弃\n-   CSS Level 2 (CSS 2.2 完整规范)\n-   CSS Level 3（在 2.2 的基础上增加新模块特性\n    -   Color Module Level 3\n    -   Selectors Level 3\n    -   Media Queries\n    -   Fonts Level 3\n\n# 选择器\n\n## 简单\n\n-   通配 \\*\n-   标签 E\n-   类 .class\n-   id #id\n\n## 属性选择器 [ ]\n\n```css\n/* 具有某个属性 */\n[disabled]\n\n/* 属性为指定的值 */\n[type=\"checkbox\"]\n\n/* 属性值包含某个字符串 */\n[href*=\"example\"]\n\n/* 属性值以某个字符串开头 */\n[href^=\"http:\"]\n\n/* 属性值以某个字符串结束 */\n[href$=\"jpg\"]\n\n/* 属性值以空格分割后包含某个字符串 */\n[lang~＝\"zh-cn\"]/* class选择器的实现机制 */\n```\n\n## 伪类\n\n```css\n/* 动态性伪类，根据状态选择 */\na:link    { ... }       /* 未访问过的链接 */\na:visited { ... }       /* 已访问过的链接 */\n\na:hover   { ... }       /* 鼠标移到链接上的样式 */\na:active  { ... }       /* 鼠标在连接上按下时的样式 */\na:focus   { ... }       /* 获得焦点时的样式 */\n\ninput:disabled { ... }  /* 禁用时的样式 */\ninput:checked { ... }   /* 选中时的样式 */\n                        /*利用:checked来做某些toggle组件状态转换*/\n\n/* 结构性伪类 */\n:first-child\n:last-child\n:nth-child(2n+1)\n\n:first-of-type\n:last-of-type\ndiv:nth-of-type(2n+1)   /*对nth-child()增加类型限制*/\n\n:empty\n```\n\n## 组合性选择器\n\n-   后代 E F\n-   父子 E>F\n-   兄弟 E~F\n-   相邻兄弟 E+F\n\n# 伪元素\n\n-   ::before\n-   ::after\n-   ::first-letter\n-   ::first-line\n\n# 优先级/特异度 Specificity\n\n-   !important > 内联 > id > （伪）类 > （伪）元素\n-   覆盖：同样优先级：后面写的覆盖前面写的\n-   复合选择器：从优先级高的选择器 的 数量 开始比较\n\n# 样式来源\n\n-   页面开发者\n-   用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载\n-   浏览器预设\n    -   [Mozilla Firefox 预设样式](https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css)\n    -   [Google Chrome 预设样式](https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css)\n-   优先级： 开发者 > 用户设置 > 浏览器预设\n-   加了!important 的优先级：用户 important > 开发者 important > 开发者 > 用户设置 > 浏览器预设\n\n# 默认值策略 Defaulting\n\n## 继承\n\n某些属性若不指定值，会自动继承父元素的 ！！！【计算值】\n\n## 显示继承\n\n```css\nhtml {\n    box-sizing: border-box;\n}\n* {\n    box-sizing: inherit;\n    /* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */\n}\n#xxx {\n    box-sizing: content-box;\n}\n```\n\n## 初始值 initial\n\n-   CSS 中，每个属性都有一个初始值\n-   background-color 的初始值为 transparent\n-   margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同\n-   可以显式重置为初始值，比如 background-color: initial\n-   可以上 mdn 查初始值\n\n# CSS 求值过程\n\n## 一个令人疑惑的很皮的 CSS 求值例子\n\n```html\n<article>\n    <h1>卡尔斯巴德洞窟</h1>\n    <p>\n        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，\n        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以\n        通过电梯直接到达230米的洞穴深处。\n    </p>\n</article>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 150%;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为24px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为24px*/\n    }\n</style>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 1.5;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为60px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为21px*/\n    }\n</style>\n\n<!--\n    原因：\n    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px\n\n    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height\n\n    总结：子元素继承到的是父元素的 计算值（一个绝对值）\n-->\n```\n\n## CSS 求值详细过程\n\n-   filtering：有效选择器 有效属性值 符合 media ，筛选出所有**声明值 Declared Values**\n-   cascading：选出优先级最高的一条声明，得到**层叠值 Cascaded Value**\n-   defaulting：当层叠值为空时，用 继承 | 初始值，得到**指定值 Specified Value**\n-   resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到**计算值 Computed Value**\n-   formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到**使用值 Used Value**\n-   constraining：将小数像素转为整数，得到**实际值**\n\n# CSS 排版原理\n\n## 盒模型\n\n### content-box：\n\n-   margin\n-   border\n-   padding\n-   content（width height）\n\n### border-box\n\n-   margin\n-   border （width = border + padding + content_width）\n-   padding\n-   content\n\n## height 100%（一般不用\n\n-   高度百分数，是相对于父元素的高度\n-   若父元素无高度，则百分比高度不生效\n-   用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度\n\n## padding 100%\n\n-   padding 百分比值，不论是 padding top、left，都是相对于**父元素宽度**\n-   应用：做固定宽高比的盒子.\n\n## margin 折叠\n\n上下相邻元素的间距会取其 margin 中较大值。\n\n## border：四条边不同颜色\n\n-   实际相邻的 border 交界处，是斜切的。\n-   当元素的 width height 为 0 时，会得到四个三角形\n\n# background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\n\n# 视觉格式化模型\n\n## Viewport 视口\n\n浏览器的可视区域，所有元素都在 viewport 内\n\n## 块级元素(Block-level Elements)\n\n-   会被格式化成块状的元素\n-   例如 p、div、section 等\n-   将 display 设置为 block、list-item、table 会使元素变为块级\n\n## 行内元素(Inline-level Elements)\n\n-   不会为其内容生成块级框\n-   让其内容分布在多行中\n-   display 设置为 inline、inline-block、inline-table 会使元素变为行级\n\n---\n\n    “因为大佬比你知道的多”\n","slug":"360fe_02_css","published":1,"updated":"2020-04-08T00:43:01.112Z","_id":"ck94a9aos000707s6ftj8ki4j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><p>cascading stylesheet<br>级联样式表</p>\n<h1 id=\"Level-版本\"><a href=\"#Level-版本\" class=\"headerlink\" title=\"Level 版本\"></a>Level 版本</h1><ul>\n<li>CSS Level 1（废弃</li>\n<li>CSS Level 2 (CSS 2.2 完整规范)</li>\n<li>CSS Level 3（在 2.2 的基础上增加新模块特性<ul>\n<li>Color Module Level 3</li>\n<li>Selectors Level 3</li>\n<li>Media Queries</li>\n<li>Fonts Level 3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><ul>\n<li>通配 *</li>\n<li>标签 E</li>\n<li>类 .class</li>\n<li>id #id</li>\n</ul>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器 [ ]\"></a>属性选择器 [ ]</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 具有某个属性 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[disabled]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性为指定的值 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[type=<span class=\"string\">\"checkbox\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href*=<span class=\"string\">\"example\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串开头 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href^=<span class=\"string\">\"http:\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串结束 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href$=<span class=\"string\">\"jpg\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以空格分割后包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[lang~＝<span class=\"string\">\"zh-cn\"</span>]</span><span class=\"comment\">/* class选择器的实现机制 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 动态性伪类，根据状态选择 */</span></span><br><span class=\"line\">a:link    &#123; ... &#125;       /* 未访问过的链接 */</span><br><span class=\"line\">a:visited &#123; ... &#125;       /* 已访问过的链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">a:hover   &#123; ... &#125;       /* 鼠标移到链接上的样式 */</span><br><span class=\"line\">a:active  &#123; ... &#125;       /* 鼠标在连接上按下时的样式 */</span><br><span class=\"line\">a:focus   &#123; ... &#125;       /* 获得焦点时的样式 */</span><br><span class=\"line\"></span><br><span class=\"line\">input:disabled &#123; ... &#125;  /* 禁用时的样式 */</span><br><span class=\"line\">input:checked &#123; ... &#125;   /* 选中时的样式 */</span><br><span class=\"line\">                        <span class=\"comment\">/*利用:checked来做某些toggle组件状态转换*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结构性伪类 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-child(2n+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-of-type</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-of-type</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-of-type(2n+1)</span>   <span class=\"comment\">/*对nth-child()增加类型限制*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:empty</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组合性选择器\"><a href=\"#组合性选择器\" class=\"headerlink\" title=\"组合性选择器\"></a>组合性选择器</h2><ul>\n<li>后代 E F</li>\n<li>父子 E&gt;F</li>\n<li>兄弟 E~F</li>\n<li>相邻兄弟 E+F</li>\n</ul>\n<h1 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h1><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-letter</li>\n<li>::first-line</li>\n</ul>\n<h1 id=\"优先级-特异度-Specificity\"><a href=\"#优先级-特异度-Specificity\" class=\"headerlink\" title=\"优先级/特异度 Specificity\"></a>优先级/特异度 Specificity</h1><ul>\n<li>!important &gt; 内联 &gt; id &gt; （伪）类 &gt; （伪）元素</li>\n<li>覆盖：同样优先级：后面写的覆盖前面写的</li>\n<li>复合选择器：从优先级高的选择器 的 数量 开始比较</li>\n</ul>\n<h1 id=\"样式来源\"><a href=\"#样式来源\" class=\"headerlink\" title=\"样式来源\"></a>样式来源</h1><ul>\n<li>页面开发者</li>\n<li>用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载</li>\n<li>浏览器预设<ul>\n<li><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css\" target=\"_blank\" rel=\"noopener\">Mozilla Firefox 预设样式</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css\" target=\"_blank\" rel=\"noopener\">Google Chrome 预设样式</a></li>\n</ul>\n</li>\n<li>优先级： 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n<li>加了!important 的优先级：用户 important &gt; 开发者 important &gt; 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n</ul>\n<h1 id=\"默认值策略-Defaulting\"><a href=\"#默认值策略-Defaulting\" class=\"headerlink\" title=\"默认值策略 Defaulting\"></a>默认值策略 Defaulting</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>某些属性若不指定值，会自动继承父元素的 ！！！【计算值】</p>\n<h2 id=\"显示继承\"><a href=\"#显示继承\" class=\"headerlink\" title=\"显示继承\"></a>显示继承</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: inherit;</span><br><span class=\"line\">    <span class=\"comment\">/* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#xxx</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始值-initial\"><a href=\"#初始值-initial\" class=\"headerlink\" title=\"初始值 initial\"></a>初始值 initial</h2><ul>\n<li>CSS 中，每个属性都有一个初始值</li>\n<li>background-color 的初始值为 transparent</li>\n<li>margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同</li>\n<li>可以显式重置为初始值，比如 background-color: initial</li>\n<li>可以上 mdn 查初始值</li>\n</ul>\n<h1 id=\"CSS-求值过程\"><a href=\"#CSS-求值过程\" class=\"headerlink\" title=\"CSS 求值过程\"></a>CSS 求值过程</h1><h2 id=\"一个令人疑惑的很皮的-CSS-求值例子\"><a href=\"#一个令人疑惑的很皮的-CSS-求值例子\" class=\"headerlink\" title=\"一个令人疑惑的很皮的 CSS 求值例子\"></a>一个令人疑惑的很皮的 CSS 求值例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>卡尔斯巴德洞窟<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，</span><br><span class=\"line\">        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以</span><br><span class=\"line\">        通过电梯直接到达230米的洞穴深处。</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\">        line-height: 150%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为60px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为21px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    原因：</span></span><br><span class=\"line\"><span class=\"comment\">    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    总结：子元素继承到的是父元素的 计算值（一个绝对值）</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-求值详细过程\"><a href=\"#CSS-求值详细过程\" class=\"headerlink\" title=\"CSS 求值详细过程\"></a>CSS 求值详细过程</h2><ul>\n<li>filtering：有效选择器 有效属性值 符合 media ，筛选出所有<strong>声明值 Declared Values</strong></li>\n<li>cascading：选出优先级最高的一条声明，得到<strong>层叠值 Cascaded Value</strong></li>\n<li>defaulting：当层叠值为空时，用 继承 | 初始值，得到<strong>指定值 Specified Value</strong></li>\n<li>resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到<strong>计算值 Computed Value</strong></li>\n<li>formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到<strong>使用值 Used Value</strong></li>\n<li>constraining：将小数像素转为整数，得到<strong>实际值</strong></li>\n</ul>\n<h1 id=\"CSS-排版原理\"><a href=\"#CSS-排版原理\" class=\"headerlink\" title=\"CSS 排版原理\"></a>CSS 排版原理</h1><h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><h3 id=\"content-box：\"><a href=\"#content-box：\" class=\"headerlink\" title=\"content-box：\"></a>content-box：</h3><ul>\n<li>margin</li>\n<li>border</li>\n<li>padding</li>\n<li>content（width height）</li>\n</ul>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><ul>\n<li>margin</li>\n<li>border （width = border + padding + content_width）</li>\n<li>padding</li>\n<li>content</li>\n</ul>\n<h2 id=\"height-100-（一般不用\"><a href=\"#height-100-（一般不用\" class=\"headerlink\" title=\"height 100%（一般不用\"></a>height 100%（一般不用</h2><ul>\n<li>高度百分数，是相对于父元素的高度</li>\n<li>若父元素无高度，则百分比高度不生效</li>\n<li>用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度</li>\n</ul>\n<h2 id=\"padding-100\"><a href=\"#padding-100\" class=\"headerlink\" title=\"padding 100%\"></a>padding 100%</h2><ul>\n<li>padding 百分比值，不论是 padding top、left，都是相对于<strong>父元素宽度</strong></li>\n<li>应用：做固定宽高比的盒子.</li>\n</ul>\n<h2 id=\"margin-折叠\"><a href=\"#margin-折叠\" class=\"headerlink\" title=\"margin 折叠\"></a>margin 折叠</h2><p>上下相邻元素的间距会取其 margin 中较大值。</p>\n<h2 id=\"border：四条边不同颜色\"><a href=\"#border：四条边不同颜色\" class=\"headerlink\" title=\"border：四条边不同颜色\"></a>border：四条边不同颜色</h2><ul>\n<li>实际相邻的 border 交界处，是斜切的。</li>\n<li>当元素的 width height 为 0 时，会得到四个三角形</li>\n</ul>\n<h1 id=\"background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\"><a href=\"#background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\" class=\"headerlink\" title=\"background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\"></a>background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);</h1><h1 id=\"视觉格式化模型\"><a href=\"#视觉格式化模型\" class=\"headerlink\" title=\"视觉格式化模型\"></a>视觉格式化模型</h1><h2 id=\"Viewport-视口\"><a href=\"#Viewport-视口\" class=\"headerlink\" title=\"Viewport 视口\"></a>Viewport 视口</h2><p>浏览器的可视区域，所有元素都在 viewport 内</p>\n<h2 id=\"块级元素-Block-level-Elements\"><a href=\"#块级元素-Block-level-Elements\" class=\"headerlink\" title=\"块级元素(Block-level Elements)\"></a>块级元素(Block-level Elements)</h2><ul>\n<li>会被格式化成块状的元素</li>\n<li>例如 p、div、section 等</li>\n<li>将 display 设置为 block、list-item、table 会使元素变为块级</li>\n</ul>\n<h2 id=\"行内元素-Inline-level-Elements\"><a href=\"#行内元素-Inline-level-Elements\" class=\"headerlink\" title=\"行内元素(Inline-level Elements)\"></a>行内元素(Inline-level Elements)</h2><ul>\n<li>不会为其内容生成块级框</li>\n<li>让其内容分布在多行中</li>\n<li>display 设置为 inline、inline-block、inline-table 会使元素变为行级</li>\n</ul>\n<hr>\n<pre><code>“因为大佬比你知道的多”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><p>cascading stylesheet<br>级联样式表</p>\n<h1 id=\"Level-版本\"><a href=\"#Level-版本\" class=\"headerlink\" title=\"Level 版本\"></a>Level 版本</h1><ul>\n<li>CSS Level 1（废弃</li>\n<li>CSS Level 2 (CSS 2.2 完整规范)</li>\n<li>CSS Level 3（在 2.2 的基础上增加新模块特性<ul>\n<li>Color Module Level 3</li>\n<li>Selectors Level 3</li>\n<li>Media Queries</li>\n<li>Fonts Level 3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><ul>\n<li>通配 *</li>\n<li>标签 E</li>\n<li>类 .class</li>\n<li>id #id</li>\n</ul>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器 [ ]\"></a>属性选择器 [ ]</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 具有某个属性 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[disabled]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性为指定的值 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[type=<span class=\"string\">\"checkbox\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href*=<span class=\"string\">\"example\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串开头 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href^=<span class=\"string\">\"http:\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串结束 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href$=<span class=\"string\">\"jpg\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以空格分割后包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[lang~＝<span class=\"string\">\"zh-cn\"</span>]</span><span class=\"comment\">/* class选择器的实现机制 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 动态性伪类，根据状态选择 */</span></span><br><span class=\"line\">a:link    &#123; ... &#125;       /* 未访问过的链接 */</span><br><span class=\"line\">a:visited &#123; ... &#125;       /* 已访问过的链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">a:hover   &#123; ... &#125;       /* 鼠标移到链接上的样式 */</span><br><span class=\"line\">a:active  &#123; ... &#125;       /* 鼠标在连接上按下时的样式 */</span><br><span class=\"line\">a:focus   &#123; ... &#125;       /* 获得焦点时的样式 */</span><br><span class=\"line\"></span><br><span class=\"line\">input:disabled &#123; ... &#125;  /* 禁用时的样式 */</span><br><span class=\"line\">input:checked &#123; ... &#125;   /* 选中时的样式 */</span><br><span class=\"line\">                        <span class=\"comment\">/*利用:checked来做某些toggle组件状态转换*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结构性伪类 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-child(2n+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-of-type</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-of-type</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-of-type(2n+1)</span>   <span class=\"comment\">/*对nth-child()增加类型限制*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:empty</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组合性选择器\"><a href=\"#组合性选择器\" class=\"headerlink\" title=\"组合性选择器\"></a>组合性选择器</h2><ul>\n<li>后代 E F</li>\n<li>父子 E&gt;F</li>\n<li>兄弟 E~F</li>\n<li>相邻兄弟 E+F</li>\n</ul>\n<h1 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h1><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-letter</li>\n<li>::first-line</li>\n</ul>\n<h1 id=\"优先级-特异度-Specificity\"><a href=\"#优先级-特异度-Specificity\" class=\"headerlink\" title=\"优先级/特异度 Specificity\"></a>优先级/特异度 Specificity</h1><ul>\n<li>!important &gt; 内联 &gt; id &gt; （伪）类 &gt; （伪）元素</li>\n<li>覆盖：同样优先级：后面写的覆盖前面写的</li>\n<li>复合选择器：从优先级高的选择器 的 数量 开始比较</li>\n</ul>\n<h1 id=\"样式来源\"><a href=\"#样式来源\" class=\"headerlink\" title=\"样式来源\"></a>样式来源</h1><ul>\n<li>页面开发者</li>\n<li>用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载</li>\n<li>浏览器预设<ul>\n<li><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css\" target=\"_blank\" rel=\"noopener\">Mozilla Firefox 预设样式</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css\" target=\"_blank\" rel=\"noopener\">Google Chrome 预设样式</a></li>\n</ul>\n</li>\n<li>优先级： 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n<li>加了!important 的优先级：用户 important &gt; 开发者 important &gt; 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n</ul>\n<h1 id=\"默认值策略-Defaulting\"><a href=\"#默认值策略-Defaulting\" class=\"headerlink\" title=\"默认值策略 Defaulting\"></a>默认值策略 Defaulting</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>某些属性若不指定值，会自动继承父元素的 ！！！【计算值】</p>\n<h2 id=\"显示继承\"><a href=\"#显示继承\" class=\"headerlink\" title=\"显示继承\"></a>显示继承</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: inherit;</span><br><span class=\"line\">    <span class=\"comment\">/* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#xxx</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始值-initial\"><a href=\"#初始值-initial\" class=\"headerlink\" title=\"初始值 initial\"></a>初始值 initial</h2><ul>\n<li>CSS 中，每个属性都有一个初始值</li>\n<li>background-color 的初始值为 transparent</li>\n<li>margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同</li>\n<li>可以显式重置为初始值，比如 background-color: initial</li>\n<li>可以上 mdn 查初始值</li>\n</ul>\n<h1 id=\"CSS-求值过程\"><a href=\"#CSS-求值过程\" class=\"headerlink\" title=\"CSS 求值过程\"></a>CSS 求值过程</h1><h2 id=\"一个令人疑惑的很皮的-CSS-求值例子\"><a href=\"#一个令人疑惑的很皮的-CSS-求值例子\" class=\"headerlink\" title=\"一个令人疑惑的很皮的 CSS 求值例子\"></a>一个令人疑惑的很皮的 CSS 求值例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>卡尔斯巴德洞窟<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，</span><br><span class=\"line\">        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以</span><br><span class=\"line\">        通过电梯直接到达230米的洞穴深处。</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\">        line-height: 150%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为60px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为21px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    原因：</span></span><br><span class=\"line\"><span class=\"comment\">    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    总结：子元素继承到的是父元素的 计算值（一个绝对值）</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-求值详细过程\"><a href=\"#CSS-求值详细过程\" class=\"headerlink\" title=\"CSS 求值详细过程\"></a>CSS 求值详细过程</h2><ul>\n<li>filtering：有效选择器 有效属性值 符合 media ，筛选出所有<strong>声明值 Declared Values</strong></li>\n<li>cascading：选出优先级最高的一条声明，得到<strong>层叠值 Cascaded Value</strong></li>\n<li>defaulting：当层叠值为空时，用 继承 | 初始值，得到<strong>指定值 Specified Value</strong></li>\n<li>resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到<strong>计算值 Computed Value</strong></li>\n<li>formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到<strong>使用值 Used Value</strong></li>\n<li>constraining：将小数像素转为整数，得到<strong>实际值</strong></li>\n</ul>\n<h1 id=\"CSS-排版原理\"><a href=\"#CSS-排版原理\" class=\"headerlink\" title=\"CSS 排版原理\"></a>CSS 排版原理</h1><h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><h3 id=\"content-box：\"><a href=\"#content-box：\" class=\"headerlink\" title=\"content-box：\"></a>content-box：</h3><ul>\n<li>margin</li>\n<li>border</li>\n<li>padding</li>\n<li>content（width height）</li>\n</ul>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><ul>\n<li>margin</li>\n<li>border （width = border + padding + content_width）</li>\n<li>padding</li>\n<li>content</li>\n</ul>\n<h2 id=\"height-100-（一般不用\"><a href=\"#height-100-（一般不用\" class=\"headerlink\" title=\"height 100%（一般不用\"></a>height 100%（一般不用</h2><ul>\n<li>高度百分数，是相对于父元素的高度</li>\n<li>若父元素无高度，则百分比高度不生效</li>\n<li>用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度</li>\n</ul>\n<h2 id=\"padding-100\"><a href=\"#padding-100\" class=\"headerlink\" title=\"padding 100%\"></a>padding 100%</h2><ul>\n<li>padding 百分比值，不论是 padding top、left，都是相对于<strong>父元素宽度</strong></li>\n<li>应用：做固定宽高比的盒子.</li>\n</ul>\n<h2 id=\"margin-折叠\"><a href=\"#margin-折叠\" class=\"headerlink\" title=\"margin 折叠\"></a>margin 折叠</h2><p>上下相邻元素的间距会取其 margin 中较大值。</p>\n<h2 id=\"border：四条边不同颜色\"><a href=\"#border：四条边不同颜色\" class=\"headerlink\" title=\"border：四条边不同颜色\"></a>border：四条边不同颜色</h2><ul>\n<li>实际相邻的 border 交界处，是斜切的。</li>\n<li>当元素的 width height 为 0 时，会得到四个三角形</li>\n</ul>\n<h1 id=\"background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\"><a href=\"#background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\" class=\"headerlink\" title=\"background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\"></a>background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);</h1><h1 id=\"视觉格式化模型\"><a href=\"#视觉格式化模型\" class=\"headerlink\" title=\"视觉格式化模型\"></a>视觉格式化模型</h1><h2 id=\"Viewport-视口\"><a href=\"#Viewport-视口\" class=\"headerlink\" title=\"Viewport 视口\"></a>Viewport 视口</h2><p>浏览器的可视区域，所有元素都在 viewport 内</p>\n<h2 id=\"块级元素-Block-level-Elements\"><a href=\"#块级元素-Block-level-Elements\" class=\"headerlink\" title=\"块级元素(Block-level Elements)\"></a>块级元素(Block-level Elements)</h2><ul>\n<li>会被格式化成块状的元素</li>\n<li>例如 p、div、section 等</li>\n<li>将 display 设置为 block、list-item、table 会使元素变为块级</li>\n</ul>\n<h2 id=\"行内元素-Inline-level-Elements\"><a href=\"#行内元素-Inline-level-Elements\" class=\"headerlink\" title=\"行内元素(Inline-level Elements)\"></a>行内元素(Inline-level Elements)</h2><ul>\n<li>不会为其内容生成块级框</li>\n<li>让其内容分布在多行中</li>\n<li>display 设置为 inline、inline-block、inline-table 会使元素变为行级</li>\n</ul>\n<hr>\n<pre><code>“因为大佬比你知道的多”\n</code></pre>"},{"title":"Animate.css","date":"2018-01-31T16:00:00.000Z","description":"Animate.css是一个来自国外的 CSS3 动画库。","toc":1,"top":0,"_content":"\n## 功能\n\n-   它预设了抖动（shake）\n-   闪烁（flash）\n-   弹跳（bounce）\n-   翻转（flip）\n-   旋转（rotateIn/rotateOut）\n-   淡入淡出（fadeIn/fadeOut）\n-   等多达 60 多种动画效果\n\n## 浏览器兼容：\n\n    只兼容支持 CSS3 animate 属性的浏览器，\n    分别是：IE10+、Firefox、Chrome、Opera、Safari。\n\n## 引入文件\n\n    <link rel=\"stylesheet\" href=\"animate.min.css\">\n\n## 官网\n\n    [Animate.css](https://daneden.github.io/animate.css/)\n\n    [Github](https://github.com/daneden/animate.css)\n\n## 使用\n\n```\n\t<h1 class=\"animated infinite bounce delay-2s\">Example</h1>\n```\n\n-   首先给元素加上 animated 类\n-   第二个 infinate 使动画无限播放，可选\n-   第三个 bounce 是具体的动画效果名称，[全部动效演示](https://daneden.github.io/animate.css/)\n-   第四个 delay-2s 是动效延迟播放 2s，可选\n\n## 通过 Js,Jq 给元素添加 class：\n\n```\n\t$(function(){\n    \t$('#dowebok').addClass('animated bounce');\n\t});\n```\n\n## 更改 animate.css 的默认设置：\n\n```\n\t#dowebok {\n\t    animate-duration: 2s;    //动画持续时间\n\t    animate-delay: 1s;    //动画延迟时间\n\t    animate-iteration-count: 2;    //动画执行次数\n\t}\n\t//兼容各种浏览器代码，需要添加各浏览器前缀：\n\t#dowebok{\n          -webkit-animation-duration: 3s;\n          -webkit-animation-delay: 4s;\n          -webkit-animation-iteration-count: 5;\n\n          -moz-animation-duration: 3s;\n          -moz-animation-delay: 4s;\n          -moz-animation-iteration-count: 5;\n\n          -o-animation-duration: 3s;\n          -o-animation-delay: 4s;\n          -0-animation-iteration-count: 5;\n\n          -ms-animation-duration: 3s;\n          -ms-animation-delay: 4s;\n          -ms-animation-iteration-count:5;\n\n          animation-duration: 3s;\n          animation-delay: 4s;\n          animation-iteration-count: 5;\n\t}\n```\n\n## 动画结束触发函数：\n\n```js\n\t$(\".test\").click(function(){\n          $(this).addClass('animated fadeOut');\n\t});\n\tvar animateEnd=(function(el){\n\t    var animations={\n\t        animation:'animationend',\n\t        OAnimation:'oAnimationEnd',\n\t        MozAnimation:'mozAnimationEnd'\n\t        WebktiAnimation:'webkitAnimationEnd'\n\t    }\n\t    for(var i in animations){\n\t        if(el.style[i]!==undefined){\n\t            return animations[i]\n\t        }\n\t    }\n\t})(document.createElement('div'));//通过任意元素检测浏览器内核类型\n\t$('.test').one(animateEnd, doSomething);\n\t//$.one():为元素的特定事件绑定一个一次性的事件处理函数。\n```\n\n## 将以上过程整合为 Jq 扩展函数\n\n```\njq自定义函数\n$.fn.extend({\n    animateCss: function (animationName, callback) {\n        var animationEnd = (function (el) {\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n            };\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    return animations[t];\n                }\n            }\n        })(document.createElement('div'));\n        this.addClass('animated ' + animationName).one(animationEnd, function () {\n            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）\n            //eg.淡出、向左滑动等等，\n\t        //可能需要将 class 删除\n            $(this).removeClass('animated ' + animationName);\n            if (typeof callback === 'function') callback();\n        });\n        return this;\n    },\n});\n$('#yourElement').animateCss('bounce');\n$('#yourElement').animateCss('bounce', function () {\n    // 事件结束触发的函数\n});\n```\n\n---\n\n    为什么不自己写动画？\n    别人比你写的好啊小辣鸡。\n","source":"_posts/Animate.css.md","raw":"---\ntitle: Animate.css\ncategories:\n    - 02 CSS # 一级分类\ntags:\ndate: 2018-02-01\ndescription: Animate.css是一个来自国外的 CSS3 动画库。\ntoc: 1\ntop: 0\n---\n\n## 功能\n\n-   它预设了抖动（shake）\n-   闪烁（flash）\n-   弹跳（bounce）\n-   翻转（flip）\n-   旋转（rotateIn/rotateOut）\n-   淡入淡出（fadeIn/fadeOut）\n-   等多达 60 多种动画效果\n\n## 浏览器兼容：\n\n    只兼容支持 CSS3 animate 属性的浏览器，\n    分别是：IE10+、Firefox、Chrome、Opera、Safari。\n\n## 引入文件\n\n    <link rel=\"stylesheet\" href=\"animate.min.css\">\n\n## 官网\n\n    [Animate.css](https://daneden.github.io/animate.css/)\n\n    [Github](https://github.com/daneden/animate.css)\n\n## 使用\n\n```\n\t<h1 class=\"animated infinite bounce delay-2s\">Example</h1>\n```\n\n-   首先给元素加上 animated 类\n-   第二个 infinate 使动画无限播放，可选\n-   第三个 bounce 是具体的动画效果名称，[全部动效演示](https://daneden.github.io/animate.css/)\n-   第四个 delay-2s 是动效延迟播放 2s，可选\n\n## 通过 Js,Jq 给元素添加 class：\n\n```\n\t$(function(){\n    \t$('#dowebok').addClass('animated bounce');\n\t});\n```\n\n## 更改 animate.css 的默认设置：\n\n```\n\t#dowebok {\n\t    animate-duration: 2s;    //动画持续时间\n\t    animate-delay: 1s;    //动画延迟时间\n\t    animate-iteration-count: 2;    //动画执行次数\n\t}\n\t//兼容各种浏览器代码，需要添加各浏览器前缀：\n\t#dowebok{\n          -webkit-animation-duration: 3s;\n          -webkit-animation-delay: 4s;\n          -webkit-animation-iteration-count: 5;\n\n          -moz-animation-duration: 3s;\n          -moz-animation-delay: 4s;\n          -moz-animation-iteration-count: 5;\n\n          -o-animation-duration: 3s;\n          -o-animation-delay: 4s;\n          -0-animation-iteration-count: 5;\n\n          -ms-animation-duration: 3s;\n          -ms-animation-delay: 4s;\n          -ms-animation-iteration-count:5;\n\n          animation-duration: 3s;\n          animation-delay: 4s;\n          animation-iteration-count: 5;\n\t}\n```\n\n## 动画结束触发函数：\n\n```js\n\t$(\".test\").click(function(){\n          $(this).addClass('animated fadeOut');\n\t});\n\tvar animateEnd=(function(el){\n\t    var animations={\n\t        animation:'animationend',\n\t        OAnimation:'oAnimationEnd',\n\t        MozAnimation:'mozAnimationEnd'\n\t        WebktiAnimation:'webkitAnimationEnd'\n\t    }\n\t    for(var i in animations){\n\t        if(el.style[i]!==undefined){\n\t            return animations[i]\n\t        }\n\t    }\n\t})(document.createElement('div'));//通过任意元素检测浏览器内核类型\n\t$('.test').one(animateEnd, doSomething);\n\t//$.one():为元素的特定事件绑定一个一次性的事件处理函数。\n```\n\n## 将以上过程整合为 Jq 扩展函数\n\n```\njq自定义函数\n$.fn.extend({\n    animateCss: function (animationName, callback) {\n        var animationEnd = (function (el) {\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n            };\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    return animations[t];\n                }\n            }\n        })(document.createElement('div'));\n        this.addClass('animated ' + animationName).one(animationEnd, function () {\n            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）\n            //eg.淡出、向左滑动等等，\n\t        //可能需要将 class 删除\n            $(this).removeClass('animated ' + animationName);\n            if (typeof callback === 'function') callback();\n        });\n        return this;\n    },\n});\n$('#yourElement').animateCss('bounce');\n$('#yourElement').animateCss('bounce', function () {\n    // 事件结束触发的函数\n});\n```\n\n---\n\n    为什么不自己写动画？\n    别人比你写的好啊小辣鸡。\n","slug":"Animate.css","published":1,"updated":"2020-04-08T00:43:01.114Z","_id":"ck94a9aot000907s6lsjzxe1w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>它预设了抖动（shake）</li>\n<li>闪烁（flash）</li>\n<li>弹跳（bounce）</li>\n<li>翻转（flip）</li>\n<li>旋转（rotateIn/rotateOut）</li>\n<li>淡入淡出（fadeIn/fadeOut）</li>\n<li>等多达 60 多种动画效果</li>\n</ul>\n<h2 id=\"浏览器兼容：\"><a href=\"#浏览器兼容：\" class=\"headerlink\" title=\"浏览器兼容：\"></a>浏览器兼容：</h2><pre><code>只兼容支持 CSS3 animate 属性的浏览器，\n分别是：IE10+、Firefox、Chrome、Opera、Safari。\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;\n</code></pre><h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><pre><code>[Animate.css](https://daneden.github.io/animate.css/)\n\n[Github](https://github.com/daneden/animate.css)\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 class=&quot;animated infinite bounce delay-2s&quot;&gt;Example&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先给元素加上 animated 类</li>\n<li>第二个 infinate 使动画无限播放，可选</li>\n<li>第三个 bounce 是具体的动画效果名称，<a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">全部动效演示</a></li>\n<li>第四个 delay-2s 是动效延迟播放 2s，可选</li>\n</ul>\n<h2 id=\"通过-Js-Jq-给元素添加-class：\"><a href=\"#通过-Js-Jq-给元素添加-class：\" class=\"headerlink\" title=\"通过 Js,Jq 给元素添加 class：\"></a>通过 Js,Jq 给元素添加 class：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">   \t$(&apos;#dowebok&apos;).addClass(&apos;animated bounce&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更改-animate-css-的默认设置：\"><a href=\"#更改-animate-css-的默认设置：\" class=\"headerlink\" title=\"更改 animate.css 的默认设置：\"></a>更改 animate.css 的默认设置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dowebok &#123;</span><br><span class=\"line\">    animate-duration: 2s;    //动画持续时间</span><br><span class=\"line\">    animate-delay: 1s;    //动画延迟时间</span><br><span class=\"line\">    animate-iteration-count: 2;    //动画执行次数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//兼容各种浏览器代码，需要添加各浏览器前缀：</span><br><span class=\"line\">#dowebok&#123;</span><br><span class=\"line\">         -webkit-animation-duration: 3s;</span><br><span class=\"line\">         -webkit-animation-delay: 4s;</span><br><span class=\"line\">         -webkit-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -moz-animation-duration: 3s;</span><br><span class=\"line\">         -moz-animation-delay: 4s;</span><br><span class=\"line\">         -moz-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -o-animation-duration: 3s;</span><br><span class=\"line\">         -o-animation-delay: 4s;</span><br><span class=\"line\">         -0-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -ms-animation-duration: 3s;</span><br><span class=\"line\">         -ms-animation-delay: 4s;</span><br><span class=\"line\">         -ms-animation-iteration-count:5;</span><br><span class=\"line\"></span><br><span class=\"line\">         animation-duration: 3s;</span><br><span class=\"line\">         animation-delay: 4s;</span><br><span class=\"line\">         animation-iteration-count: 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动画结束触发函数：\"><a href=\"#动画结束触发函数：\" class=\"headerlink\" title=\"动画结束触发函数：\"></a>动画结束触发函数：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".test\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'animated fadeOut'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animateEnd=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animations=&#123;</span><br><span class=\"line\">        animation:<span class=\"string\">'animationend'</span>,</span><br><span class=\"line\">        OAnimation:<span class=\"string\">'oAnimationEnd'</span>,</span><br><span class=\"line\">        MozAnimation:<span class=\"string\">'mozAnimationEnd'</span></span><br><span class=\"line\">        WebktiAnimation:<span class=\"string\">'webkitAnimationEnd'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> animations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.style[i]!==<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> animations[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>));<span class=\"comment\">//通过任意元素检测浏览器内核类型</span></span><br><span class=\"line\">$(<span class=\"string\">'.test'</span>).one(animateEnd, doSomething);</span><br><span class=\"line\"><span class=\"comment\">//$.one():为元素的特定事件绑定一个一次性的事件处理函数。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将以上过程整合为-Jq-扩展函数\"><a href=\"#将以上过程整合为-Jq-扩展函数\" class=\"headerlink\" title=\"将以上过程整合为 Jq 扩展函数\"></a>将以上过程整合为 Jq 扩展函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jq自定义函数</span><br><span class=\"line\">$.fn.extend(&#123;</span><br><span class=\"line\">    animateCss: function (animationName, callback) &#123;</span><br><span class=\"line\">        var animationEnd = (function (el) &#123;</span><br><span class=\"line\">            var animations = &#123;</span><br><span class=\"line\">                animation: &apos;animationend&apos;,</span><br><span class=\"line\">                OAnimation: &apos;oAnimationEnd&apos;,</span><br><span class=\"line\">                MozAnimation: &apos;mozAnimationEnd&apos;,</span><br><span class=\"line\">                WebkitAnimation: &apos;webkitAnimationEnd&apos;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            for (var t in animations) &#123;</span><br><span class=\"line\">                if (el.style[t] !== undefined) &#123;</span><br><span class=\"line\">                    return animations[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(document.createElement(&apos;div&apos;));</span><br><span class=\"line\">        this.addClass(&apos;animated &apos; + animationName).one(animationEnd, function () &#123;</span><br><span class=\"line\">            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）</span><br><span class=\"line\">            //eg.淡出、向左滑动等等，</span><br><span class=\"line\">\t        //可能需要将 class 删除</span><br><span class=\"line\">            $(this).removeClass(&apos;animated &apos; + animationName);</span><br><span class=\"line\">            if (typeof callback === &apos;function&apos;) callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;, function () &#123;</span><br><span class=\"line\">    // 事件结束触发的函数</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>为什么不自己写动画？\n别人比你写的好啊小辣鸡。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>它预设了抖动（shake）</li>\n<li>闪烁（flash）</li>\n<li>弹跳（bounce）</li>\n<li>翻转（flip）</li>\n<li>旋转（rotateIn/rotateOut）</li>\n<li>淡入淡出（fadeIn/fadeOut）</li>\n<li>等多达 60 多种动画效果</li>\n</ul>\n<h2 id=\"浏览器兼容：\"><a href=\"#浏览器兼容：\" class=\"headerlink\" title=\"浏览器兼容：\"></a>浏览器兼容：</h2><pre><code>只兼容支持 CSS3 animate 属性的浏览器，\n分别是：IE10+、Firefox、Chrome、Opera、Safari。\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;\n</code></pre><h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><pre><code>[Animate.css](https://daneden.github.io/animate.css/)\n\n[Github](https://github.com/daneden/animate.css)\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 class=&quot;animated infinite bounce delay-2s&quot;&gt;Example&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先给元素加上 animated 类</li>\n<li>第二个 infinate 使动画无限播放，可选</li>\n<li>第三个 bounce 是具体的动画效果名称，<a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">全部动效演示</a></li>\n<li>第四个 delay-2s 是动效延迟播放 2s，可选</li>\n</ul>\n<h2 id=\"通过-Js-Jq-给元素添加-class：\"><a href=\"#通过-Js-Jq-给元素添加-class：\" class=\"headerlink\" title=\"通过 Js,Jq 给元素添加 class：\"></a>通过 Js,Jq 给元素添加 class：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">   \t$(&apos;#dowebok&apos;).addClass(&apos;animated bounce&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更改-animate-css-的默认设置：\"><a href=\"#更改-animate-css-的默认设置：\" class=\"headerlink\" title=\"更改 animate.css 的默认设置：\"></a>更改 animate.css 的默认设置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dowebok &#123;</span><br><span class=\"line\">    animate-duration: 2s;    //动画持续时间</span><br><span class=\"line\">    animate-delay: 1s;    //动画延迟时间</span><br><span class=\"line\">    animate-iteration-count: 2;    //动画执行次数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//兼容各种浏览器代码，需要添加各浏览器前缀：</span><br><span class=\"line\">#dowebok&#123;</span><br><span class=\"line\">         -webkit-animation-duration: 3s;</span><br><span class=\"line\">         -webkit-animation-delay: 4s;</span><br><span class=\"line\">         -webkit-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -moz-animation-duration: 3s;</span><br><span class=\"line\">         -moz-animation-delay: 4s;</span><br><span class=\"line\">         -moz-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -o-animation-duration: 3s;</span><br><span class=\"line\">         -o-animation-delay: 4s;</span><br><span class=\"line\">         -0-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -ms-animation-duration: 3s;</span><br><span class=\"line\">         -ms-animation-delay: 4s;</span><br><span class=\"line\">         -ms-animation-iteration-count:5;</span><br><span class=\"line\"></span><br><span class=\"line\">         animation-duration: 3s;</span><br><span class=\"line\">         animation-delay: 4s;</span><br><span class=\"line\">         animation-iteration-count: 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动画结束触发函数：\"><a href=\"#动画结束触发函数：\" class=\"headerlink\" title=\"动画结束触发函数：\"></a>动画结束触发函数：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".test\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'animated fadeOut'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animateEnd=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animations=&#123;</span><br><span class=\"line\">        animation:<span class=\"string\">'animationend'</span>,</span><br><span class=\"line\">        OAnimation:<span class=\"string\">'oAnimationEnd'</span>,</span><br><span class=\"line\">        MozAnimation:<span class=\"string\">'mozAnimationEnd'</span></span><br><span class=\"line\">        WebktiAnimation:<span class=\"string\">'webkitAnimationEnd'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> animations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.style[i]!==<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> animations[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>));<span class=\"comment\">//通过任意元素检测浏览器内核类型</span></span><br><span class=\"line\">$(<span class=\"string\">'.test'</span>).one(animateEnd, doSomething);</span><br><span class=\"line\"><span class=\"comment\">//$.one():为元素的特定事件绑定一个一次性的事件处理函数。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将以上过程整合为-Jq-扩展函数\"><a href=\"#将以上过程整合为-Jq-扩展函数\" class=\"headerlink\" title=\"将以上过程整合为 Jq 扩展函数\"></a>将以上过程整合为 Jq 扩展函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jq自定义函数</span><br><span class=\"line\">$.fn.extend(&#123;</span><br><span class=\"line\">    animateCss: function (animationName, callback) &#123;</span><br><span class=\"line\">        var animationEnd = (function (el) &#123;</span><br><span class=\"line\">            var animations = &#123;</span><br><span class=\"line\">                animation: &apos;animationend&apos;,</span><br><span class=\"line\">                OAnimation: &apos;oAnimationEnd&apos;,</span><br><span class=\"line\">                MozAnimation: &apos;mozAnimationEnd&apos;,</span><br><span class=\"line\">                WebkitAnimation: &apos;webkitAnimationEnd&apos;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            for (var t in animations) &#123;</span><br><span class=\"line\">                if (el.style[t] !== undefined) &#123;</span><br><span class=\"line\">                    return animations[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(document.createElement(&apos;div&apos;));</span><br><span class=\"line\">        this.addClass(&apos;animated &apos; + animationName).one(animationEnd, function () &#123;</span><br><span class=\"line\">            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）</span><br><span class=\"line\">            //eg.淡出、向左滑动等等，</span><br><span class=\"line\">\t        //可能需要将 class 删除</span><br><span class=\"line\">            $(this).removeClass(&apos;animated &apos; + animationName);</span><br><span class=\"line\">            if (typeof callback === &apos;function&apos;) callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;, function () &#123;</span><br><span class=\"line\">    // 事件结束触发的函数</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>为什么不自己写动画？\n别人比你写的好啊小辣鸡。\n</code></pre>"},{"title":"《断舍离》读书输出","date":"2019-08-04T16:00:00.000Z","description":"在极简极致的生活中了解自我，认识自我，找到自己真正想做的事情。","toc":1,"top":0,"_content":"\n## 断舍离是什么\n断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法\n\n## ‌如何做到断舍离\n- 断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西\n- 舍（行为）:舍弃自己的世界里既有的破烂（clutter）\n- 离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间\n\n## ‌用湖泊比喻生活\n- 断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力\n- 舍:让不需要的东西流出\n\n这样才能让生活保持新鲜，清静。\n\n## ‌断舍离的灵魂一问\n`自己` `当下` 是否需要？\n\n- 断舍离的主角:自己\n- 断舍离的时间轴:当下\n\n## ‌断舍离vs收纳\n断舍离是对进入/留存在自己世界中的物品进行筛选（先）\n\n收纳是对已有物品的整理（后）\n\n通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在\n\n## ‌为什么我们的生活里满是杂物\n- 捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）\n- 执念于过去，念旧，舍不得（时间轴错位）\n- 囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）\n- 不想收拾不想改变（懒）\n\n## ‌断舍离是令人愉悦的\n通过断舍物品，完成自我发现，自我肯定的过程\n\n## 物品的真正价值\n任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是`最少量最好用`的。\n\n## ‌“拥有物品”是个伪命题\n人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。\n\n物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。\n\n因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。\n\n## 七、五、一总量限制原则\n`七`:柜子等`看不见的`收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。\n\n`五`:`看得见的收纳`只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。\n\n`一`:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。\n\n`总量限制替换原则`：当收纳超出`七五一原则`时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品\n\n## ‌单一动作原则\n收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来\n\n## ‌自立原则\n收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出\n\n\n\n","source":"_posts/Danshari.md","raw":"---\ntitle: 《断舍离》读书输出\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\ndate: 2019-08-05\ndescription: 在极简极致的生活中了解自我，认识自我，找到自己真正想做的事情。\ntoc: 1\ntop: 0\n---\n\n## 断舍离是什么\n断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法\n\n## ‌如何做到断舍离\n- 断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西\n- 舍（行为）:舍弃自己的世界里既有的破烂（clutter）\n- 离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间\n\n## ‌用湖泊比喻生活\n- 断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力\n- 舍:让不需要的东西流出\n\n这样才能让生活保持新鲜，清静。\n\n## ‌断舍离的灵魂一问\n`自己` `当下` 是否需要？\n\n- 断舍离的主角:自己\n- 断舍离的时间轴:当下\n\n## ‌断舍离vs收纳\n断舍离是对进入/留存在自己世界中的物品进行筛选（先）\n\n收纳是对已有物品的整理（后）\n\n通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在\n\n## ‌为什么我们的生活里满是杂物\n- 捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）\n- 执念于过去，念旧，舍不得（时间轴错位）\n- 囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）\n- 不想收拾不想改变（懒）\n\n## ‌断舍离是令人愉悦的\n通过断舍物品，完成自我发现，自我肯定的过程\n\n## 物品的真正价值\n任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是`最少量最好用`的。\n\n## ‌“拥有物品”是个伪命题\n人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。\n\n物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。\n\n因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。\n\n## 七、五、一总量限制原则\n`七`:柜子等`看不见的`收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。\n\n`五`:`看得见的收纳`只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。\n\n`一`:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。\n\n`总量限制替换原则`：当收纳超出`七五一原则`时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品\n\n## ‌单一动作原则\n收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来\n\n## ‌自立原则\n收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出\n\n\n\n","slug":"Danshari","published":1,"updated":"2019-12-12T09:21:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck94a9aou000b07s663y8293d","content":"<h2 id=\"断舍离是什么\"><a href=\"#断舍离是什么\" class=\"headerlink\" title=\"断舍离是什么\"></a>断舍离是什么</h2><p>断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法</p>\n<h2 id=\"‌如何做到断舍离\"><a href=\"#‌如何做到断舍离\" class=\"headerlink\" title=\"‌如何做到断舍离\"></a>‌如何做到断舍离</h2><ul>\n<li>断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西</li>\n<li>舍（行为）:舍弃自己的世界里既有的破烂（clutter）</li>\n<li>离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间</li>\n</ul>\n<h2 id=\"‌用湖泊比喻生活\"><a href=\"#‌用湖泊比喻生活\" class=\"headerlink\" title=\"‌用湖泊比喻生活\"></a>‌用湖泊比喻生活</h2><ul>\n<li>断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力</li>\n<li>舍:让不需要的东西流出</li>\n</ul>\n<p>这样才能让生活保持新鲜，清静。</p>\n<h2 id=\"‌断舍离的灵魂一问\"><a href=\"#‌断舍离的灵魂一问\" class=\"headerlink\" title=\"‌断舍离的灵魂一问\"></a>‌断舍离的灵魂一问</h2><p><code>自己</code> <code>当下</code> 是否需要？</p>\n<ul>\n<li>断舍离的主角:自己</li>\n<li>断舍离的时间轴:当下</li>\n</ul>\n<h2 id=\"‌断舍离vs收纳\"><a href=\"#‌断舍离vs收纳\" class=\"headerlink\" title=\"‌断舍离vs收纳\"></a>‌断舍离vs收纳</h2><p>断舍离是对进入/留存在自己世界中的物品进行筛选（先）</p>\n<p>收纳是对已有物品的整理（后）</p>\n<p>通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在</p>\n<h2 id=\"‌为什么我们的生活里满是杂物\"><a href=\"#‌为什么我们的生活里满是杂物\" class=\"headerlink\" title=\"‌为什么我们的生活里满是杂物\"></a>‌为什么我们的生活里满是杂物</h2><ul>\n<li>捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）</li>\n<li>执念于过去，念旧，舍不得（时间轴错位）</li>\n<li>囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）</li>\n<li>不想收拾不想改变（懒）</li>\n</ul>\n<h2 id=\"‌断舍离是令人愉悦的\"><a href=\"#‌断舍离是令人愉悦的\" class=\"headerlink\" title=\"‌断舍离是令人愉悦的\"></a>‌断舍离是令人愉悦的</h2><p>通过断舍物品，完成自我发现，自我肯定的过程</p>\n<h2 id=\"物品的真正价值\"><a href=\"#物品的真正价值\" class=\"headerlink\" title=\"物品的真正价值\"></a>物品的真正价值</h2><p>任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是<code>最少量最好用</code>的。</p>\n<h2 id=\"‌“拥有物品”是个伪命题\"><a href=\"#‌“拥有物品”是个伪命题\" class=\"headerlink\" title=\"‌“拥有物品”是个伪命题\"></a>‌“拥有物品”是个伪命题</h2><p>人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。</p>\n<p>物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。</p>\n<p>因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。</p>\n<h2 id=\"七、五、一总量限制原则\"><a href=\"#七、五、一总量限制原则\" class=\"headerlink\" title=\"七、五、一总量限制原则\"></a>七、五、一总量限制原则</h2><p><code>七</code>:柜子等<code>看不见的</code>收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。</p>\n<p><code>五</code>:<code>看得见的收纳</code>只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。</p>\n<p><code>一</code>:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。</p>\n<p><code>总量限制替换原则</code>：当收纳超出<code>七五一原则</code>时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品</p>\n<h2 id=\"‌单一动作原则\"><a href=\"#‌单一动作原则\" class=\"headerlink\" title=\"‌单一动作原则\"></a>‌单一动作原则</h2><p>收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来</p>\n<h2 id=\"‌自立原则\"><a href=\"#‌自立原则\" class=\"headerlink\" title=\"‌自立原则\"></a>‌自立原则</h2><p>收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"断舍离是什么\"><a href=\"#断舍离是什么\" class=\"headerlink\" title=\"断舍离是什么\"></a>断舍离是什么</h2><p>断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法</p>\n<h2 id=\"‌如何做到断舍离\"><a href=\"#‌如何做到断舍离\" class=\"headerlink\" title=\"‌如何做到断舍离\"></a>‌如何做到断舍离</h2><ul>\n<li>断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西</li>\n<li>舍（行为）:舍弃自己的世界里既有的破烂（clutter）</li>\n<li>离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间</li>\n</ul>\n<h2 id=\"‌用湖泊比喻生活\"><a href=\"#‌用湖泊比喻生活\" class=\"headerlink\" title=\"‌用湖泊比喻生活\"></a>‌用湖泊比喻生活</h2><ul>\n<li>断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力</li>\n<li>舍:让不需要的东西流出</li>\n</ul>\n<p>这样才能让生活保持新鲜，清静。</p>\n<h2 id=\"‌断舍离的灵魂一问\"><a href=\"#‌断舍离的灵魂一问\" class=\"headerlink\" title=\"‌断舍离的灵魂一问\"></a>‌断舍离的灵魂一问</h2><p><code>自己</code> <code>当下</code> 是否需要？</p>\n<ul>\n<li>断舍离的主角:自己</li>\n<li>断舍离的时间轴:当下</li>\n</ul>\n<h2 id=\"‌断舍离vs收纳\"><a href=\"#‌断舍离vs收纳\" class=\"headerlink\" title=\"‌断舍离vs收纳\"></a>‌断舍离vs收纳</h2><p>断舍离是对进入/留存在自己世界中的物品进行筛选（先）</p>\n<p>收纳是对已有物品的整理（后）</p>\n<p>通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在</p>\n<h2 id=\"‌为什么我们的生活里满是杂物\"><a href=\"#‌为什么我们的生活里满是杂物\" class=\"headerlink\" title=\"‌为什么我们的生活里满是杂物\"></a>‌为什么我们的生活里满是杂物</h2><ul>\n<li>捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）</li>\n<li>执念于过去，念旧，舍不得（时间轴错位）</li>\n<li>囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）</li>\n<li>不想收拾不想改变（懒）</li>\n</ul>\n<h2 id=\"‌断舍离是令人愉悦的\"><a href=\"#‌断舍离是令人愉悦的\" class=\"headerlink\" title=\"‌断舍离是令人愉悦的\"></a>‌断舍离是令人愉悦的</h2><p>通过断舍物品，完成自我发现，自我肯定的过程</p>\n<h2 id=\"物品的真正价值\"><a href=\"#物品的真正价值\" class=\"headerlink\" title=\"物品的真正价值\"></a>物品的真正价值</h2><p>任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是<code>最少量最好用</code>的。</p>\n<h2 id=\"‌“拥有物品”是个伪命题\"><a href=\"#‌“拥有物品”是个伪命题\" class=\"headerlink\" title=\"‌“拥有物品”是个伪命题\"></a>‌“拥有物品”是个伪命题</h2><p>人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。</p>\n<p>物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。</p>\n<p>因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。</p>\n<h2 id=\"七、五、一总量限制原则\"><a href=\"#七、五、一总量限制原则\" class=\"headerlink\" title=\"七、五、一总量限制原则\"></a>七、五、一总量限制原则</h2><p><code>七</code>:柜子等<code>看不见的</code>收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。</p>\n<p><code>五</code>:<code>看得见的收纳</code>只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。</p>\n<p><code>一</code>:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。</p>\n<p><code>总量限制替换原则</code>：当收纳超出<code>七五一原则</code>时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品</p>\n<h2 id=\"‌单一动作原则\"><a href=\"#‌单一动作原则\" class=\"headerlink\" title=\"‌单一动作原则\"></a>‌单一动作原则</h2><p>收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来</p>\n<h2 id=\"‌自立原则\"><a href=\"#‌自立原则\" class=\"headerlink\" title=\"‌自立原则\"></a>‌自立原则</h2><p>收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出</p>\n"},{"title":"ES6编程风格&最佳实践","date":"2019-11-05T16:00:00.000Z","description":"遵守一定的规范和统一的风格写代码，是程序猿的基本素养😺","toc":1,"top":0,"_content":"\n## 块级作用域\n- `let`完全取代`var`\n- let和const**优先const**:\n  - 函数式编程思想，运算不改变值，只是新建值\n  - 防止了无意间修改变量值所导致的错误\n  - 有利于将来的分布式运算\n  - JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率\n\n## 字符串\n- 静态一律用单引号/反引号\n- 动态使用反引号\n- **不使用双引号**\n\n## 解构赋值\n- 从数组取值给变量时，优先用**数组解构**\n- 函数参数是对象属性，优先用**对象解构**\n- 函数有多个返回值时，优先用**对象解构**\n\n## 对象\n- 单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾\n- 对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 **Object.assign** 方法\n- 对象有动态属性名：用属性名表达式 **[表达式]** \n- 对象的属性和方法，尽量用**简洁表达式**，易于书写和描述\n\n## 数组\n- 拷贝数组：用 **...** 扩展运算符\n- 类数组对象转数组：用**Array.from**方法\n\n## 函数\n- 立即执行函数：用箭头函数\n- 匿名函数：用箭头函数\n- 简单的、单行的、不会复用的函数：用箭头函数\n- 用箭头函数取代**Function.prototype.bind**\n- 不再用 `_this/that/self/sf`去绑定this\n- 不在函数体内用 **arguments**变量，用**rest运算符**`...`代替\n- 用**默认值语法**设置函数参数\n\n## Map和Object\n- 只有模拟现实世界的对象时，采用`Object`\n- 只需要`key:value`数据结构时，就用`Map`\n\n## Class和prototype\n- 尽量用Class取代需要prototype的操作，更易书写和便于理解\n- 用`extends`实现继承，更简单，不会使instanceof运算有风险\n\n## Module\n- Module语法使ES的标准写法\n- 用import代替require\n- 用export代替module.exports\n- 如果模块只有一个输出值，就用default,否则别用\n- export default和export不要混合使用\n- 模块输出的函数，函数名首字母应该用小写\n\n## 使用ESLint\n- 安装 ESLint\n- 安装 Airbnb 等语法规则，以及 import、a11y、react 等插件\n- 在项目的根目录下新建一个`.eslintrc`文件，配置 ESLint\n","source":"_posts/ES6 Code Style.md","raw":"---\ntitle: ES6编程风格&最佳实践\ncategories:\n    - 03 JavaScript # 一级分类\ntags:\n    - ES\ndate: 2019-11-06\ndescription: 遵守一定的规范和统一的风格写代码，是程序猿的基本素养😺\ntoc: 1\ntop: 0\n---\n\n## 块级作用域\n- `let`完全取代`var`\n- let和const**优先const**:\n  - 函数式编程思想，运算不改变值，只是新建值\n  - 防止了无意间修改变量值所导致的错误\n  - 有利于将来的分布式运算\n  - JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率\n\n## 字符串\n- 静态一律用单引号/反引号\n- 动态使用反引号\n- **不使用双引号**\n\n## 解构赋值\n- 从数组取值给变量时，优先用**数组解构**\n- 函数参数是对象属性，优先用**对象解构**\n- 函数有多个返回值时，优先用**对象解构**\n\n## 对象\n- 单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾\n- 对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 **Object.assign** 方法\n- 对象有动态属性名：用属性名表达式 **[表达式]** \n- 对象的属性和方法，尽量用**简洁表达式**，易于书写和描述\n\n## 数组\n- 拷贝数组：用 **...** 扩展运算符\n- 类数组对象转数组：用**Array.from**方法\n\n## 函数\n- 立即执行函数：用箭头函数\n- 匿名函数：用箭头函数\n- 简单的、单行的、不会复用的函数：用箭头函数\n- 用箭头函数取代**Function.prototype.bind**\n- 不再用 `_this/that/self/sf`去绑定this\n- 不在函数体内用 **arguments**变量，用**rest运算符**`...`代替\n- 用**默认值语法**设置函数参数\n\n## Map和Object\n- 只有模拟现实世界的对象时，采用`Object`\n- 只需要`key:value`数据结构时，就用`Map`\n\n## Class和prototype\n- 尽量用Class取代需要prototype的操作，更易书写和便于理解\n- 用`extends`实现继承，更简单，不会使instanceof运算有风险\n\n## Module\n- Module语法使ES的标准写法\n- 用import代替require\n- 用export代替module.exports\n- 如果模块只有一个输出值，就用default,否则别用\n- export default和export不要混合使用\n- 模块输出的函数，函数名首字母应该用小写\n\n## 使用ESLint\n- 安装 ESLint\n- 安装 Airbnb 等语法规则，以及 import、a11y、react 等插件\n- 在项目的根目录下新建一个`.eslintrc`文件，配置 ESLint\n","slug":"ES6 Code Style","published":1,"updated":"2020-04-08T00:43:01.117Z","_id":"ck94a9aox000g07s60jyz77sl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><ul>\n<li><code>let</code>完全取代<code>var</code></li>\n<li>let和const<strong>优先const</strong>:<ul>\n<li>函数式编程思想，运算不改变值，只是新建值</li>\n<li>防止了无意间修改变量值所导致的错误</li>\n<li>有利于将来的分布式运算</li>\n<li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>静态一律用单引号/反引号</li>\n<li>动态使用反引号</li>\n<li><strong>不使用双引号</strong></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li>从数组取值给变量时，优先用<strong>数组解构</strong></li>\n<li>函数参数是对象属性，优先用<strong>对象解构</strong></li>\n<li>函数有多个返回值时，优先用<strong>对象解构</strong></li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾</li>\n<li>对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 <strong>Object.assign</strong> 方法</li>\n<li>对象有动态属性名：用属性名表达式 <strong>[表达式]</strong> </li>\n<li>对象的属性和方法，尽量用<strong>简洁表达式</strong>，易于书写和描述</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>拷贝数组：用 <strong>…</strong> 扩展运算符</li>\n<li>类数组对象转数组：用<strong>Array.from</strong>方法</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>立即执行函数：用箭头函数</li>\n<li>匿名函数：用箭头函数</li>\n<li>简单的、单行的、不会复用的函数：用箭头函数</li>\n<li>用箭头函数取代<strong>Function.prototype.bind</strong></li>\n<li>不再用 <code>_this/that/self/sf</code>去绑定this</li>\n<li>不在函数体内用 <strong>arguments</strong>变量，用<strong>rest运算符</strong><code>...</code>代替</li>\n<li>用<strong>默认值语法</strong>设置函数参数</li>\n</ul>\n<h2 id=\"Map和Object\"><a href=\"#Map和Object\" class=\"headerlink\" title=\"Map和Object\"></a>Map和Object</h2><ul>\n<li>只有模拟现实世界的对象时，采用<code>Object</code></li>\n<li>只需要<code>key:value</code>数据结构时，就用<code>Map</code></li>\n</ul>\n<h2 id=\"Class和prototype\"><a href=\"#Class和prototype\" class=\"headerlink\" title=\"Class和prototype\"></a>Class和prototype</h2><ul>\n<li>尽量用Class取代需要prototype的操作，更易书写和便于理解</li>\n<li>用<code>extends</code>实现继承，更简单，不会使instanceof运算有风险</li>\n</ul>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><ul>\n<li>Module语法使ES的标准写法</li>\n<li>用import代替require</li>\n<li>用export代替module.exports</li>\n<li>如果模块只有一个输出值，就用default,否则别用</li>\n<li>export default和export不要混合使用</li>\n<li>模块输出的函数，函数名首字母应该用小写</li>\n</ul>\n<h2 id=\"使用ESLint\"><a href=\"#使用ESLint\" class=\"headerlink\" title=\"使用ESLint\"></a>使用ESLint</h2><ul>\n<li>安装 ESLint</li>\n<li>安装 Airbnb 等语法规则，以及 import、a11y、react 等插件</li>\n<li>在项目的根目录下新建一个<code>.eslintrc</code>文件，配置 ESLint</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><ul>\n<li><code>let</code>完全取代<code>var</code></li>\n<li>let和const<strong>优先const</strong>:<ul>\n<li>函数式编程思想，运算不改变值，只是新建值</li>\n<li>防止了无意间修改变量值所导致的错误</li>\n<li>有利于将来的分布式运算</li>\n<li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>静态一律用单引号/反引号</li>\n<li>动态使用反引号</li>\n<li><strong>不使用双引号</strong></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li>从数组取值给变量时，优先用<strong>数组解构</strong></li>\n<li>函数参数是对象属性，优先用<strong>对象解构</strong></li>\n<li>函数有多个返回值时，优先用<strong>对象解构</strong></li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾</li>\n<li>对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 <strong>Object.assign</strong> 方法</li>\n<li>对象有动态属性名：用属性名表达式 <strong>[表达式]</strong> </li>\n<li>对象的属性和方法，尽量用<strong>简洁表达式</strong>，易于书写和描述</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>拷贝数组：用 <strong>…</strong> 扩展运算符</li>\n<li>类数组对象转数组：用<strong>Array.from</strong>方法</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>立即执行函数：用箭头函数</li>\n<li>匿名函数：用箭头函数</li>\n<li>简单的、单行的、不会复用的函数：用箭头函数</li>\n<li>用箭头函数取代<strong>Function.prototype.bind</strong></li>\n<li>不再用 <code>_this/that/self/sf</code>去绑定this</li>\n<li>不在函数体内用 <strong>arguments</strong>变量，用<strong>rest运算符</strong><code>...</code>代替</li>\n<li>用<strong>默认值语法</strong>设置函数参数</li>\n</ul>\n<h2 id=\"Map和Object\"><a href=\"#Map和Object\" class=\"headerlink\" title=\"Map和Object\"></a>Map和Object</h2><ul>\n<li>只有模拟现实世界的对象时，采用<code>Object</code></li>\n<li>只需要<code>key:value</code>数据结构时，就用<code>Map</code></li>\n</ul>\n<h2 id=\"Class和prototype\"><a href=\"#Class和prototype\" class=\"headerlink\" title=\"Class和prototype\"></a>Class和prototype</h2><ul>\n<li>尽量用Class取代需要prototype的操作，更易书写和便于理解</li>\n<li>用<code>extends</code>实现继承，更简单，不会使instanceof运算有风险</li>\n</ul>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><ul>\n<li>Module语法使ES的标准写法</li>\n<li>用import代替require</li>\n<li>用export代替module.exports</li>\n<li>如果模块只有一个输出值，就用default,否则别用</li>\n<li>export default和export不要混合使用</li>\n<li>模块输出的函数，函数名首字母应该用小写</li>\n</ul>\n<h2 id=\"使用ESLint\"><a href=\"#使用ESLint\" class=\"headerlink\" title=\"使用ESLint\"></a>使用ESLint</h2><ul>\n<li>安装 ESLint</li>\n<li>安装 Airbnb 等语法规则，以及 import、a11y、react 等插件</li>\n<li>在项目的根目录下新建一个<code>.eslintrc</code>文件，配置 ESLint</li>\n</ul>\n"},{"title":"Fullpage.js","date":"2018-04-18T16:00:00.000Z","description":"fullPage.js 是一个基于 jQuery 的插件。","toc":1,"top":0,"_content":"\n## 主要功能有：\n\n-   支持鼠标滚动\n-   支持前进后退和键盘控制\n-   多个回调函数\n-   支持手机、平板触摸事件\n-   支持 CSS3 动画\n-   支持窗口缩放\n-   窗口缩放时自动调整\n-   可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等\n\n## 兼容性\n\n    jQuery 兼容:\n    兼容 jQuery 1.7+。\n\n    浏览器兼容:\n    IE8+ ✔\tChrome ✔\tFirefox ✔\tOpera ✔\tSafari ✔\n\n## 引入文件\n\n```\n<link rel=\"stylesheet\" href=\"css/jquery.fullPage.css\">\n<script src=\"js/jquery.fullPage.js\"></script>\n<script src=\"js/jquery.min.js\"></script>\n<!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 -->\n<script src=\"js/jquery.easings.min.js\"></script>\n<!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 -->\n<script src=\"js/jquery.slimscroll.min.js\"></script>\n```\n\n## HTML\n\n```\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">\n\t        <h3>第一屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第二屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第三屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第四屏</h3>\n\t    </div>\n\t</div>\n\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：\n\n\t<div class=\"section active\">第三屏</div>\n\n\t同时，可以在 section 内加入 slide，如：\n\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">第一屏</div>\n\t    <div class=\"section\">第二屏</div>\n\t    <div class=\"section\">\n\t        <div class=\"slide\">第三屏的第一屏</div>\n\t        <div class=\"slide\">第三屏的第二屏</div>\n\t        <div class=\"slide\">第三屏的第三屏</div>\n\t        <div class=\"slide\">第三屏的第四屏</div>\n\t    </div>\n\t    <div class=\"section\">第四屏</div>\n\t</div>\n\n### JavaScript\n``\n\t$(function(){\n\t    $('#dowebok').fullpage();\n\t});\n```\n\n## 详细配置见官方文档\n\n[Fullpage.js-Github](https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs)\n\n---\n\n    皮不动了...\n","source":"_posts/Fullpage.js.md","raw":"---\ntitle: Fullpage.js\ncategories:\n    - 07 工具库 # 一级分类\ntags:\ndate: 2018-04-19\ndescription: fullPage.js 是一个基于 jQuery 的插件。\ntoc: 1\ntop: 0\n---\n\n## 主要功能有：\n\n-   支持鼠标滚动\n-   支持前进后退和键盘控制\n-   多个回调函数\n-   支持手机、平板触摸事件\n-   支持 CSS3 动画\n-   支持窗口缩放\n-   窗口缩放时自动调整\n-   可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等\n\n## 兼容性\n\n    jQuery 兼容:\n    兼容 jQuery 1.7+。\n\n    浏览器兼容:\n    IE8+ ✔\tChrome ✔\tFirefox ✔\tOpera ✔\tSafari ✔\n\n## 引入文件\n\n```\n<link rel=\"stylesheet\" href=\"css/jquery.fullPage.css\">\n<script src=\"js/jquery.fullPage.js\"></script>\n<script src=\"js/jquery.min.js\"></script>\n<!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 -->\n<script src=\"js/jquery.easings.min.js\"></script>\n<!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 -->\n<script src=\"js/jquery.slimscroll.min.js\"></script>\n```\n\n## HTML\n\n```\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">\n\t        <h3>第一屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第二屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第三屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第四屏</h3>\n\t    </div>\n\t</div>\n\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：\n\n\t<div class=\"section active\">第三屏</div>\n\n\t同时，可以在 section 内加入 slide，如：\n\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">第一屏</div>\n\t    <div class=\"section\">第二屏</div>\n\t    <div class=\"section\">\n\t        <div class=\"slide\">第三屏的第一屏</div>\n\t        <div class=\"slide\">第三屏的第二屏</div>\n\t        <div class=\"slide\">第三屏的第三屏</div>\n\t        <div class=\"slide\">第三屏的第四屏</div>\n\t    </div>\n\t    <div class=\"section\">第四屏</div>\n\t</div>\n\n### JavaScript\n``\n\t$(function(){\n\t    $('#dowebok').fullpage();\n\t});\n```\n\n## 详细配置见官方文档\n\n[Fullpage.js-Github](https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs)\n\n---\n\n    皮不动了...\n","slug":"Fullpage.js","published":1,"updated":"2020-04-08T00:43:01.117Z","_id":"ck94a9aoy000i07s6o2ucj0sl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"主要功能有：\"><a href=\"#主要功能有：\" class=\"headerlink\" title=\"主要功能有：\"></a>主要功能有：</h2><ul>\n<li>支持鼠标滚动</li>\n<li>支持前进后退和键盘控制</li>\n<li>多个回调函数</li>\n<li>支持手机、平板触摸事件</li>\n<li>支持 CSS3 动画</li>\n<li>支持窗口缩放</li>\n<li>窗口缩放时自动调整</li>\n<li>可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><pre><code>jQuery 兼容:\n兼容 jQuery 1.7+。\n\n浏览器兼容:\nIE8+ ✔    Chrome ✔    Firefox ✔    Opera ✔    Safari ✔\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.slimscroll.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第一屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第二屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第三屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第四屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div class=&quot;section active&quot;&gt;第三屏&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t同时，可以在 section 内加入 slide，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### JavaScript</span><br><span class=\"line\">``</span><br><span class=\"line\">\t$(function()&#123;</span><br><span class=\"line\">\t    $(&apos;#dowebok&apos;).fullpage();</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细配置见官方文档\"><a href=\"#详细配置见官方文档\" class=\"headerlink\" title=\"详细配置见官方文档\"></a>详细配置见官方文档</h2><p><a href=\"https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs\" target=\"_blank\" rel=\"noopener\">Fullpage.js-Github</a></p>\n<hr>\n<pre><code>皮不动了...\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要功能有：\"><a href=\"#主要功能有：\" class=\"headerlink\" title=\"主要功能有：\"></a>主要功能有：</h2><ul>\n<li>支持鼠标滚动</li>\n<li>支持前进后退和键盘控制</li>\n<li>多个回调函数</li>\n<li>支持手机、平板触摸事件</li>\n<li>支持 CSS3 动画</li>\n<li>支持窗口缩放</li>\n<li>窗口缩放时自动调整</li>\n<li>可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><pre><code>jQuery 兼容:\n兼容 jQuery 1.7+。\n\n浏览器兼容:\nIE8+ ✔    Chrome ✔    Firefox ✔    Opera ✔    Safari ✔\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.slimscroll.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第一屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第二屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第三屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第四屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div class=&quot;section active&quot;&gt;第三屏&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t同时，可以在 section 内加入 slide，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### JavaScript</span><br><span class=\"line\">``</span><br><span class=\"line\">\t$(function()&#123;</span><br><span class=\"line\">\t    $(&apos;#dowebok&apos;).fullpage();</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细配置见官方文档\"><a href=\"#详细配置见官方文档\" class=\"headerlink\" title=\"详细配置见官方文档\"></a>详细配置见官方文档</h2><p><a href=\"https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs\" target=\"_blank\" rel=\"noopener\">Fullpage.js-Github</a></p>\n<hr>\n<pre><code>皮不动了...\n</code></pre>"},{"title":"古老神奇的table","date":"2018-08-28T16:00:00.000Z","description":"凭什么table能兼容IE6？","toc":1,"top":0,"_content":"\n# 结构\n\n```html\n<table>\n  <caption>表格上方的居中标题</caption>\n  <colgroup>\n    <col span=\"2\" style=\"\">\n    <col style=\"\">\n  </colgroup>\n  <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n        <th>Price</th>\n      </tr>\n  </thead>\n  <tody>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tbody>\n  <tfoot>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tfoot>\n</table>\n```\n\n# 标签\n\n```\n<caption>、<col>、<colgroup>、<thead>、<tfoot> 以及 <tbody>\n```\n\n# `<caption>标题`\n\n对齐方式：\n\n-   用 CSS 属性 \"text-align\" 和 \"caption-side\"\n-   caption-side 只有 top 和 bootom 两个，即位于表格上方或下方\n-   用 text-align 来控制左右位置\n\n无其他属性（HTML4.01 的 align 属性被 HTML5 删除）\n\n# `<colgroup>` 和 `<col>` ：对列进行组合\n\n对列进行组合\n\nspan 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# `<thead> <tbody> <tfoot>`\n\n无属性（样式属性被 HTML5 删除）\n\n默认不会影响表格的样式布局\n\n优点：\n\n-   使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。\n-   当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。\n-   可以方便的定义 三部分 的样式\n\n# `<table>`\n\n属性：border=1 或\"\" 规定是否有边框\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 表格行：`<tr>`\n\n无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 单元格：`<td>` 和 `<th>`\n\n差异\n\n-   th：文本粗体，居中\n-   td：文本普通，左对齐\n\n属性\n\n-   colspan：横跨的列数\n-   rowspan：横跨的行数\n-   headers：header_id 单元格关联的一个或多个表头单元格\n-   无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n自动居中\n\n-   如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中\n-   居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值\n-   IE6 居中随便写，写不出来算我输\n\n# CSS 属性：border-collapse\n\n默认情况：单元格之间有间隔隔开，border-collapse:separate\n\n一般不需要隔开：\n\n```css\ntable {\n    border-collapse: collapse;\n}\n```\n\n---\n\n    \"你大爷还是你大爷\"\n","source":"_posts/ancient_magical_table.md","raw":"---\ntitle: 古老神奇的table\ncategories:\n    - 01 HTML # 一级分类\ntags:\ndate: 2018-08-29\ndescription: 凭什么table能兼容IE6？\ntoc: 1\ntop: 0\n---\n\n# 结构\n\n```html\n<table>\n  <caption>表格上方的居中标题</caption>\n  <colgroup>\n    <col span=\"2\" style=\"\">\n    <col style=\"\">\n  </colgroup>\n  <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n        <th>Price</th>\n      </tr>\n  </thead>\n  <tody>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tbody>\n  <tfoot>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tfoot>\n</table>\n```\n\n# 标签\n\n```\n<caption>、<col>、<colgroup>、<thead>、<tfoot> 以及 <tbody>\n```\n\n# `<caption>标题`\n\n对齐方式：\n\n-   用 CSS 属性 \"text-align\" 和 \"caption-side\"\n-   caption-side 只有 top 和 bootom 两个，即位于表格上方或下方\n-   用 text-align 来控制左右位置\n\n无其他属性（HTML4.01 的 align 属性被 HTML5 删除）\n\n# `<colgroup>` 和 `<col>` ：对列进行组合\n\n对列进行组合\n\nspan 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# `<thead> <tbody> <tfoot>`\n\n无属性（样式属性被 HTML5 删除）\n\n默认不会影响表格的样式布局\n\n优点：\n\n-   使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。\n-   当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。\n-   可以方便的定义 三部分 的样式\n\n# `<table>`\n\n属性：border=1 或\"\" 规定是否有边框\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 表格行：`<tr>`\n\n无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 单元格：`<td>` 和 `<th>`\n\n差异\n\n-   th：文本粗体，居中\n-   td：文本普通，左对齐\n\n属性\n\n-   colspan：横跨的列数\n-   rowspan：横跨的行数\n-   headers：header_id 单元格关联的一个或多个表头单元格\n-   无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n自动居中\n\n-   如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中\n-   居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值\n-   IE6 居中随便写，写不出来算我输\n\n# CSS 属性：border-collapse\n\n默认情况：单元格之间有间隔隔开，border-collapse:separate\n\n一般不需要隔开：\n\n```css\ntable {\n    border-collapse: collapse;\n}\n```\n\n---\n\n    \"你大爷还是你大爷\"\n","slug":"ancient_magical_table","published":1,"updated":"2020-04-08T00:43:01.118Z","_id":"ck94a9ap0000n07s6ogbkdqja","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>表格上方的居中标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">span</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ISBN<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;caption&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;thead&gt;、&lt;tfoot&gt; 以及 &lt;tbody&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"lt-caption-gt-标题\"><a href=\"#lt-caption-gt-标题\" class=\"headerlink\" title=\"&lt;caption&gt;标题\"></a><code>&lt;caption&gt;标题</code></h1><p>对齐方式：</p>\n<ul>\n<li>用 CSS 属性 “text-align” 和 “caption-side”</li>\n<li>caption-side 只有 top 和 bootom 两个，即位于表格上方或下方</li>\n<li>用 text-align 来控制左右位置</li>\n</ul>\n<p>无其他属性（HTML4.01 的 align 属性被 HTML5 删除）</p>\n<h1 id=\"lt-colgroup-gt-和-lt-col-gt-：对列进行组合\"><a href=\"#lt-colgroup-gt-和-lt-col-gt-：对列进行组合\" class=\"headerlink\" title=\"&lt;colgroup&gt; 和 &lt;col&gt; ：对列进行组合\"></a><code>&lt;colgroup&gt;</code> 和 <code>&lt;col&gt;</code> ：对列进行组合</h1><p>对列进行组合</p>\n<p>span 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\"><a href=\"#lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\" class=\"headerlink\" title=\"&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;\"></a><code>&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;</code></h1><p>无属性（样式属性被 HTML5 删除）</p>\n<p>默认不会影响表格的样式布局</p>\n<p>优点：</p>\n<ul>\n<li>使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。</li>\n<li>当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。</li>\n<li>可以方便的定义 三部分 的样式</li>\n</ul>\n<h1 id=\"lt-table-gt\"><a href=\"#lt-table-gt\" class=\"headerlink\" title=\"&lt;table&gt;\"></a><code>&lt;table&gt;</code></h1><p>属性：border=1 或”” 规定是否有边框</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"表格行：-lt-tr-gt\"><a href=\"#表格行：-lt-tr-gt\" class=\"headerlink\" title=\"表格行：&lt;tr&gt;\"></a>表格行：<code>&lt;tr&gt;</code></h1><p>无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"单元格：-lt-td-gt-和-lt-th-gt\"><a href=\"#单元格：-lt-td-gt-和-lt-th-gt\" class=\"headerlink\" title=\"单元格：&lt;td&gt; 和 &lt;th&gt;\"></a>单元格：<code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code></h1><p>差异</p>\n<ul>\n<li>th：文本粗体，居中</li>\n<li>td：文本普通，左对齐</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>colspan：横跨的列数</li>\n<li>rowspan：横跨的行数</li>\n<li>headers：header_id 单元格关联的一个或多个表头单元格</li>\n<li>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</li>\n</ul>\n<p>自动居中</p>\n<ul>\n<li>如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中</li>\n<li>居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值</li>\n<li>IE6 居中随便写，写不出来算我输</li>\n</ul>\n<h1 id=\"CSS-属性：border-collapse\"><a href=\"#CSS-属性：border-collapse\" class=\"headerlink\" title=\"CSS 属性：border-collapse\"></a>CSS 属性：border-collapse</h1><p>默认情况：单元格之间有间隔隔开，border-collapse:separate</p>\n<p>一般不需要隔开：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>&quot;你大爷还是你大爷&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>表格上方的居中标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">span</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ISBN<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;caption&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;thead&gt;、&lt;tfoot&gt; 以及 &lt;tbody&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"lt-caption-gt-标题\"><a href=\"#lt-caption-gt-标题\" class=\"headerlink\" title=\"&lt;caption&gt;标题\"></a><code>&lt;caption&gt;标题</code></h1><p>对齐方式：</p>\n<ul>\n<li>用 CSS 属性 “text-align” 和 “caption-side”</li>\n<li>caption-side 只有 top 和 bootom 两个，即位于表格上方或下方</li>\n<li>用 text-align 来控制左右位置</li>\n</ul>\n<p>无其他属性（HTML4.01 的 align 属性被 HTML5 删除）</p>\n<h1 id=\"lt-colgroup-gt-和-lt-col-gt-：对列进行组合\"><a href=\"#lt-colgroup-gt-和-lt-col-gt-：对列进行组合\" class=\"headerlink\" title=\"&lt;colgroup&gt; 和 &lt;col&gt; ：对列进行组合\"></a><code>&lt;colgroup&gt;</code> 和 <code>&lt;col&gt;</code> ：对列进行组合</h1><p>对列进行组合</p>\n<p>span 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\"><a href=\"#lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\" class=\"headerlink\" title=\"&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;\"></a><code>&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;</code></h1><p>无属性（样式属性被 HTML5 删除）</p>\n<p>默认不会影响表格的样式布局</p>\n<p>优点：</p>\n<ul>\n<li>使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。</li>\n<li>当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。</li>\n<li>可以方便的定义 三部分 的样式</li>\n</ul>\n<h1 id=\"lt-table-gt\"><a href=\"#lt-table-gt\" class=\"headerlink\" title=\"&lt;table&gt;\"></a><code>&lt;table&gt;</code></h1><p>属性：border=1 或”” 规定是否有边框</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"表格行：-lt-tr-gt\"><a href=\"#表格行：-lt-tr-gt\" class=\"headerlink\" title=\"表格行：&lt;tr&gt;\"></a>表格行：<code>&lt;tr&gt;</code></h1><p>无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"单元格：-lt-td-gt-和-lt-th-gt\"><a href=\"#单元格：-lt-td-gt-和-lt-th-gt\" class=\"headerlink\" title=\"单元格：&lt;td&gt; 和 &lt;th&gt;\"></a>单元格：<code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code></h1><p>差异</p>\n<ul>\n<li>th：文本粗体，居中</li>\n<li>td：文本普通，左对齐</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>colspan：横跨的列数</li>\n<li>rowspan：横跨的行数</li>\n<li>headers：header_id 单元格关联的一个或多个表头单元格</li>\n<li>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</li>\n</ul>\n<p>自动居中</p>\n<ul>\n<li>如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中</li>\n<li>居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值</li>\n<li>IE6 居中随便写，写不出来算我输</li>\n</ul>\n<h1 id=\"CSS-属性：border-collapse\"><a href=\"#CSS-属性：border-collapse\" class=\"headerlink\" title=\"CSS 属性：border-collapse\"></a>CSS 属性：border-collapse</h1><p>默认情况：单元格之间有间隔隔开，border-collapse:separate</p>\n<p>一般不需要隔开：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>&quot;你大爷还是你大爷&quot;\n</code></pre>"},{"title":"行为决策学入门书籍《别做正常的傻瓜》让你的每一个行为都得到最优解","date":"2020-03-26T16:00:00.000Z","description":"豆瓣8.1。行为决策学入门书籍，通过心理学等原理、经济学决策实例等内容，讲述什么是决策理性，分析决策误区，让你的每一个行为都得到最优解。","toc":1,"top":0,"_content":"\n## 简介\n作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。\n\n他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。\n\n他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。\n\n在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。\n\n## 第一章 10元等于两个5元吗（**心理账户&决策一致性**\n- 心理账户对行为的影响\n在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎休养的基本素质呢？\n\n- 由于心理账户的存在，正常人常有一些误区：\n\n  1. 将等价的钱，根据来源/时间/用途不同，打上不同标记\n  2. 赌场盈利效应：赢来的钱更倾向于高风险投资\n  3. 把赢来的钱消费掉，把赚来的钱存起来\n  4. 大钱小花，小钱大花\n\n- 心理账户，导致了行为决策不具有一致性\n- 应该：让钱在不同心理账户之间流通\n- 应该：等价的钱，不因为来源/时间/用途不同而打上不同标记\n\n## 第二章 你会买没用的东西吗（**消费决策的误区**\n- 消费决策中常见的误区\n我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。\n- 做交易决策的无关参考值：\n  - 参考价-实际价格\n  - 优惠比例\n  - 历史促销价格\n- 做决策，不应受到**成本->价值**外的其他任何因素影响\n- 不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西\n\n## 第三章 坚持到底一定是胜利吗（**沉没成本**\n- **沉没成本**：已经无法收回的支出\n- 沉没成本误区\n人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。\n- 应该**及时止损**\n- 应该根据**将来会不会有好处**做决策\n- 不让沉没成本困住前进的步伐\n- **保本**是错误观念\n\n## 第四章 你有自知之明吗？（**过于自信与自知**\n> 知人者智，知己者明\n\n- 绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。\n- 做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的\n- **证实偏见**：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据\n- 过于自信的一个例子：**不上相**，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑\n\n过于自信的优点：\n- 使人积极开心\n- 产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果\n- 过于自信的人，不会太拘泥于细节，善于抓住问题的大方向\n\n过于自信的缺点：\n- 规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题\n- 随自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大\n- 打无准备之仗，松懈，持侥幸心理\n\n应该怎么做：\n- 避免证实偏见，为自己决策的对立面寻找证据，两相比较\n\n\n## 第五章 你会习以为常吗？（**适应性偏见**\n- **适应性**：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象\n- **适应性偏见**：人类**低估**自己的适应性，从而高估某些事情在一段时间后对自己的影响。\n- **适应性偏见例子**：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。\n\n**三类难以适应的定西**：\n- 极端的东西\n- 人际比较\n- 变化\n\n**如何对待适应性偏见**:\n- 了解自己对物质性东西的适应性\n- 不要对物质看得过重，有过高期望\n- 多关注精神和心灵层面的东西\n\n## 第六章 存银行还是买股票 （**风险决策**\n\n**数学期望值** = 选项的价值✖选项的概率\n\n**期望值理论**：做决策时，选期望值最大的选项\n\n- **风险中性**：期望值相同的情况，对风险大小无所谓\n- **风险规避**：期望值相同的情况，偏好于风险小收益小\n- **风险喜好**：期望值相同的情况，偏好与风险大收益大\n\n**效用**：指消费者从某商品中得到的满足感（主管衡量）\n\n**边际效用递减**：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的**效用**逐渐递减。（与上一章所讲的适应性有一定关联）\n\n**风险规避**与**边际效用递减**：边际效用递减是风险规避的理论依据\n\n**期望效用理论**：\n- 选择效用最大的选项\n- 计算方法：某选项的**效用** ✖ 概率\n- 效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数\n\n**前景理论**：最贴合现实中人类的选择\n- 在**得到**时，倾向于风险规避\n- 在**失去**时，倾向于风险喜好\n- 参照点的不同，会影响人类对于**得失**的判断\n- 通常遵循：损失规避（下一章会讲到）\n\n三种风险决策的理论依据：\n- 期望值理论（由于边际效用递减而不准确）\n- 期望效用理论（最为理性）\n- 前景理论（最贴近现实中人类的风险决策的理论）\n\n\n## 第七章损失100元和得到100元，哪个对你影响更大（**损失规避**\n**损失规避**：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|>>|U(x)|（得失不对称性）\n\n**投资决策的两个心理账户问题**：\n- 短时间内评价一个账户的盈亏（不要频繁查看投资账户）\n- 把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户\n\n**赋予效应**：\n同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）\n\n**安于现状**：\n由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状\n\n**语义效应**：\n用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择\n\n## 第八章 损失100元和没有得到100元，那个让你更心痛（**未得收益**\n- 未得收益和直接损失，从理性的角度来看是一样的，位的收益应该得到重视\n- 盗版知识产品=>也是对知识产权所有者未得收益的损害\n\n<!-- \n## 第六章 你的直觉如何\n- 启示法及其偏见\n\n\n## 第八章 多一定比少好吗\n- 比较评价和单独评价\n\n## 第九章 你想让朋友和员工更开心吗\n- 赠送礼物和激励员工的艺术 -->\n\n--------------------------------\n未完待续","source":"_posts/behavior_decision.md","raw":"---\ntitle: 行为决策学入门书籍《别做正常的傻瓜》让你的每一个行为都得到最优解\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\ndate: 2020-03-27\ndescription: 豆瓣8.1。行为决策学入门书籍，通过心理学等原理、经济学决策实例等内容，讲述什么是决策理性，分析决策误区，让你的每一个行为都得到最优解。\ntoc: 1\ntop: 0\n---\n\n## 简介\n作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。\n\n他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。\n\n他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。\n\n在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。\n\n## 第一章 10元等于两个5元吗（**心理账户&决策一致性**\n- 心理账户对行为的影响\n在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎休养的基本素质呢？\n\n- 由于心理账户的存在，正常人常有一些误区：\n\n  1. 将等价的钱，根据来源/时间/用途不同，打上不同标记\n  2. 赌场盈利效应：赢来的钱更倾向于高风险投资\n  3. 把赢来的钱消费掉，把赚来的钱存起来\n  4. 大钱小花，小钱大花\n\n- 心理账户，导致了行为决策不具有一致性\n- 应该：让钱在不同心理账户之间流通\n- 应该：等价的钱，不因为来源/时间/用途不同而打上不同标记\n\n## 第二章 你会买没用的东西吗（**消费决策的误区**\n- 消费决策中常见的误区\n我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。\n- 做交易决策的无关参考值：\n  - 参考价-实际价格\n  - 优惠比例\n  - 历史促销价格\n- 做决策，不应受到**成本->价值**外的其他任何因素影响\n- 不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西\n\n## 第三章 坚持到底一定是胜利吗（**沉没成本**\n- **沉没成本**：已经无法收回的支出\n- 沉没成本误区\n人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。\n- 应该**及时止损**\n- 应该根据**将来会不会有好处**做决策\n- 不让沉没成本困住前进的步伐\n- **保本**是错误观念\n\n## 第四章 你有自知之明吗？（**过于自信与自知**\n> 知人者智，知己者明\n\n- 绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。\n- 做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的\n- **证实偏见**：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据\n- 过于自信的一个例子：**不上相**，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑\n\n过于自信的优点：\n- 使人积极开心\n- 产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果\n- 过于自信的人，不会太拘泥于细节，善于抓住问题的大方向\n\n过于自信的缺点：\n- 规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题\n- 随自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大\n- 打无准备之仗，松懈，持侥幸心理\n\n应该怎么做：\n- 避免证实偏见，为自己决策的对立面寻找证据，两相比较\n\n\n## 第五章 你会习以为常吗？（**适应性偏见**\n- **适应性**：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象\n- **适应性偏见**：人类**低估**自己的适应性，从而高估某些事情在一段时间后对自己的影响。\n- **适应性偏见例子**：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。\n\n**三类难以适应的定西**：\n- 极端的东西\n- 人际比较\n- 变化\n\n**如何对待适应性偏见**:\n- 了解自己对物质性东西的适应性\n- 不要对物质看得过重，有过高期望\n- 多关注精神和心灵层面的东西\n\n## 第六章 存银行还是买股票 （**风险决策**\n\n**数学期望值** = 选项的价值✖选项的概率\n\n**期望值理论**：做决策时，选期望值最大的选项\n\n- **风险中性**：期望值相同的情况，对风险大小无所谓\n- **风险规避**：期望值相同的情况，偏好于风险小收益小\n- **风险喜好**：期望值相同的情况，偏好与风险大收益大\n\n**效用**：指消费者从某商品中得到的满足感（主管衡量）\n\n**边际效用递减**：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的**效用**逐渐递减。（与上一章所讲的适应性有一定关联）\n\n**风险规避**与**边际效用递减**：边际效用递减是风险规避的理论依据\n\n**期望效用理论**：\n- 选择效用最大的选项\n- 计算方法：某选项的**效用** ✖ 概率\n- 效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数\n\n**前景理论**：最贴合现实中人类的选择\n- 在**得到**时，倾向于风险规避\n- 在**失去**时，倾向于风险喜好\n- 参照点的不同，会影响人类对于**得失**的判断\n- 通常遵循：损失规避（下一章会讲到）\n\n三种风险决策的理论依据：\n- 期望值理论（由于边际效用递减而不准确）\n- 期望效用理论（最为理性）\n- 前景理论（最贴近现实中人类的风险决策的理论）\n\n\n## 第七章损失100元和得到100元，哪个对你影响更大（**损失规避**\n**损失规避**：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|>>|U(x)|（得失不对称性）\n\n**投资决策的两个心理账户问题**：\n- 短时间内评价一个账户的盈亏（不要频繁查看投资账户）\n- 把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户\n\n**赋予效应**：\n同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）\n\n**安于现状**：\n由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状\n\n**语义效应**：\n用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择\n\n## 第八章 损失100元和没有得到100元，那个让你更心痛（**未得收益**\n- 未得收益和直接损失，从理性的角度来看是一样的，位的收益应该得到重视\n- 盗版知识产品=>也是对知识产权所有者未得收益的损害\n\n<!-- \n## 第六章 你的直觉如何\n- 启示法及其偏见\n\n\n## 第八章 多一定比少好吗\n- 比较评价和单独评价\n\n## 第九章 你想让朋友和员工更开心吗\n- 赠送礼物和激励员工的艺术 -->\n\n--------------------------------\n未完待续","slug":"behavior_decision","published":1,"updated":"2020-04-29T08:17:22.062Z","_id":"ck94a9ap1000q07s6uw95hy20","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。</p>\n<p>他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。</p>\n<p>他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。</p>\n<p>在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。</p>\n<h2 id=\"第一章-10元等于两个5元吗（心理账户-amp-决策一致性\"><a href=\"#第一章-10元等于两个5元吗（心理账户-amp-决策一致性\" class=\"headerlink\" title=\"第一章 10元等于两个5元吗（心理账户&amp;决策一致性\"></a>第一章 10元等于两个5元吗（<strong>心理账户&amp;决策一致性</strong></h2><ul>\n<li><p>心理账户对行为的影响<br>在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎休养的基本素质呢？</p>\n</li>\n<li><p>由于心理账户的存在，正常人常有一些误区：</p>\n<ol>\n<li>将等价的钱，根据来源/时间/用途不同，打上不同标记</li>\n<li>赌场盈利效应：赢来的钱更倾向于高风险投资</li>\n<li>把赢来的钱消费掉，把赚来的钱存起来</li>\n<li>大钱小花，小钱大花</li>\n</ol>\n</li>\n<li><p>心理账户，导致了行为决策不具有一致性</p>\n</li>\n<li>应该：让钱在不同心理账户之间流通</li>\n<li>应该：等价的钱，不因为来源/时间/用途不同而打上不同标记</li>\n</ul>\n<h2 id=\"第二章-你会买没用的东西吗（消费决策的误区\"><a href=\"#第二章-你会买没用的东西吗（消费决策的误区\" class=\"headerlink\" title=\"第二章 你会买没用的东西吗（消费决策的误区\"></a>第二章 你会买没用的东西吗（<strong>消费决策的误区</strong></h2><ul>\n<li>消费决策中常见的误区<br>我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。</li>\n<li>做交易决策的无关参考值：<ul>\n<li>参考价-实际价格</li>\n<li>优惠比例</li>\n<li>历史促销价格</li>\n</ul>\n</li>\n<li>做决策，不应受到<strong>成本-&gt;价值</strong>外的其他任何因素影响</li>\n<li>不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西</li>\n</ul>\n<h2 id=\"第三章-坚持到底一定是胜利吗（沉没成本\"><a href=\"#第三章-坚持到底一定是胜利吗（沉没成本\" class=\"headerlink\" title=\"第三章 坚持到底一定是胜利吗（沉没成本\"></a>第三章 坚持到底一定是胜利吗（<strong>沉没成本</strong></h2><ul>\n<li><strong>沉没成本</strong>：已经无法收回的支出</li>\n<li>沉没成本误区<br>人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。</li>\n<li>应该<strong>及时止损</strong></li>\n<li>应该根据<strong>将来会不会有好处</strong>做决策</li>\n<li>不让沉没成本困住前进的步伐</li>\n<li><strong>保本</strong>是错误观念</li>\n</ul>\n<h2 id=\"第四章-你有自知之明吗？（过于自信与自知\"><a href=\"#第四章-你有自知之明吗？（过于自信与自知\" class=\"headerlink\" title=\"第四章 你有自知之明吗？（过于自信与自知\"></a>第四章 你有自知之明吗？（<strong>过于自信与自知</strong></h2><blockquote>\n<p>知人者智，知己者明</p>\n</blockquote>\n<ul>\n<li>绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。</li>\n<li>做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的</li>\n<li><strong>证实偏见</strong>：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据</li>\n<li>过于自信的一个例子：<strong>不上相</strong>，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑</li>\n</ul>\n<p>过于自信的优点：</p>\n<ul>\n<li>使人积极开心</li>\n<li>产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果</li>\n<li>过于自信的人，不会太拘泥于细节，善于抓住问题的大方向</li>\n</ul>\n<p>过于自信的缺点：</p>\n<ul>\n<li>规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题</li>\n<li>随自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大</li>\n<li>打无准备之仗，松懈，持侥幸心理</li>\n</ul>\n<p>应该怎么做：</p>\n<ul>\n<li>避免证实偏见，为自己决策的对立面寻找证据，两相比较</li>\n</ul>\n<h2 id=\"第五章-你会习以为常吗？（适应性偏见\"><a href=\"#第五章-你会习以为常吗？（适应性偏见\" class=\"headerlink\" title=\"第五章 你会习以为常吗？（适应性偏见\"></a>第五章 你会习以为常吗？（<strong>适应性偏见</strong></h2><ul>\n<li><strong>适应性</strong>：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象</li>\n<li><strong>适应性偏见</strong>：人类<strong>低估</strong>自己的适应性，从而高估某些事情在一段时间后对自己的影响。</li>\n<li><strong>适应性偏见例子</strong>：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。</li>\n</ul>\n<p><strong>三类难以适应的定西</strong>：</p>\n<ul>\n<li>极端的东西</li>\n<li>人际比较</li>\n<li>变化</li>\n</ul>\n<p><strong>如何对待适应性偏见</strong>:</p>\n<ul>\n<li>了解自己对物质性东西的适应性</li>\n<li>不要对物质看得过重，有过高期望</li>\n<li>多关注精神和心灵层面的东西</li>\n</ul>\n<h2 id=\"第六章-存银行还是买股票-（风险决策\"><a href=\"#第六章-存银行还是买股票-（风险决策\" class=\"headerlink\" title=\"第六章 存银行还是买股票 （风险决策\"></a>第六章 存银行还是买股票 （<strong>风险决策</strong></h2><p><strong>数学期望值</strong> = 选项的价值✖选项的概率</p>\n<p><strong>期望值理论</strong>：做决策时，选期望值最大的选项</p>\n<ul>\n<li><strong>风险中性</strong>：期望值相同的情况，对风险大小无所谓</li>\n<li><strong>风险规避</strong>：期望值相同的情况，偏好于风险小收益小</li>\n<li><strong>风险喜好</strong>：期望值相同的情况，偏好与风险大收益大</li>\n</ul>\n<p><strong>效用</strong>：指消费者从某商品中得到的满足感（主管衡量）</p>\n<p><strong>边际效用递减</strong>：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的<strong>效用</strong>逐渐递减。（与上一章所讲的适应性有一定关联）</p>\n<p><strong>风险规避</strong>与<strong>边际效用递减</strong>：边际效用递减是风险规避的理论依据</p>\n<p><strong>期望效用理论</strong>：</p>\n<ul>\n<li>选择效用最大的选项</li>\n<li>计算方法：某选项的<strong>效用</strong> ✖ 概率</li>\n<li>效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数</li>\n</ul>\n<p><strong>前景理论</strong>：最贴合现实中人类的选择</p>\n<ul>\n<li>在<strong>得到</strong>时，倾向于风险规避</li>\n<li>在<strong>失去</strong>时，倾向于风险喜好</li>\n<li>参照点的不同，会影响人类对于<strong>得失</strong>的判断</li>\n<li>通常遵循：损失规避（下一章会讲到）</li>\n</ul>\n<p>三种风险决策的理论依据：</p>\n<ul>\n<li>期望值理论（由于边际效用递减而不准确）</li>\n<li>期望效用理论（最为理性）</li>\n<li>前景理论（最贴近现实中人类的风险决策的理论）</li>\n</ul>\n<h2 id=\"第七章损失100元和得到100元，哪个对你影响更大（损失规避\"><a href=\"#第七章损失100元和得到100元，哪个对你影响更大（损失规避\" class=\"headerlink\" title=\"第七章损失100元和得到100元，哪个对你影响更大（损失规避\"></a>第七章损失100元和得到100元，哪个对你影响更大（<strong>损失规避</strong></h2><p><strong>损失规避</strong>：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|&gt;&gt;|U(x)|（得失不对称性）</p>\n<p><strong>投资决策的两个心理账户问题</strong>：</p>\n<ul>\n<li>短时间内评价一个账户的盈亏（不要频繁查看投资账户）</li>\n<li>把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户</li>\n</ul>\n<p><strong>赋予效应</strong>：<br>同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）</p>\n<p><strong>安于现状</strong>：<br>由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状</p>\n<p><strong>语义效应</strong>：<br>用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择</p>\n<h2 id=\"第八章-损失100元和没有得到100元，那个让你更心痛（未得收益\"><a href=\"#第八章-损失100元和没有得到100元，那个让你更心痛（未得收益\" class=\"headerlink\" title=\"第八章 损失100元和没有得到100元，那个让你更心痛（未得收益\"></a>第八章 损失100元和没有得到100元，那个让你更心痛（<strong>未得收益</strong></h2><ul>\n<li>未得收益和直接损失，从理性的角度来看是一样的，位的收益应该得到重视</li>\n<li>盗版知识产品=&gt;也是对知识产权所有者未得收益的损害</li>\n</ul>\n<!-- \n## 第六章 你的直觉如何\n- 启示法及其偏见\n\n\n## 第八章 多一定比少好吗\n- 比较评价和单独评价\n\n## 第九章 你想让朋友和员工更开心吗\n- 赠送礼物和激励员工的艺术 -->\n<hr>\n<p>未完待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。</p>\n<p>他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。</p>\n<p>他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。</p>\n<p>在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。</p>\n<h2 id=\"第一章-10元等于两个5元吗（心理账户-amp-决策一致性\"><a href=\"#第一章-10元等于两个5元吗（心理账户-amp-决策一致性\" class=\"headerlink\" title=\"第一章 10元等于两个5元吗（心理账户&amp;决策一致性\"></a>第一章 10元等于两个5元吗（<strong>心理账户&amp;决策一致性</strong></h2><ul>\n<li><p>心理账户对行为的影响<br>在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎休养的基本素质呢？</p>\n</li>\n<li><p>由于心理账户的存在，正常人常有一些误区：</p>\n<ol>\n<li>将等价的钱，根据来源/时间/用途不同，打上不同标记</li>\n<li>赌场盈利效应：赢来的钱更倾向于高风险投资</li>\n<li>把赢来的钱消费掉，把赚来的钱存起来</li>\n<li>大钱小花，小钱大花</li>\n</ol>\n</li>\n<li><p>心理账户，导致了行为决策不具有一致性</p>\n</li>\n<li>应该：让钱在不同心理账户之间流通</li>\n<li>应该：等价的钱，不因为来源/时间/用途不同而打上不同标记</li>\n</ul>\n<h2 id=\"第二章-你会买没用的东西吗（消费决策的误区\"><a href=\"#第二章-你会买没用的东西吗（消费决策的误区\" class=\"headerlink\" title=\"第二章 你会买没用的东西吗（消费决策的误区\"></a>第二章 你会买没用的东西吗（<strong>消费决策的误区</strong></h2><ul>\n<li>消费决策中常见的误区<br>我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。</li>\n<li>做交易决策的无关参考值：<ul>\n<li>参考价-实际价格</li>\n<li>优惠比例</li>\n<li>历史促销价格</li>\n</ul>\n</li>\n<li>做决策，不应受到<strong>成本-&gt;价值</strong>外的其他任何因素影响</li>\n<li>不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西</li>\n</ul>\n<h2 id=\"第三章-坚持到底一定是胜利吗（沉没成本\"><a href=\"#第三章-坚持到底一定是胜利吗（沉没成本\" class=\"headerlink\" title=\"第三章 坚持到底一定是胜利吗（沉没成本\"></a>第三章 坚持到底一定是胜利吗（<strong>沉没成本</strong></h2><ul>\n<li><strong>沉没成本</strong>：已经无法收回的支出</li>\n<li>沉没成本误区<br>人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。</li>\n<li>应该<strong>及时止损</strong></li>\n<li>应该根据<strong>将来会不会有好处</strong>做决策</li>\n<li>不让沉没成本困住前进的步伐</li>\n<li><strong>保本</strong>是错误观念</li>\n</ul>\n<h2 id=\"第四章-你有自知之明吗？（过于自信与自知\"><a href=\"#第四章-你有自知之明吗？（过于自信与自知\" class=\"headerlink\" title=\"第四章 你有自知之明吗？（过于自信与自知\"></a>第四章 你有自知之明吗？（<strong>过于自信与自知</strong></h2><blockquote>\n<p>知人者智，知己者明</p>\n</blockquote>\n<ul>\n<li>绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。</li>\n<li>做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的</li>\n<li><strong>证实偏见</strong>：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据</li>\n<li>过于自信的一个例子：<strong>不上相</strong>，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑</li>\n</ul>\n<p>过于自信的优点：</p>\n<ul>\n<li>使人积极开心</li>\n<li>产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果</li>\n<li>过于自信的人，不会太拘泥于细节，善于抓住问题的大方向</li>\n</ul>\n<p>过于自信的缺点：</p>\n<ul>\n<li>规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题</li>\n<li>随自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大</li>\n<li>打无准备之仗，松懈，持侥幸心理</li>\n</ul>\n<p>应该怎么做：</p>\n<ul>\n<li>避免证实偏见，为自己决策的对立面寻找证据，两相比较</li>\n</ul>\n<h2 id=\"第五章-你会习以为常吗？（适应性偏见\"><a href=\"#第五章-你会习以为常吗？（适应性偏见\" class=\"headerlink\" title=\"第五章 你会习以为常吗？（适应性偏见\"></a>第五章 你会习以为常吗？（<strong>适应性偏见</strong></h2><ul>\n<li><strong>适应性</strong>：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象</li>\n<li><strong>适应性偏见</strong>：人类<strong>低估</strong>自己的适应性，从而高估某些事情在一段时间后对自己的影响。</li>\n<li><strong>适应性偏见例子</strong>：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。</li>\n</ul>\n<p><strong>三类难以适应的定西</strong>：</p>\n<ul>\n<li>极端的东西</li>\n<li>人际比较</li>\n<li>变化</li>\n</ul>\n<p><strong>如何对待适应性偏见</strong>:</p>\n<ul>\n<li>了解自己对物质性东西的适应性</li>\n<li>不要对物质看得过重，有过高期望</li>\n<li>多关注精神和心灵层面的东西</li>\n</ul>\n<h2 id=\"第六章-存银行还是买股票-（风险决策\"><a href=\"#第六章-存银行还是买股票-（风险决策\" class=\"headerlink\" title=\"第六章 存银行还是买股票 （风险决策\"></a>第六章 存银行还是买股票 （<strong>风险决策</strong></h2><p><strong>数学期望值</strong> = 选项的价值✖选项的概率</p>\n<p><strong>期望值理论</strong>：做决策时，选期望值最大的选项</p>\n<ul>\n<li><strong>风险中性</strong>：期望值相同的情况，对风险大小无所谓</li>\n<li><strong>风险规避</strong>：期望值相同的情况，偏好于风险小收益小</li>\n<li><strong>风险喜好</strong>：期望值相同的情况，偏好与风险大收益大</li>\n</ul>\n<p><strong>效用</strong>：指消费者从某商品中得到的满足感（主管衡量）</p>\n<p><strong>边际效用递减</strong>：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的<strong>效用</strong>逐渐递减。（与上一章所讲的适应性有一定关联）</p>\n<p><strong>风险规避</strong>与<strong>边际效用递减</strong>：边际效用递减是风险规避的理论依据</p>\n<p><strong>期望效用理论</strong>：</p>\n<ul>\n<li>选择效用最大的选项</li>\n<li>计算方法：某选项的<strong>效用</strong> ✖ 概率</li>\n<li>效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数</li>\n</ul>\n<p><strong>前景理论</strong>：最贴合现实中人类的选择</p>\n<ul>\n<li>在<strong>得到</strong>时，倾向于风险规避</li>\n<li>在<strong>失去</strong>时，倾向于风险喜好</li>\n<li>参照点的不同，会影响人类对于<strong>得失</strong>的判断</li>\n<li>通常遵循：损失规避（下一章会讲到）</li>\n</ul>\n<p>三种风险决策的理论依据：</p>\n<ul>\n<li>期望值理论（由于边际效用递减而不准确）</li>\n<li>期望效用理论（最为理性）</li>\n<li>前景理论（最贴近现实中人类的风险决策的理论）</li>\n</ul>\n<h2 id=\"第七章损失100元和得到100元，哪个对你影响更大（损失规避\"><a href=\"#第七章损失100元和得到100元，哪个对你影响更大（损失规避\" class=\"headerlink\" title=\"第七章损失100元和得到100元，哪个对你影响更大（损失规避\"></a>第七章损失100元和得到100元，哪个对你影响更大（<strong>损失规避</strong></h2><p><strong>损失规避</strong>：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|&gt;&gt;|U(x)|（得失不对称性）</p>\n<p><strong>投资决策的两个心理账户问题</strong>：</p>\n<ul>\n<li>短时间内评价一个账户的盈亏（不要频繁查看投资账户）</li>\n<li>把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户</li>\n</ul>\n<p><strong>赋予效应</strong>：<br>同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）</p>\n<p><strong>安于现状</strong>：<br>由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状</p>\n<p><strong>语义效应</strong>：<br>用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择</p>\n<h2 id=\"第八章-损失100元和没有得到100元，那个让你更心痛（未得收益\"><a href=\"#第八章-损失100元和没有得到100元，那个让你更心痛（未得收益\" class=\"headerlink\" title=\"第八章 损失100元和没有得到100元，那个让你更心痛（未得收益\"></a>第八章 损失100元和没有得到100元，那个让你更心痛（<strong>未得收益</strong></h2><ul>\n<li>未得收益和直接损失，从理性的角度来看是一样的，位的收益应该得到重视</li>\n<li>盗版知识产品=&gt;也是对知识产权所有者未得收益的损害</li>\n</ul>\n<!-- \n## 第六章 你的直觉如何\n- 启示法及其偏见\n\n\n## 第八章 多一定比少好吗\n- 比较评价和单独评价\n\n## 第九章 你想让朋友和员工更开心吗\n- 赠送礼物和激励员工的艺术 -->\n<hr>\n<p>未完待续</p>\n"},{"title":"本博客折腾记录","comments":1,"date":"2017-12-31T16:00:00.000Z","description":"每日一折腾，不折腾难受。","toc":0,"_content":"## TODO\n- gitbook文章全部迁移至blog，gitbook废弃\n- **全部文章**tab页，文章标题下的描述，改为隐藏，hover泡泡显示\n- 响应式重构\n\n## 变更记录\n- 用腾讯兔小巢搭留言板\n- **全部文章**tab页，文章标题下增加描述\n- 从**emojipedia.org**添加全站emoji\n- 页首布局更改为一行，去除gitbook链接\n- 增加暗色模式\n- rss链接改为打开新页面\n- 替换幼稚的置顶按钮\n- 增加apps在线工具tab\n- 博客计时\n![博客计时](/images/blog/blog-counter.gifs)\n- Gitbook\n- Google Adsense广告\n- categories分类排序\n- 返回顶部控件\n  \n\n## 主题 & 个性化样式\n\n#### 1. Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n挑主题的时候一眼就看上了这个主题，简约直白X冷淡\n\n#### 2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\n以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。\n\n有需要可以去[我的博客仓库](https://github.com/scarsu/ScarSuHexo_Netlify.git)自取。\n\n#### 3. 一些参考：\n[hexo官网](https://hexo.io/)\n\n[pug模板语言文档](https://pugjs.org/api/getting-started.html)\n\n[sass文档](https://www.sass.hk/)\n\n## 配置腾讯公益404页面\n1.  在博客代码仓库的/source/404/路径下，新建index.md\n```md\n---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n\n```\n\n2. 重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：[https://www.scarsu.com/qqq](https://www.scarsu.com/qqq)，直接输入/404路由也会出[https://www.scarsu.com/404](https://www.scarsu.com/qqq)\n\n3. 可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。\n\n## 博客评论控件\n\n#### **Gitment**\n[gitment repo](https://github.com/imsun/gitment)\n\n去[Github Auth Applications](https://github.com/settings/applications/new)为你的网站注册一个应用：\n```\nApplication name: 应用名\nHomepage URL: 你的网站地址 #eg. https://www.scarsu.com\nApplication description: 描述\nAuthorization callback URL: 你的网站地址 #如 https://www.scarsu.com\n```\n\n博客配置：\n```yaml\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n    enable: true ## If you want to use Gitment comment system please set the value to true.\n    owner: github用户名 ## Your GitHub ID, 直接用GitHub用户名就可以\n    repo: repo地址 ## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的\n    client_id: 刚才申请的ClientID ## GitHub client ID\n    client_secret: 刚才申请的ClientSecret ## GitHub client secret\n```\n\n本地安装gitment，并在项目中添加依赖：\n```\nnpm i --save gitment\n\n```\n\n- **Disqus**[需要Q，已经弃用-20191212]\n在disqus官网注册账户，在主题配置文件中开启disqus评论控件:\n```yaml\n# Comment 评论相关\ndisqus: username ## Disqus评论 Your disqus_shortname, e.g. username\n```\n\n## SEO\n#### 谷歌网站收录 [链接](https://search.google.com/search-console)\n- 先录入资源类型：域名/网站,录入后需要验证所有权\n\n![](/images/google_search.png)\n\n- 域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）\n- 网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证\n\n![](/images/google_search2.png)\n\n- 域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条`txt类型`的`dns记录`，值为上图中谷歌给出的`txt值`，name选择`@`即可：\n\n![](/images/google_search3.png)\n\n- 下图为验证成功截图：\n![](/images/google_search4.png)\n\n- 验证通过后一天，就可以在[google search console](https://search.google.com/search-console)中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。\n\n- 收录后，在google[搜索](https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&ei=2TkEXsejM5CqoAS0mpjYAw&q=scarsu&oq=scarsu&gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&uact=5)我的网站的关键词，就可以在第一条看到结果:\n  \n![](/images/google_search5.png)\n\n#### 百度链接提交工具 [链接](https://ziyuan.baidu.com/linksubmit/url)\n百度链接提交工具使用说明\n> 1. 链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题\n> 2. 百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接\n\n如：我提交自己的www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\n\n![](/images/blog/scarsu-baidu.jpg)\n\n#### 神马搜索站长平台 [链接](https://zhanzhang.sm.cn/)\n配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：\n![神马验证](/images/blog/shenma.pngs)\n\n后来才检索到，是神马不支持对https的站点进行验证，。\n\n由于我的站点部署在netlify上，因此决定放弃神马平台的收录\n\n#### Bing 网站收录[链接](https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired)\n\n- 十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示`Anonymous URL Submission Tool Being Retired`，即Bing的匿名URL提交工具已经停用。\n\n#### 360网站收录[链接](http://info.so.360.cn/site_submit.html)\n- 没有验证，填写信息提交即可\n\n#### 搜狗收录 [链接](http://fankui.help.sogou.com/index.php/)\n- 没有验证，填写信息提交即可\n- \n#### 提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\n\nfork[此仓库](https://github.com/timqian/chinese-independent-blogs)，blogs-original.csv中维护自己的博客后，提pull request即可。\n\n\n\n\n---\n\n     “不疯魔 不成活”\n","source":"_posts/blog_history.md","raw":"---\ntitle: 本博客折腾记录 # 文章标题\ncategories:\n    - 00 ScarSu # 一级分类\ntags:\ncomments: true #开启评论\ndate: 2018-01-01\ndescription: 每日一折腾，不折腾难受。\ntoc: 0\n---\n## TODO\n- gitbook文章全部迁移至blog，gitbook废弃\n- **全部文章**tab页，文章标题下的描述，改为隐藏，hover泡泡显示\n- 响应式重构\n\n## 变更记录\n- 用腾讯兔小巢搭留言板\n- **全部文章**tab页，文章标题下增加描述\n- 从**emojipedia.org**添加全站emoji\n- 页首布局更改为一行，去除gitbook链接\n- 增加暗色模式\n- rss链接改为打开新页面\n- 替换幼稚的置顶按钮\n- 增加apps在线工具tab\n- 博客计时\n![博客计时](/images/blog/blog-counter.gifs)\n- Gitbook\n- Google Adsense广告\n- categories分类排序\n- 返回顶部控件\n  \n\n## 主题 & 个性化样式\n\n#### 1. Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n挑主题的时候一眼就看上了这个主题，简约直白X冷淡\n\n#### 2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\n以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。\n\n有需要可以去[我的博客仓库](https://github.com/scarsu/ScarSuHexo_Netlify.git)自取。\n\n#### 3. 一些参考：\n[hexo官网](https://hexo.io/)\n\n[pug模板语言文档](https://pugjs.org/api/getting-started.html)\n\n[sass文档](https://www.sass.hk/)\n\n## 配置腾讯公益404页面\n1.  在博客代码仓库的/source/404/路径下，新建index.md\n```md\n---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n\n```\n\n2. 重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：[https://www.scarsu.com/qqq](https://www.scarsu.com/qqq)，直接输入/404路由也会出[https://www.scarsu.com/404](https://www.scarsu.com/qqq)\n\n3. 可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。\n\n## 博客评论控件\n\n#### **Gitment**\n[gitment repo](https://github.com/imsun/gitment)\n\n去[Github Auth Applications](https://github.com/settings/applications/new)为你的网站注册一个应用：\n```\nApplication name: 应用名\nHomepage URL: 你的网站地址 #eg. https://www.scarsu.com\nApplication description: 描述\nAuthorization callback URL: 你的网站地址 #如 https://www.scarsu.com\n```\n\n博客配置：\n```yaml\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n    enable: true ## If you want to use Gitment comment system please set the value to true.\n    owner: github用户名 ## Your GitHub ID, 直接用GitHub用户名就可以\n    repo: repo地址 ## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的\n    client_id: 刚才申请的ClientID ## GitHub client ID\n    client_secret: 刚才申请的ClientSecret ## GitHub client secret\n```\n\n本地安装gitment，并在项目中添加依赖：\n```\nnpm i --save gitment\n\n```\n\n- **Disqus**[需要Q，已经弃用-20191212]\n在disqus官网注册账户，在主题配置文件中开启disqus评论控件:\n```yaml\n# Comment 评论相关\ndisqus: username ## Disqus评论 Your disqus_shortname, e.g. username\n```\n\n## SEO\n#### 谷歌网站收录 [链接](https://search.google.com/search-console)\n- 先录入资源类型：域名/网站,录入后需要验证所有权\n\n![](/images/google_search.png)\n\n- 域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）\n- 网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证\n\n![](/images/google_search2.png)\n\n- 域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条`txt类型`的`dns记录`，值为上图中谷歌给出的`txt值`，name选择`@`即可：\n\n![](/images/google_search3.png)\n\n- 下图为验证成功截图：\n![](/images/google_search4.png)\n\n- 验证通过后一天，就可以在[google search console](https://search.google.com/search-console)中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。\n\n- 收录后，在google[搜索](https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&ei=2TkEXsejM5CqoAS0mpjYAw&q=scarsu&oq=scarsu&gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&uact=5)我的网站的关键词，就可以在第一条看到结果:\n  \n![](/images/google_search5.png)\n\n#### 百度链接提交工具 [链接](https://ziyuan.baidu.com/linksubmit/url)\n百度链接提交工具使用说明\n> 1. 链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题\n> 2. 百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接\n\n如：我提交自己的www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\n\n![](/images/blog/scarsu-baidu.jpg)\n\n#### 神马搜索站长平台 [链接](https://zhanzhang.sm.cn/)\n配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：\n![神马验证](/images/blog/shenma.pngs)\n\n后来才检索到，是神马不支持对https的站点进行验证，。\n\n由于我的站点部署在netlify上，因此决定放弃神马平台的收录\n\n#### Bing 网站收录[链接](https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired)\n\n- 十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示`Anonymous URL Submission Tool Being Retired`，即Bing的匿名URL提交工具已经停用。\n\n#### 360网站收录[链接](http://info.so.360.cn/site_submit.html)\n- 没有验证，填写信息提交即可\n\n#### 搜狗收录 [链接](http://fankui.help.sogou.com/index.php/)\n- 没有验证，填写信息提交即可\n- \n#### 提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\n\nfork[此仓库](https://github.com/timqian/chinese-independent-blogs)，blogs-original.csv中维护自己的博客后，提pull request即可。\n\n\n\n\n---\n\n     “不疯魔 不成活”\n","slug":"blog_history","published":1,"updated":"2020-04-18T00:49:44.917Z","_id":"ck94a9ap3000t07s6fmflw7mr","layout":"post","photos":[],"link":"","content":"<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>gitbook文章全部迁移至blog，gitbook废弃</li>\n<li><strong>全部文章</strong>tab页，文章标题下的描述，改为隐藏，hover泡泡显示</li>\n<li>响应式重构</li>\n</ul>\n<h2 id=\"变更记录\"><a href=\"#变更记录\" class=\"headerlink\" title=\"变更记录\"></a>变更记录</h2><ul>\n<li>用腾讯兔小巢搭留言板</li>\n<li><strong>全部文章</strong>tab页，文章标题下增加描述</li>\n<li>从<strong>emojipedia.org</strong>添加全站emoji</li>\n<li>页首布局更改为一行，去除gitbook链接</li>\n<li>增加暗色模式</li>\n<li>rss链接改为打开新页面</li>\n<li>替换幼稚的置顶按钮</li>\n<li>增加apps在线工具tab</li>\n<li>博客计时<br><img src=\"/images/blog/blog-counter.gifs\" alt=\"博客计时\"></li>\n<li>Gitbook</li>\n<li>Google Adsense广告</li>\n<li>categories分类排序</li>\n<li>返回顶部控件</li>\n</ul>\n<h2 id=\"主题-amp-个性化样式\"><a href=\"#主题-amp-个性化样式\" class=\"headerlink\" title=\"主题 &amp; 个性化样式\"></a>主题 &amp; 个性化样式</h2><h4 id=\"1-Hexo-主题：Maupassant-Theme\"><a href=\"#1-Hexo-主题：Maupassant-Theme\" class=\"headerlink\" title=\"1. Hexo 主题：Maupassant Theme\"></a>1. Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></h4><p>挑主题的时候一眼就看上了这个主题，简约直白X冷淡</p>\n<h4 id=\"2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"><a href=\"#2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\" class=\"headerlink\" title=\"2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"></a>2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式</h4><p>以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。</p>\n<p>有需要可以去<a href=\"https://github.com/scarsu/ScarSuHexo_Netlify.git\" target=\"_blank\" rel=\"noopener\">我的博客仓库</a>自取。</p>\n<h4 id=\"3-一些参考：\"><a href=\"#3-一些参考：\" class=\"headerlink\" title=\"3. 一些参考：\"></a>3. 一些参考：</h4><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://pugjs.org/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug模板语言文档</a></p>\n<p><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"配置腾讯公益404页面\"><a href=\"#配置腾讯公益404页面\" class=\"headerlink\" title=\"配置腾讯公益404页面\"></a>配置腾讯公益404页面</h2><ol>\n<li><p>在博客代码仓库的/source/404/路径下，新建index.md</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">toc: false</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">description: 腾讯404公益页面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;meta charset=\"UTF-8\" /&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;title&gt;404&lt;/title&gt;                                                </span></span><br><span class=\"line\"><span class=\"code\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/qqq</a>，直接输入/404路由也会出<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/404</a></p>\n</li>\n<li><p>可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。</p>\n</li>\n</ol>\n<h2 id=\"博客评论控件\"><a href=\"#博客评论控件\" class=\"headerlink\" title=\"博客评论控件\"></a>博客评论控件</h2><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a><strong>Gitment</strong></h4><p><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment repo</a></p>\n<p>去<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">Github Auth Applications</a>为你的网站注册一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name: 应用名</span><br><span class=\"line\">Homepage URL: 你的网站地址 #eg. https://www.scarsu.com</span><br><span class=\"line\">Application description: 描述</span><br><span class=\"line\">Authorization callback URL: 你的网站地址 #如 https://www.scarsu.com</span><br></pre></td></tr></table></figure></p>\n<p>博客配置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitment</span></span><br><span class=\"line\"><span class=\"comment\"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span> <span class=\"string\">github用户名</span> <span class=\"comment\">## Your GitHub ID, 直接用GitHub用户名就可以</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">repo地址</span> <span class=\"comment\">## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的</span></span><br><span class=\"line\">    <span class=\"attr\">client_id:</span> <span class=\"string\">刚才申请的ClientID</span> <span class=\"comment\">## GitHub client ID</span></span><br><span class=\"line\">    <span class=\"attr\">client_secret:</span> <span class=\"string\">刚才申请的ClientSecret</span> <span class=\"comment\">## GitHub client secret</span></span><br></pre></td></tr></table></figure></p>\n<p>本地安装gitment，并在项目中添加依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitment</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>Disqus</strong>[需要Q，已经弃用-20191212]<br>在disqus官网注册账户，在主题配置文件中开启disqus评论控件:<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Comment 评论相关</span></span><br><span class=\"line\"><span class=\"attr\">disqus:</span> <span class=\"string\">username</span> <span class=\"comment\">## Disqus评论 Your disqus_shortname, e.g. username</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><h4 id=\"谷歌网站收录-链接\"><a href=\"#谷歌网站收录-链接\" class=\"headerlink\" title=\"谷歌网站收录 链接\"></a>谷歌网站收录 <a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>先录入资源类型：域名/网站,录入后需要验证所有权</li>\n</ul>\n<p><img src=\"/images/google_search.png\" alt></p>\n<ul>\n<li>域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）</li>\n<li>网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证</li>\n</ul>\n<p><img src=\"/images/google_search2.png\" alt></p>\n<ul>\n<li>域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条<code>txt类型</code>的<code>dns记录</code>，值为上图中谷歌给出的<code>txt值</code>，name选择<code>@</code>即可：</li>\n</ul>\n<p><img src=\"/images/google_search3.png\" alt></p>\n<ul>\n<li><p>下图为验证成功截图：<br><img src=\"/images/google_search4.png\" alt></p>\n</li>\n<li><p>验证通过后一天，就可以在<a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">google search console</a>中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。</p>\n</li>\n<li><p>收录后，在google<a href=\"https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&amp;ei=2TkEXsejM5CqoAS0mpjYAw&amp;q=scarsu&amp;oq=scarsu&amp;gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&amp;ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&amp;uact=5\" target=\"_blank\" rel=\"noopener\">搜索</a>我的网站的关键词，就可以在第一条看到结果:</p>\n</li>\n</ul>\n<p><img src=\"/images/google_search5.png\" alt></p>\n<h4 id=\"百度链接提交工具-链接\"><a href=\"#百度链接提交工具-链接\" class=\"headerlink\" title=\"百度链接提交工具 链接\"></a>百度链接提交工具 <a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>百度链接提交工具使用说明</p>\n<blockquote>\n<ol>\n<li>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题</li>\n<li>百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接</li>\n</ol>\n</blockquote>\n<p>如：我提交自己的<a href=\"http://www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\" target=\"_blank\" rel=\"noopener\">www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：</a></p>\n<p><img src=\"/images/blog/scarsu-baidu.jpg\" alt></p>\n<h4 id=\"神马搜索站长平台-链接\"><a href=\"#神马搜索站长平台-链接\" class=\"headerlink\" title=\"神马搜索站长平台 链接\"></a>神马搜索站长平台 <a href=\"https://zhanzhang.sm.cn/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：<br><img src=\"/images/blog/shenma.pngs\" alt=\"神马验证\"></p>\n<p>后来才检索到，是神马不支持对https的站点进行验证，。</p>\n<p>由于我的站点部署在netlify上，因此决定放弃神马平台的收录</p>\n<h4 id=\"Bing-网站收录链接\"><a href=\"#Bing-网站收录链接\" class=\"headerlink\" title=\"Bing 网站收录链接\"></a>Bing 网站收录<a href=\"https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示<code>Anonymous URL Submission Tool Being Retired</code>，即Bing的匿名URL提交工具已经停用。</li>\n</ul>\n<h4 id=\"360网站收录链接\"><a href=\"#360网站收录链接\" class=\"headerlink\" title=\"360网站收录链接\"></a>360网站收录<a href=\"http://info.so.360.cn/site_submit.html\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n</ul>\n<h4 id=\"搜狗收录-链接\"><a href=\"#搜狗收录-链接\" class=\"headerlink\" title=\"搜狗收录 链接\"></a>搜狗收录 <a href=\"http://fankui.help.sogou.com/index.php/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n<li><h4 id=\"提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\"><a href=\"#提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\" class=\"headerlink\" title=\"提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\"></a>提交至 “中文独立博客列表” <a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">https://github.com/timqian/chinese-independent-blogs</a></h4></li>\n</ul>\n<p>fork<a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">此仓库</a>，blogs-original.csv中维护自己的博客后，提pull request即可。</p>\n<hr>\n<pre><code>“不疯魔 不成活”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>gitbook文章全部迁移至blog，gitbook废弃</li>\n<li><strong>全部文章</strong>tab页，文章标题下的描述，改为隐藏，hover泡泡显示</li>\n<li>响应式重构</li>\n</ul>\n<h2 id=\"变更记录\"><a href=\"#变更记录\" class=\"headerlink\" title=\"变更记录\"></a>变更记录</h2><ul>\n<li>用腾讯兔小巢搭留言板</li>\n<li><strong>全部文章</strong>tab页，文章标题下增加描述</li>\n<li>从<strong>emojipedia.org</strong>添加全站emoji</li>\n<li>页首布局更改为一行，去除gitbook链接</li>\n<li>增加暗色模式</li>\n<li>rss链接改为打开新页面</li>\n<li>替换幼稚的置顶按钮</li>\n<li>增加apps在线工具tab</li>\n<li>博客计时<br><img src=\"/images/blog/blog-counter.gifs\" alt=\"博客计时\"></li>\n<li>Gitbook</li>\n<li>Google Adsense广告</li>\n<li>categories分类排序</li>\n<li>返回顶部控件</li>\n</ul>\n<h2 id=\"主题-amp-个性化样式\"><a href=\"#主题-amp-个性化样式\" class=\"headerlink\" title=\"主题 &amp; 个性化样式\"></a>主题 &amp; 个性化样式</h2><h4 id=\"1-Hexo-主题：Maupassant-Theme\"><a href=\"#1-Hexo-主题：Maupassant-Theme\" class=\"headerlink\" title=\"1. Hexo 主题：Maupassant Theme\"></a>1. Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></h4><p>挑主题的时候一眼就看上了这个主题，简约直白X冷淡</p>\n<h4 id=\"2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"><a href=\"#2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\" class=\"headerlink\" title=\"2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"></a>2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式</h4><p>以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。</p>\n<p>有需要可以去<a href=\"https://github.com/scarsu/ScarSuHexo_Netlify.git\" target=\"_blank\" rel=\"noopener\">我的博客仓库</a>自取。</p>\n<h4 id=\"3-一些参考：\"><a href=\"#3-一些参考：\" class=\"headerlink\" title=\"3. 一些参考：\"></a>3. 一些参考：</h4><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://pugjs.org/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug模板语言文档</a></p>\n<p><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"配置腾讯公益404页面\"><a href=\"#配置腾讯公益404页面\" class=\"headerlink\" title=\"配置腾讯公益404页面\"></a>配置腾讯公益404页面</h2><ol>\n<li><p>在博客代码仓库的/source/404/路径下，新建index.md</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">toc: false</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">description: 腾讯404公益页面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;meta charset=\"UTF-8\" /&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;title&gt;404&lt;/title&gt;                                                </span></span><br><span class=\"line\"><span class=\"code\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/qqq</a>，直接输入/404路由也会出<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/404</a></p>\n</li>\n<li><p>可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。</p>\n</li>\n</ol>\n<h2 id=\"博客评论控件\"><a href=\"#博客评论控件\" class=\"headerlink\" title=\"博客评论控件\"></a>博客评论控件</h2><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a><strong>Gitment</strong></h4><p><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment repo</a></p>\n<p>去<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">Github Auth Applications</a>为你的网站注册一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name: 应用名</span><br><span class=\"line\">Homepage URL: 你的网站地址 #eg. https://www.scarsu.com</span><br><span class=\"line\">Application description: 描述</span><br><span class=\"line\">Authorization callback URL: 你的网站地址 #如 https://www.scarsu.com</span><br></pre></td></tr></table></figure></p>\n<p>博客配置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitment</span></span><br><span class=\"line\"><span class=\"comment\"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span> <span class=\"string\">github用户名</span> <span class=\"comment\">## Your GitHub ID, 直接用GitHub用户名就可以</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">repo地址</span> <span class=\"comment\">## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的</span></span><br><span class=\"line\">    <span class=\"attr\">client_id:</span> <span class=\"string\">刚才申请的ClientID</span> <span class=\"comment\">## GitHub client ID</span></span><br><span class=\"line\">    <span class=\"attr\">client_secret:</span> <span class=\"string\">刚才申请的ClientSecret</span> <span class=\"comment\">## GitHub client secret</span></span><br></pre></td></tr></table></figure></p>\n<p>本地安装gitment，并在项目中添加依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitment</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>Disqus</strong>[需要Q，已经弃用-20191212]<br>在disqus官网注册账户，在主题配置文件中开启disqus评论控件:<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Comment 评论相关</span></span><br><span class=\"line\"><span class=\"attr\">disqus:</span> <span class=\"string\">username</span> <span class=\"comment\">## Disqus评论 Your disqus_shortname, e.g. username</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><h4 id=\"谷歌网站收录-链接\"><a href=\"#谷歌网站收录-链接\" class=\"headerlink\" title=\"谷歌网站收录 链接\"></a>谷歌网站收录 <a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>先录入资源类型：域名/网站,录入后需要验证所有权</li>\n</ul>\n<p><img src=\"/images/google_search.png\" alt></p>\n<ul>\n<li>域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）</li>\n<li>网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证</li>\n</ul>\n<p><img src=\"/images/google_search2.png\" alt></p>\n<ul>\n<li>域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条<code>txt类型</code>的<code>dns记录</code>，值为上图中谷歌给出的<code>txt值</code>，name选择<code>@</code>即可：</li>\n</ul>\n<p><img src=\"/images/google_search3.png\" alt></p>\n<ul>\n<li><p>下图为验证成功截图：<br><img src=\"/images/google_search4.png\" alt></p>\n</li>\n<li><p>验证通过后一天，就可以在<a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">google search console</a>中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。</p>\n</li>\n<li><p>收录后，在google<a href=\"https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&amp;ei=2TkEXsejM5CqoAS0mpjYAw&amp;q=scarsu&amp;oq=scarsu&amp;gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&amp;ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&amp;uact=5\" target=\"_blank\" rel=\"noopener\">搜索</a>我的网站的关键词，就可以在第一条看到结果:</p>\n</li>\n</ul>\n<p><img src=\"/images/google_search5.png\" alt></p>\n<h4 id=\"百度链接提交工具-链接\"><a href=\"#百度链接提交工具-链接\" class=\"headerlink\" title=\"百度链接提交工具 链接\"></a>百度链接提交工具 <a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>百度链接提交工具使用说明</p>\n<blockquote>\n<ol>\n<li>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题</li>\n<li>百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接</li>\n</ol>\n</blockquote>\n<p>如：我提交自己的<a href=\"http://www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\" target=\"_blank\" rel=\"noopener\">www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：</a></p>\n<p><img src=\"/images/blog/scarsu-baidu.jpg\" alt></p>\n<h4 id=\"神马搜索站长平台-链接\"><a href=\"#神马搜索站长平台-链接\" class=\"headerlink\" title=\"神马搜索站长平台 链接\"></a>神马搜索站长平台 <a href=\"https://zhanzhang.sm.cn/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：<br><img src=\"/images/blog/shenma.pngs\" alt=\"神马验证\"></p>\n<p>后来才检索到，是神马不支持对https的站点进行验证，。</p>\n<p>由于我的站点部署在netlify上，因此决定放弃神马平台的收录</p>\n<h4 id=\"Bing-网站收录链接\"><a href=\"#Bing-网站收录链接\" class=\"headerlink\" title=\"Bing 网站收录链接\"></a>Bing 网站收录<a href=\"https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示<code>Anonymous URL Submission Tool Being Retired</code>，即Bing的匿名URL提交工具已经停用。</li>\n</ul>\n<h4 id=\"360网站收录链接\"><a href=\"#360网站收录链接\" class=\"headerlink\" title=\"360网站收录链接\"></a>360网站收录<a href=\"http://info.so.360.cn/site_submit.html\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n</ul>\n<h4 id=\"搜狗收录-链接\"><a href=\"#搜狗收录-链接\" class=\"headerlink\" title=\"搜狗收录 链接\"></a>搜狗收录 <a href=\"http://fankui.help.sogou.com/index.php/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n<li><h4 id=\"提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\"><a href=\"#提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\" class=\"headerlink\" title=\"提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\"></a>提交至 “中文独立博客列表” <a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">https://github.com/timqian/chinese-independent-blogs</a></h4></li>\n</ul>\n<p>fork<a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">此仓库</a>，blogs-original.csv中维护自己的博客后，提pull request即可。</p>\n<hr>\n<pre><code>“不疯魔 不成活”\n</code></pre>"},{"title":"如何更高效的成长 ——《刻意学习》读书输出","date":"2019-08-18T16:00:00.000Z","description":"提升执行力 | 持续精进 | 轻松成为更好的自己","toc":1,"top":0,"_content":"\n## 书的主旨 : 持续行动 + 持续学习\n\n## 为什么要持续行动\n\n#### 为了成长\n\n- 生而为成长，在这个变化万千的时代，不进则退。\n\n\n#### 跳出困境，重构现在与未来\n\n- 现状有多痛苦，过往有多不堪，持续行动就该有多深。\n- “悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。\n\n## 正确的自我认知\n\n#### 拒绝自我感动\n\n- 正是因为做得少，才容易“感动”，自欺欺人。\n- 提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃\n\n#### 拒绝“强及时反馈”\n\n- 我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。\n- 强及时反馈对复杂系统是不起作用的:\n\n| 复杂系统     | 行为     | 强及时反馈 |\n| ------------ | -------- | ---------- |\n| 人的身体系统 | 跑一次步 | 变瘦变健康 |\n| 大海         | 撒一泡尿 | 变脏       |\n\n#### 不要过度依赖技巧\n\n- 投机取巧是追求强即时反馈的表现\n- 过度追逐技巧的人，往往缺乏行动量\n- 能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧\n\n#### 不要标榜/贴标签，去行动\n\n- 通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。\n- 通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。\n\n#### 不要自我迷恋，高估自己\n\n- 不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。\n- 制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。\n\n#### 放大格局\n\n- 人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断\n- 时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键\n\n## 成长系统\n\n![](/images/continuous_action.png)\n\n## 如何行动\n\n#### 松散到紧凑\n\n- 建立合理的作息\n- 坚定的坚持下去\n\n#### 耐得住寂寞：没有成就感也要行动\n\n- 持续行动的要义就在于持续，不要以任何理由打破自己定下的原则\n- 不依靠透支未来的成就感，作为坚持下去的动力\n\n#### ​克服拖延\n\n- 五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。\n\n\n#### 放大对未来的感知\n\n- 提前完成任务，而不是到deadline\n- 不要高度自己的能力，低估自己完成任务所需的时间\n- 时刻警醒自己，让自己感知着未来不完成任务带来的后果\n\n#### 早起是拓宽增量\n\n- 更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。\n- 对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。\n- “拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。\n\n#### 投资资源（时间+金钱）\n\n- 首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱\n- 其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动\n\n#### 信息分级，对海量信息抗压\n\n- 面对海量的信息，不因噎废食，直接切断所有的信息源\n- 不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安\n- 形成对信息分级的系统，主动的对信息分级，知道自己想要什么\n\n## 关于n阶行动计划\n| 阶数 | 时长                 | 特点                                                                                               |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------- |\n| 一   | 10^1 = 10天，一个周  | 瓶颈在于执行力，行动系统有问题                                                                     |\n| 二   | 10^2 = 100天，三个月 | 瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局                               |\n| 三   | 10^3 = 1000天，三年  | 时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进 |\n| ...  | ...                  | ...                                                                                                |\n\n## 关于1000天持续行动计划\n\n#### 开局阶段：0-300天\n\n- 认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距\n- 仅能完成任务，倒逼自己\n\n#### 中盘持续阶段：200-600天\n\n- 补足不全，缩短“我能做的”和“我想做的”之间的差距\n- 能每天完成任务，并在其基础上有所进步\n\n#### 突破创新阶段：600-1000天\n\n- 突破现有的固定模式，打破思维惯性\n- 根据环境的改变，做出新的规划，升华行动\n\n\n<small>希望你看完，能做点什么</small>","source":"_posts/continuous_action.md","raw":"---\ntitle: 如何更高效的成长 ——《刻意学习》读书输出\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\ndate: 2019-08-19\ndescription: 提升执行力 | 持续精进 | 轻松成为更好的自己\ntoc: 1\ntop: 0\n---\n\n## 书的主旨 : 持续行动 + 持续学习\n\n## 为什么要持续行动\n\n#### 为了成长\n\n- 生而为成长，在这个变化万千的时代，不进则退。\n\n\n#### 跳出困境，重构现在与未来\n\n- 现状有多痛苦，过往有多不堪，持续行动就该有多深。\n- “悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。\n\n## 正确的自我认知\n\n#### 拒绝自我感动\n\n- 正是因为做得少，才容易“感动”，自欺欺人。\n- 提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃\n\n#### 拒绝“强及时反馈”\n\n- 我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。\n- 强及时反馈对复杂系统是不起作用的:\n\n| 复杂系统     | 行为     | 强及时反馈 |\n| ------------ | -------- | ---------- |\n| 人的身体系统 | 跑一次步 | 变瘦变健康 |\n| 大海         | 撒一泡尿 | 变脏       |\n\n#### 不要过度依赖技巧\n\n- 投机取巧是追求强即时反馈的表现\n- 过度追逐技巧的人，往往缺乏行动量\n- 能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧\n\n#### 不要标榜/贴标签，去行动\n\n- 通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。\n- 通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。\n\n#### 不要自我迷恋，高估自己\n\n- 不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。\n- 制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。\n\n#### 放大格局\n\n- 人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断\n- 时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键\n\n## 成长系统\n\n![](/images/continuous_action.png)\n\n## 如何行动\n\n#### 松散到紧凑\n\n- 建立合理的作息\n- 坚定的坚持下去\n\n#### 耐得住寂寞：没有成就感也要行动\n\n- 持续行动的要义就在于持续，不要以任何理由打破自己定下的原则\n- 不依靠透支未来的成就感，作为坚持下去的动力\n\n#### ​克服拖延\n\n- 五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。\n\n\n#### 放大对未来的感知\n\n- 提前完成任务，而不是到deadline\n- 不要高度自己的能力，低估自己完成任务所需的时间\n- 时刻警醒自己，让自己感知着未来不完成任务带来的后果\n\n#### 早起是拓宽增量\n\n- 更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。\n- 对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。\n- “拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。\n\n#### 投资资源（时间+金钱）\n\n- 首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱\n- 其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动\n\n#### 信息分级，对海量信息抗压\n\n- 面对海量的信息，不因噎废食，直接切断所有的信息源\n- 不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安\n- 形成对信息分级的系统，主动的对信息分级，知道自己想要什么\n\n## 关于n阶行动计划\n| 阶数 | 时长                 | 特点                                                                                               |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------- |\n| 一   | 10^1 = 10天，一个周  | 瓶颈在于执行力，行动系统有问题                                                                     |\n| 二   | 10^2 = 100天，三个月 | 瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局                               |\n| 三   | 10^3 = 1000天，三年  | 时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进 |\n| ...  | ...                  | ...                                                                                                |\n\n## 关于1000天持续行动计划\n\n#### 开局阶段：0-300天\n\n- 认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距\n- 仅能完成任务，倒逼自己\n\n#### 中盘持续阶段：200-600天\n\n- 补足不全，缩短“我能做的”和“我想做的”之间的差距\n- 能每天完成任务，并在其基础上有所进步\n\n#### 突破创新阶段：600-1000天\n\n- 突破现有的固定模式，打破思维惯性\n- 根据环境的改变，做出新的规划，升华行动\n\n\n<small>希望你看完，能做点什么</small>","slug":"continuous_action","published":1,"updated":"2020-04-08T00:43:01.121Z","_id":"ck94a9ap4000w07s6f4dfgpm6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"书的主旨-持续行动-持续学习\"><a href=\"#书的主旨-持续行动-持续学习\" class=\"headerlink\" title=\"书的主旨 : 持续行动 + 持续学习\"></a>书的主旨 : 持续行动 + 持续学习</h2><h2 id=\"为什么要持续行动\"><a href=\"#为什么要持续行动\" class=\"headerlink\" title=\"为什么要持续行动\"></a>为什么要持续行动</h2><h4 id=\"为了成长\"><a href=\"#为了成长\" class=\"headerlink\" title=\"为了成长\"></a>为了成长</h4><ul>\n<li>生而为成长，在这个变化万千的时代，不进则退。</li>\n</ul>\n<h4 id=\"跳出困境，重构现在与未来\"><a href=\"#跳出困境，重构现在与未来\" class=\"headerlink\" title=\"跳出困境，重构现在与未来\"></a>跳出困境，重构现在与未来</h4><ul>\n<li>现状有多痛苦，过往有多不堪，持续行动就该有多深。</li>\n<li>“悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。</li>\n</ul>\n<h2 id=\"正确的自我认知\"><a href=\"#正确的自我认知\" class=\"headerlink\" title=\"正确的自我认知\"></a>正确的自我认知</h2><h4 id=\"拒绝自我感动\"><a href=\"#拒绝自我感动\" class=\"headerlink\" title=\"拒绝自我感动\"></a>拒绝自我感动</h4><ul>\n<li>正是因为做得少，才容易“感动”，自欺欺人。</li>\n<li>提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃</li>\n</ul>\n<h4 id=\"拒绝“强及时反馈”\"><a href=\"#拒绝“强及时反馈”\" class=\"headerlink\" title=\"拒绝“强及时反馈”\"></a>拒绝“强及时反馈”</h4><ul>\n<li>我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。</li>\n<li>强及时反馈对复杂系统是不起作用的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>复杂系统</th>\n<th>行为</th>\n<th>强及时反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人的身体系统</td>\n<td>跑一次步</td>\n<td>变瘦变健康</td>\n</tr>\n<tr>\n<td>大海</td>\n<td>撒一泡尿</td>\n<td>变脏</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"不要过度依赖技巧\"><a href=\"#不要过度依赖技巧\" class=\"headerlink\" title=\"不要过度依赖技巧\"></a>不要过度依赖技巧</h4><ul>\n<li>投机取巧是追求强即时反馈的表现</li>\n<li>过度追逐技巧的人，往往缺乏行动量</li>\n<li>能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧</li>\n</ul>\n<h4 id=\"不要标榜-贴标签，去行动\"><a href=\"#不要标榜-贴标签，去行动\" class=\"headerlink\" title=\"不要标榜/贴标签，去行动\"></a>不要标榜/贴标签，去行动</h4><ul>\n<li>通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。</li>\n<li>通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。</li>\n</ul>\n<h4 id=\"不要自我迷恋，高估自己\"><a href=\"#不要自我迷恋，高估自己\" class=\"headerlink\" title=\"不要自我迷恋，高估自己\"></a>不要自我迷恋，高估自己</h4><ul>\n<li>不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。</li>\n<li>制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。</li>\n</ul>\n<h4 id=\"放大格局\"><a href=\"#放大格局\" class=\"headerlink\" title=\"放大格局\"></a>放大格局</h4><ul>\n<li>人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断</li>\n<li>时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键</li>\n</ul>\n<h2 id=\"成长系统\"><a href=\"#成长系统\" class=\"headerlink\" title=\"成长系统\"></a>成长系统</h2><p><img src=\"/images/continuous_action.png\" alt></p>\n<h2 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h2><h4 id=\"松散到紧凑\"><a href=\"#松散到紧凑\" class=\"headerlink\" title=\"松散到紧凑\"></a>松散到紧凑</h4><ul>\n<li>建立合理的作息</li>\n<li>坚定的坚持下去</li>\n</ul>\n<h4 id=\"耐得住寂寞：没有成就感也要行动\"><a href=\"#耐得住寂寞：没有成就感也要行动\" class=\"headerlink\" title=\"耐得住寂寞：没有成就感也要行动\"></a>耐得住寂寞：没有成就感也要行动</h4><ul>\n<li>持续行动的要义就在于持续，不要以任何理由打破自己定下的原则</li>\n<li>不依靠透支未来的成就感，作为坚持下去的动力</li>\n</ul>\n<h4 id=\"​克服拖延\"><a href=\"#​克服拖延\" class=\"headerlink\" title=\"​克服拖延\"></a>​克服拖延</h4><ul>\n<li>五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。</li>\n</ul>\n<h4 id=\"放大对未来的感知\"><a href=\"#放大对未来的感知\" class=\"headerlink\" title=\"放大对未来的感知\"></a>放大对未来的感知</h4><ul>\n<li>提前完成任务，而不是到deadline</li>\n<li>不要高度自己的能力，低估自己完成任务所需的时间</li>\n<li>时刻警醒自己，让自己感知着未来不完成任务带来的后果</li>\n</ul>\n<h4 id=\"早起是拓宽增量\"><a href=\"#早起是拓宽增量\" class=\"headerlink\" title=\"早起是拓宽增量\"></a>早起是拓宽增量</h4><ul>\n<li>更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。</li>\n<li>对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。</li>\n<li>“拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。</li>\n</ul>\n<h4 id=\"投资资源（时间-金钱）\"><a href=\"#投资资源（时间-金钱）\" class=\"headerlink\" title=\"投资资源（时间+金钱）\"></a>投资资源（时间+金钱）</h4><ul>\n<li>首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱</li>\n<li>其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动</li>\n</ul>\n<h4 id=\"信息分级，对海量信息抗压\"><a href=\"#信息分级，对海量信息抗压\" class=\"headerlink\" title=\"信息分级，对海量信息抗压\"></a>信息分级，对海量信息抗压</h4><ul>\n<li>面对海量的信息，不因噎废食，直接切断所有的信息源</li>\n<li>不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安</li>\n<li>形成对信息分级的系统，主动的对信息分级，知道自己想要什么</li>\n</ul>\n<h2 id=\"关于n阶行动计划\"><a href=\"#关于n阶行动计划\" class=\"headerlink\" title=\"关于n阶行动计划\"></a>关于n阶行动计划</h2><table>\n<thead>\n<tr>\n<th>阶数</th>\n<th>时长</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一</td>\n<td>10^1 = 10天，一个周</td>\n<td>瓶颈在于执行力，行动系统有问题</td>\n</tr>\n<tr>\n<td>二</td>\n<td>10^2 = 100天，三个月</td>\n<td>瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局</td>\n</tr>\n<tr>\n<td>三</td>\n<td>10^3 = 1000天，三年</td>\n<td>时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于1000天持续行动计划\"><a href=\"#关于1000天持续行动计划\" class=\"headerlink\" title=\"关于1000天持续行动计划\"></a>关于1000天持续行动计划</h2><h4 id=\"开局阶段：0-300天\"><a href=\"#开局阶段：0-300天\" class=\"headerlink\" title=\"开局阶段：0-300天\"></a>开局阶段：0-300天</h4><ul>\n<li>认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距</li>\n<li>仅能完成任务，倒逼自己</li>\n</ul>\n<h4 id=\"中盘持续阶段：200-600天\"><a href=\"#中盘持续阶段：200-600天\" class=\"headerlink\" title=\"中盘持续阶段：200-600天\"></a>中盘持续阶段：200-600天</h4><ul>\n<li>补足不全，缩短“我能做的”和“我想做的”之间的差距</li>\n<li>能每天完成任务，并在其基础上有所进步</li>\n</ul>\n<h4 id=\"突破创新阶段：600-1000天\"><a href=\"#突破创新阶段：600-1000天\" class=\"headerlink\" title=\"突破创新阶段：600-1000天\"></a>突破创新阶段：600-1000天</h4><ul>\n<li>突破现有的固定模式，打破思维惯性</li>\n<li>根据环境的改变，做出新的规划，升华行动</li>\n</ul>\n<p><small>希望你看完，能做点什么</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"书的主旨-持续行动-持续学习\"><a href=\"#书的主旨-持续行动-持续学习\" class=\"headerlink\" title=\"书的主旨 : 持续行动 + 持续学习\"></a>书的主旨 : 持续行动 + 持续学习</h2><h2 id=\"为什么要持续行动\"><a href=\"#为什么要持续行动\" class=\"headerlink\" title=\"为什么要持续行动\"></a>为什么要持续行动</h2><h4 id=\"为了成长\"><a href=\"#为了成长\" class=\"headerlink\" title=\"为了成长\"></a>为了成长</h4><ul>\n<li>生而为成长，在这个变化万千的时代，不进则退。</li>\n</ul>\n<h4 id=\"跳出困境，重构现在与未来\"><a href=\"#跳出困境，重构现在与未来\" class=\"headerlink\" title=\"跳出困境，重构现在与未来\"></a>跳出困境，重构现在与未来</h4><ul>\n<li>现状有多痛苦，过往有多不堪，持续行动就该有多深。</li>\n<li>“悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。</li>\n</ul>\n<h2 id=\"正确的自我认知\"><a href=\"#正确的自我认知\" class=\"headerlink\" title=\"正确的自我认知\"></a>正确的自我认知</h2><h4 id=\"拒绝自我感动\"><a href=\"#拒绝自我感动\" class=\"headerlink\" title=\"拒绝自我感动\"></a>拒绝自我感动</h4><ul>\n<li>正是因为做得少，才容易“感动”，自欺欺人。</li>\n<li>提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃</li>\n</ul>\n<h4 id=\"拒绝“强及时反馈”\"><a href=\"#拒绝“强及时反馈”\" class=\"headerlink\" title=\"拒绝“强及时反馈”\"></a>拒绝“强及时反馈”</h4><ul>\n<li>我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。</li>\n<li>强及时反馈对复杂系统是不起作用的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>复杂系统</th>\n<th>行为</th>\n<th>强及时反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人的身体系统</td>\n<td>跑一次步</td>\n<td>变瘦变健康</td>\n</tr>\n<tr>\n<td>大海</td>\n<td>撒一泡尿</td>\n<td>变脏</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"不要过度依赖技巧\"><a href=\"#不要过度依赖技巧\" class=\"headerlink\" title=\"不要过度依赖技巧\"></a>不要过度依赖技巧</h4><ul>\n<li>投机取巧是追求强即时反馈的表现</li>\n<li>过度追逐技巧的人，往往缺乏行动量</li>\n<li>能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧</li>\n</ul>\n<h4 id=\"不要标榜-贴标签，去行动\"><a href=\"#不要标榜-贴标签，去行动\" class=\"headerlink\" title=\"不要标榜/贴标签，去行动\"></a>不要标榜/贴标签，去行动</h4><ul>\n<li>通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。</li>\n<li>通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。</li>\n</ul>\n<h4 id=\"不要自我迷恋，高估自己\"><a href=\"#不要自我迷恋，高估自己\" class=\"headerlink\" title=\"不要自我迷恋，高估自己\"></a>不要自我迷恋，高估自己</h4><ul>\n<li>不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。</li>\n<li>制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。</li>\n</ul>\n<h4 id=\"放大格局\"><a href=\"#放大格局\" class=\"headerlink\" title=\"放大格局\"></a>放大格局</h4><ul>\n<li>人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断</li>\n<li>时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键</li>\n</ul>\n<h2 id=\"成长系统\"><a href=\"#成长系统\" class=\"headerlink\" title=\"成长系统\"></a>成长系统</h2><p><img src=\"/images/continuous_action.png\" alt></p>\n<h2 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h2><h4 id=\"松散到紧凑\"><a href=\"#松散到紧凑\" class=\"headerlink\" title=\"松散到紧凑\"></a>松散到紧凑</h4><ul>\n<li>建立合理的作息</li>\n<li>坚定的坚持下去</li>\n</ul>\n<h4 id=\"耐得住寂寞：没有成就感也要行动\"><a href=\"#耐得住寂寞：没有成就感也要行动\" class=\"headerlink\" title=\"耐得住寂寞：没有成就感也要行动\"></a>耐得住寂寞：没有成就感也要行动</h4><ul>\n<li>持续行动的要义就在于持续，不要以任何理由打破自己定下的原则</li>\n<li>不依靠透支未来的成就感，作为坚持下去的动力</li>\n</ul>\n<h4 id=\"​克服拖延\"><a href=\"#​克服拖延\" class=\"headerlink\" title=\"​克服拖延\"></a>​克服拖延</h4><ul>\n<li>五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。</li>\n</ul>\n<h4 id=\"放大对未来的感知\"><a href=\"#放大对未来的感知\" class=\"headerlink\" title=\"放大对未来的感知\"></a>放大对未来的感知</h4><ul>\n<li>提前完成任务，而不是到deadline</li>\n<li>不要高度自己的能力，低估自己完成任务所需的时间</li>\n<li>时刻警醒自己，让自己感知着未来不完成任务带来的后果</li>\n</ul>\n<h4 id=\"早起是拓宽增量\"><a href=\"#早起是拓宽增量\" class=\"headerlink\" title=\"早起是拓宽增量\"></a>早起是拓宽增量</h4><ul>\n<li>更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。</li>\n<li>对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。</li>\n<li>“拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。</li>\n</ul>\n<h4 id=\"投资资源（时间-金钱）\"><a href=\"#投资资源（时间-金钱）\" class=\"headerlink\" title=\"投资资源（时间+金钱）\"></a>投资资源（时间+金钱）</h4><ul>\n<li>首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱</li>\n<li>其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动</li>\n</ul>\n<h4 id=\"信息分级，对海量信息抗压\"><a href=\"#信息分级，对海量信息抗压\" class=\"headerlink\" title=\"信息分级，对海量信息抗压\"></a>信息分级，对海量信息抗压</h4><ul>\n<li>面对海量的信息，不因噎废食，直接切断所有的信息源</li>\n<li>不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安</li>\n<li>形成对信息分级的系统，主动的对信息分级，知道自己想要什么</li>\n</ul>\n<h2 id=\"关于n阶行动计划\"><a href=\"#关于n阶行动计划\" class=\"headerlink\" title=\"关于n阶行动计划\"></a>关于n阶行动计划</h2><table>\n<thead>\n<tr>\n<th>阶数</th>\n<th>时长</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一</td>\n<td>10^1 = 10天，一个周</td>\n<td>瓶颈在于执行力，行动系统有问题</td>\n</tr>\n<tr>\n<td>二</td>\n<td>10^2 = 100天，三个月</td>\n<td>瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局</td>\n</tr>\n<tr>\n<td>三</td>\n<td>10^3 = 1000天，三年</td>\n<td>时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于1000天持续行动计划\"><a href=\"#关于1000天持续行动计划\" class=\"headerlink\" title=\"关于1000天持续行动计划\"></a>关于1000天持续行动计划</h2><h4 id=\"开局阶段：0-300天\"><a href=\"#开局阶段：0-300天\" class=\"headerlink\" title=\"开局阶段：0-300天\"></a>开局阶段：0-300天</h4><ul>\n<li>认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距</li>\n<li>仅能完成任务，倒逼自己</li>\n</ul>\n<h4 id=\"中盘持续阶段：200-600天\"><a href=\"#中盘持续阶段：200-600天\" class=\"headerlink\" title=\"中盘持续阶段：200-600天\"></a>中盘持续阶段：200-600天</h4><ul>\n<li>补足不全，缩短“我能做的”和“我想做的”之间的差距</li>\n<li>能每天完成任务，并在其基础上有所进步</li>\n</ul>\n<h4 id=\"突破创新阶段：600-1000天\"><a href=\"#突破创新阶段：600-1000天\" class=\"headerlink\" title=\"突破创新阶段：600-1000天\"></a>突破创新阶段：600-1000天</h4><ul>\n<li>突破现有的固定模式，打破思维惯性</li>\n<li>根据环境的改变，做出新的规划，升华行动</li>\n</ul>\n<p><small>希望你看完，能做点什么</small></p>\n"},{"title":"用chrome调试node.js服务端代码","date":"2018-07-29T16:00:00.000Z","description":"不然你想用什么调试？","toc":1,"top":0,"_content":"\n### 开启调试命令\n\n```\nnode --inspect app.js\n\n//在第一行就停下来等待调试,也可以使用\nnode --inspect-brk app.js\n```\n\n### debugger 地址\n\n```\n//运行开启调试命令后，能看到类似如下的输出：\nDebugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a\nFor help see https://nodejs.org/en/docs/inspector\n```\n\n### 在 chrome 中打开 debugger\n\n```\n在Chrome中打开chrome://inspect/#devices\n点击inspect进入调试界面\n```\n\n### debugger 端口\n\ninspect 调试默认监听 9229 端口,可以通过下面的参数指定端口\n\n```\n--inspect=9222\n```\n\n---\n\n    用VSC、用webstorm啊\n    对不起我懒(～﹃～)~zZ\n","source":"_posts/debug_node.js_with_chrome.md","raw":"---\ntitle: 用chrome调试node.js服务端代码\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2018-07-30\ndescription: 不然你想用什么调试？\ntoc: 1\ntop: 0\n---\n\n### 开启调试命令\n\n```\nnode --inspect app.js\n\n//在第一行就停下来等待调试,也可以使用\nnode --inspect-brk app.js\n```\n\n### debugger 地址\n\n```\n//运行开启调试命令后，能看到类似如下的输出：\nDebugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a\nFor help see https://nodejs.org/en/docs/inspector\n```\n\n### 在 chrome 中打开 debugger\n\n```\n在Chrome中打开chrome://inspect/#devices\n点击inspect进入调试界面\n```\n\n### debugger 端口\n\ninspect 调试默认监听 9229 端口,可以通过下面的参数指定端口\n\n```\n--inspect=9222\n```\n\n---\n\n    用VSC、用webstorm啊\n    对不起我懒(～﹃～)~zZ\n","slug":"debug_node.js_with_chrome","published":1,"updated":"2020-04-08T00:43:01.122Z","_id":"ck94a9ap5000z07s6wurt2j2o","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"开启调试命令\"><a href=\"#开启调试命令\" class=\"headerlink\" title=\"开启调试命令\"></a>开启调试命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect app.js</span><br><span class=\"line\"></span><br><span class=\"line\">//在第一行就停下来等待调试,也可以使用</span><br><span class=\"line\">node --inspect-brk app.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-地址\"><a href=\"#debugger-地址\" class=\"headerlink\" title=\"debugger 地址\"></a>debugger 地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行开启调试命令后，能看到类似如下的输出：</span><br><span class=\"line\">Debugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a</span><br><span class=\"line\">For help see https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-chrome-中打开-debugger\"><a href=\"#在-chrome-中打开-debugger\" class=\"headerlink\" title=\"在 chrome 中打开 debugger\"></a>在 chrome 中打开 debugger</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Chrome中打开chrome://inspect/#devices</span><br><span class=\"line\">点击inspect进入调试界面</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-端口\"><a href=\"#debugger-端口\" class=\"headerlink\" title=\"debugger 端口\"></a>debugger 端口</h3><p>inspect 调试默认监听 9229 端口,可以通过下面的参数指定端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--inspect=9222</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>用VSC、用webstorm啊\n对不起我懒(～﹃～)~zZ\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开启调试命令\"><a href=\"#开启调试命令\" class=\"headerlink\" title=\"开启调试命令\"></a>开启调试命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect app.js</span><br><span class=\"line\"></span><br><span class=\"line\">//在第一行就停下来等待调试,也可以使用</span><br><span class=\"line\">node --inspect-brk app.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-地址\"><a href=\"#debugger-地址\" class=\"headerlink\" title=\"debugger 地址\"></a>debugger 地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行开启调试命令后，能看到类似如下的输出：</span><br><span class=\"line\">Debugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a</span><br><span class=\"line\">For help see https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-chrome-中打开-debugger\"><a href=\"#在-chrome-中打开-debugger\" class=\"headerlink\" title=\"在 chrome 中打开 debugger\"></a>在 chrome 中打开 debugger</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Chrome中打开chrome://inspect/#devices</span><br><span class=\"line\">点击inspect进入调试界面</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-端口\"><a href=\"#debugger-端口\" class=\"headerlink\" title=\"debugger 端口\"></a>debugger 端口</h3><p>inspect 调试默认监听 9229 端口,可以通过下面的参数指定端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--inspect=9222</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>用VSC、用webstorm啊\n对不起我懒(～﹃～)~zZ\n</code></pre>"},{"title":"Devtools 老司机养成 - 第二篇-Elements 面板","date":"2020-02-29T16:00:00.000Z","description":"样式顺手调，DOM实时改～","toc":1,"top":0,"_content":"\n## 界面概览\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png)\n\n## Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n## Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n## DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/07/29/5d3e52339265738563.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png)\n\n## Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png)\n\n## color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n## Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png)\n\n## Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/07/29/5d3e52728065d88131.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n## DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/07/29/5d3e5282c491d43866.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/07/29/5d3e529117f6c69468.png)\n\n## Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](https://i.loli.net/2019/07/29/5d3e52b143cc424671.png)\n\n## Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n","source":"_posts/devtools_02_elements.md","raw":"---\ntitle: Devtools 老司机养成 - 第二篇-Elements 面板\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-03-01\ndescription: 样式顺手调，DOM实时改～\ntoc: 1\ntop: 0\n---\n\n## 界面概览\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png)\n\n## Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n## Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n## DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/07/29/5d3e52339265738563.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png)\n\n## Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png)\n\n## color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n## Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png)\n\n## Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/07/29/5d3e52728065d88131.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n## DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/07/29/5d3e5282c491d43866.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/07/29/5d3e529117f6c69468.png)\n\n## Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](https://i.loli.net/2019/07/29/5d3e52b143cc424671.png)\n\n## Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n","slug":"devtools_02_elements","published":1,"updated":"2020-04-18T00:49:44.928Z","_id":"ck94a9ap6001107s6xvv3btjs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"界面概览\"><a href=\"#界面概览\" class=\"headerlink\" title=\"界面概览\"></a>界面概览</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png\" alt=\"Elements 面板\"></p>\n<h2 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h2><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h2 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h2><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h2 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h2><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/07/29/5d3e52339265738563.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h2 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h2><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png\" alt=\"0\"></p>\n<h2 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h2><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h2 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h2><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png\" alt=\"0\"></p>\n<h2 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h2><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52728065d88131.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h2 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h2><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5282c491d43866.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/07/29/5d3e529117f6c69468.png\" alt=\"0\"></p>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"https://i.loli.net/2019/07/29/5d3e52b143cc424671.png\" alt=\"0\"></p>\n<h2 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h2><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"界面概览\"><a href=\"#界面概览\" class=\"headerlink\" title=\"界面概览\"></a>界面概览</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png\" alt=\"Elements 面板\"></p>\n<h2 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h2><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h2 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h2><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h2 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h2><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/07/29/5d3e52339265738563.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h2 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h2><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png\" alt=\"0\"></p>\n<h2 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h2><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h2 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h2><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png\" alt=\"0\"></p>\n<h2 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h2><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52728065d88131.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h2 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h2><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5282c491d43866.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/07/29/5d3e529117f6c69468.png\" alt=\"0\"></p>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"https://i.loli.net/2019/07/29/5d3e52b143cc424671.png\" alt=\"0\"></p>\n<h2 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h2><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n"},{"title":"Devtools 老司机养成 - 第一篇Devtools介绍","date":"2020-02-22T16:00:00.000Z","description":"前端开发调试第一利器，关于devtools的信息，都在这里","toc":1,"top":0,"_content":"\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)和 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [Devtools脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n","source":"_posts/devtools_01_intro.md","raw":"---\ntitle: Devtools 老司机养成 - 第一篇Devtools介绍\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-02-23\ndescription: 前端开发调试第一利器，关于devtools的信息，都在这里\ntoc: 1\ntop: 0\n---\n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)和 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [Devtools脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n","slug":"devtools_01_intro","published":1,"updated":"2020-04-18T00:49:44.925Z","_id":"ck94a9ap7001407s63rn39ggf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>和 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">Devtools脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>和 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">Devtools脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第三篇-Console 面板","date":"2020-03-07T16:00:00.000Z","description":"Console 面板是浏览器的控制台，也是 Devtools 的灵魂，只会console.log就过分啦～","toc":1,"top":0,"_content":"## 概览\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/07/29/5d3e5381c290f84642.png)\n\n## message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/07/29/5d3e53989dba574108.png)\n\n## javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n## 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n## console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/07/29/5d3e53c18483c36428.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif)\n\n## console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/07/29/5d3e54117f36b48748.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/07/29/5d3e541ed227433392.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/07/29/5d3e5480317cd69237.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/07/29/5d3e548f62a6723531.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/07/29/5d3e5494878e638089.png)\n","source":"_posts/devtools_03_console.md","raw":"---\ntitle: Devtools 老司机养成 - 第三篇-Console 面板\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-03-08\ndescription: Console 面板是浏览器的控制台，也是 Devtools 的灵魂，只会console.log就过分啦～\ntoc: 1\ntop: 0\n---\n## 概览\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/07/29/5d3e5381c290f84642.png)\n\n## message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/07/29/5d3e53989dba574108.png)\n\n## javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n## 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n## console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/07/29/5d3e53c18483c36428.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif)\n\n## console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/07/29/5d3e54117f36b48748.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/07/29/5d3e541ed227433392.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/07/29/5d3e5480317cd69237.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/07/29/5d3e548f62a6723531.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/07/29/5d3e5494878e638089.png)\n","slug":"devtools_03_console","published":1,"updated":"2020-04-18T00:49:44.932Z","_id":"ck94a9ap8001507s6nrkz1tcv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/07/29/5d3e5381c290f84642.png\" alt=\"0\"></p>\n<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53989dba574108.png\" alt=\"0\"></p>\n<h2 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h2><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h2 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h2><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h2 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h2><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c18483c36428.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif\" alt=\"0\"></li>\n</ul>\n<h2 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h2><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/07/29/5d3e54117f36b48748.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/07/29/5d3e541ed227433392.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/07/29/5d3e5480317cd69237.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/07/29/5d3e548f62a6723531.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/07/29/5d3e5494878e638089.png\" alt=\"0\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/07/29/5d3e5381c290f84642.png\" alt=\"0\"></p>\n<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53989dba574108.png\" alt=\"0\"></p>\n<h2 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h2><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h2 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h2><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h2 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h2><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c18483c36428.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif\" alt=\"0\"></li>\n</ul>\n<h2 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h2><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/07/29/5d3e54117f36b48748.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/07/29/5d3e541ed227433392.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/07/29/5d3e5480317cd69237.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/07/29/5d3e548f62a6723531.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/07/29/5d3e5494878e638089.png\" alt=\"0\"></li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第六篇 Performance 性能面板","date":"2020-03-28T16:00:00.000Z","description":"中高级前端都应该懂的性能分析&优化，都在Performance面板","toc":1,"top":0,"_content":"\n\n## 概览\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n## RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n## 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n## FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n## CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n## SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n## HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n## Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n## FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n## Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n## 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## 浏览器并发请求数\n- 现象：\n    同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。\n\n- 原因：\n    基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。\n\n- 导致：\n    有大量请求的站点，响应较慢，因为并发请求会被阻塞。\n\n-   ![不同浏览器的限制数](https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png)\n\n- 解决方法：\n  1. 用不同域名（hash domain，cookie free）\n    例如知乎的图片都是放在zhiimg.com域名下获取的。\n    cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。\n\n  2. 减少请求数\n  雪碧图\n  合并压缩css/js（另一个原因是为了减少重绘）\n  利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本\n  懒加载，出现再加载","source":"_posts/devtools_06_performance.md","raw":"---\ntitle: Devtools 老司机养成 - 第六篇 Performance 性能面板\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-03-29\ndescription: 中高级前端都应该懂的性能分析&优化，都在Performance面板\ntoc: 1\ntop: 0\n---\n\n\n## 概览\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n## RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n## 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n## FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n## CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n## SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n## HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n## Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n## FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n## Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n## 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## 浏览器并发请求数\n- 现象：\n    同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。\n\n- 原因：\n    基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。\n\n- 导致：\n    有大量请求的站点，响应较慢，因为并发请求会被阻塞。\n\n-   ![不同浏览器的限制数](https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png)\n\n- 解决方法：\n  1. 用不同域名（hash domain，cookie free）\n    例如知乎的图片都是放在zhiimg.com域名下获取的。\n    cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。\n\n  2. 减少请求数\n  雪碧图\n  合并压缩css/js（另一个原因是为了减少重绘）\n  利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本\n  懒加载，出现再加载","slug":"devtools_06_performance","published":1,"updated":"2020-04-20T01:02:16.263Z","_id":"ck94a9ap8001707s6axz2b1xm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h2 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h2 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h2><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h2 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h2 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h2 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h2><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h2 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h2 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h2><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h2 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h2><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h2 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h2><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h2 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"浏览器并发请求数\"><a href=\"#浏览器并发请求数\" class=\"headerlink\" title=\"浏览器并发请求数\"></a>浏览器并发请求数</h2><ul>\n<li><p>现象：<br>  同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。</p>\n</li>\n<li><p>原因：<br>  基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。</p>\n</li>\n<li><p>导致：<br>  有大量请求的站点，响应较慢，因为并发请求会被阻塞。</p>\n</li>\n<li><p><img src=\"https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png\" alt=\"不同浏览器的限制数\"></p>\n</li>\n<li><p>解决方法：</p>\n<ol>\n<li><p>用不同域名（hash domain，cookie free）<br>例如知乎的图片都是放在zhiimg.com域名下获取的。<br>cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。</p>\n</li>\n<li><p>减少请求数<br>雪碧图<br>合并压缩css/js（另一个原因是为了减少重绘）<br>利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本<br>懒加载，出现再加载</p>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h2 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h2 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h2><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h2 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h2 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h2 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h2><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h2 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h2 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h2><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h2 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h2><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h2 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h2><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h2 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"浏览器并发请求数\"><a href=\"#浏览器并发请求数\" class=\"headerlink\" title=\"浏览器并发请求数\"></a>浏览器并发请求数</h2><ul>\n<li><p>现象：<br>  同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。</p>\n</li>\n<li><p>原因：<br>  基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。</p>\n</li>\n<li><p>导致：<br>  有大量请求的站点，响应较慢，因为并发请求会被阻塞。</p>\n</li>\n<li><p><img src=\"https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png\" alt=\"不同浏览器的限制数\"></p>\n</li>\n<li><p>解决方法：</p>\n<ol>\n<li><p>用不同域名（hash domain，cookie free）<br>例如知乎的图片都是放在zhiimg.com域名下获取的。<br>cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。</p>\n</li>\n<li><p>减少请求数<br>雪碧图<br>合并压缩css/js（另一个原因是为了减少重绘）<br>利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本<br>懒加载，出现再加载</p>\n</li>\n</ol>\n</li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第七篇- Memory 内存","date":"2020-04-04T16:00:00.000Z","description":"你开的网页会卡吗？来Memory面板了解一下内存分析&内存泄漏","toc":1,"top":0,"_content":"\n## 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n## 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n## 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n## 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n## 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n## 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","source":"_posts/devtools_07_memory.md","raw":"---\ntitle: Devtools 老司机养成 - 第七篇- Memory 内存\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-04-05\ndescription: 你开的网页会卡吗？来Memory面板了解一下内存分析&内存泄漏\ntoc: 1\ntop: 0\n---\n\n## 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n## 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n## 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n## 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n## 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n## 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","slug":"devtools_07_memory","published":1,"updated":"2020-04-18T00:49:44.953Z","_id":"ck94a9ap9001a07s6hqx96r4d","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h2><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h2 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h2><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h2 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h2><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h2 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h2><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h2 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h2><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h2><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h2 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h2><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h2 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h2><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h2 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h2><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h2 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h2><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n"},{"title":"Notion为什么能让我放弃手帐","date":"2020-04-11T16:00:00.000Z","description":"自我管理,记录,自省,用意识控制生活，而非本能","toc":1,"top":0,"_content":"\n今天在逛今日热榜的时候，看到了一篇知乎的文章[“我的最后一款笔记应用-Notion”](https://zhuanlan.zhihu.com/p/49263306)，是种草notion的。\n\n\n![Notion/header.png](/images/notion/header.png)\n\n一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。\n\n直到今天，notion这款应用又重新进入我的视野，我被吸引了。\n\n原因是，近两年来，我一直在尝试用[手帐](https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&fromid=8657227&fr=aladdin)的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录......\n\n即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。\n\n低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。\n\n两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。\n\n当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对**markdown**的友好支持。\n\n模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。\n\n数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。\n\n![Notion/数据库模式](/images/notion/ds.png)\n\n页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：\n\n![Notion/页面灵活排版](/images/notion/home.png)\n\n---\n\n最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～\n\n这是我的[邀请链接](https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7),欢迎注册使用Notion\n\n---\n\n注：关于手账的意义：\n- 自我管理，自我规划，自律\n- 记录、温习回忆\n- 自省\n- 记录、调节情绪，解压\n- 用意识控制生活，而非本能","source":"_posts/e_journal_by_notion.md","raw":"---\ntitle: Notion为什么能让我放弃手帐\ncategories:\n    - 00 ScarSu # 一级分类\ntags:\ndate: 2020-04-12\ndescription: 自我管理,记录,自省,用意识控制生活，而非本能\ntoc: 1\ntop: 0\n---\n\n今天在逛今日热榜的时候，看到了一篇知乎的文章[“我的最后一款笔记应用-Notion”](https://zhuanlan.zhihu.com/p/49263306)，是种草notion的。\n\n\n![Notion/header.png](/images/notion/header.png)\n\n一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。\n\n直到今天，notion这款应用又重新进入我的视野，我被吸引了。\n\n原因是，近两年来，我一直在尝试用[手帐](https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&fromid=8657227&fr=aladdin)的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录......\n\n即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。\n\n低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。\n\n两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。\n\n当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对**markdown**的友好支持。\n\n模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。\n\n数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。\n\n![Notion/数据库模式](/images/notion/ds.png)\n\n页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：\n\n![Notion/页面灵活排版](/images/notion/home.png)\n\n---\n\n最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～\n\n这是我的[邀请链接](https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7),欢迎注册使用Notion\n\n---\n\n注：关于手账的意义：\n- 自我管理，自我规划，自律\n- 记录、温习回忆\n- 自省\n- 记录、调节情绪，解压\n- 用意识控制生活，而非本能","slug":"e_journal_by_notion","published":1,"updated":"2020-04-18T00:49:44.968Z","_id":"ck94a9apa001c07s6auydr4fa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天在逛今日热榜的时候，看到了一篇知乎的文章<a href=\"https://zhuanlan.zhihu.com/p/49263306\" target=\"_blank\" rel=\"noopener\">“我的最后一款笔记应用-Notion”</a>，是种草notion的。</p>\n<p><img src=\"/images/notion/header.png\" alt=\"Notion/header.png\"></p>\n<p>一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。</p>\n<p>直到今天，notion这款应用又重新进入我的视野，我被吸引了。</p>\n<p>原因是，近两年来，我一直在尝试用<a href=\"https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&amp;fromid=8657227&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">手帐</a>的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录……</p>\n<p>即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。</p>\n<p>低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。</p>\n<p>两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。</p>\n<p>当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对<strong>markdown</strong>的友好支持。</p>\n<p>模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。</p>\n<p>数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。</p>\n<p><img src=\"/images/notion/ds.png\" alt=\"Notion/数据库模式\"></p>\n<p>页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：</p>\n<p><img src=\"/images/notion/home.png\" alt=\"Notion/页面灵活排版\"></p>\n<hr>\n<p>最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～</p>\n<p>这是我的<a href=\"https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7\" target=\"_blank\" rel=\"noopener\">邀请链接</a>,欢迎注册使用Notion</p>\n<hr>\n<p>注：关于手账的意义：</p>\n<ul>\n<li>自我管理，自我规划，自律</li>\n<li>记录、温习回忆</li>\n<li>自省</li>\n<li>记录、调节情绪，解压</li>\n<li>用意识控制生活，而非本能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在逛今日热榜的时候，看到了一篇知乎的文章<a href=\"https://zhuanlan.zhihu.com/p/49263306\" target=\"_blank\" rel=\"noopener\">“我的最后一款笔记应用-Notion”</a>，是种草notion的。</p>\n<p><img src=\"/images/notion/header.png\" alt=\"Notion/header.png\"></p>\n<p>一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。</p>\n<p>直到今天，notion这款应用又重新进入我的视野，我被吸引了。</p>\n<p>原因是，近两年来，我一直在尝试用<a href=\"https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&amp;fromid=8657227&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">手帐</a>的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录……</p>\n<p>即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。</p>\n<p>低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。</p>\n<p>两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。</p>\n<p>当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对<strong>markdown</strong>的友好支持。</p>\n<p>模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。</p>\n<p>数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。</p>\n<p><img src=\"/images/notion/ds.png\" alt=\"Notion/数据库模式\"></p>\n<p>页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：</p>\n<p><img src=\"/images/notion/home.png\" alt=\"Notion/页面灵活排版\"></p>\n<hr>\n<p>最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～</p>\n<p>这是我的<a href=\"https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7\" target=\"_blank\" rel=\"noopener\">邀请链接</a>,欢迎注册使用Notion</p>\n<hr>\n<p>注：关于手账的意义：</p>\n<ul>\n<li>自我管理，自我规划，自律</li>\n<li>记录、温习回忆</li>\n<li>自省</li>\n<li>记录、调节情绪，解压</li>\n<li>用意识控制生活，而非本能</li>\n</ul>\n"},{"title":"我与这世界的距离","comments":1,"date":"1996-06-05T16:00:00.000Z","description":"一些胡言乱语","toc":0,"_content":"\n## 子 瓜 犭 虫\n```\n稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。\n\n“孤独”\n\n这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇\n\n足以撑起一个盛夏傍晚的巷子口，人味十足。\n\n夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜\n \n忽然觉得好像过了半辈子\n\n又好像只过了半分钟。\n```\n\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i></a>\n> **爆炸性压力才能带来爆炸性进步**\n> \n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n> \n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n> \n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n> \n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n> \n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n> \n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n> \n## 时光\n```\n小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。\n```\n\n## 《stronger》kelly clarkson\n```\nWhat doesn't kill you makes you stronger\nStand a little taller\nDoesn't mean I'm lonely when I'm alone\n```\n\n## 《Cheap Thrills》Sia\n```\nI don't need dollar bills to have fun\nI love cheap thrills\n我不需要用金钱来满足我的欲望\n```\n\n## 《Lolita》\n```\n洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。\n```\n\n<!-- ## control\n```\n我想压抑一些，再压抑一些，因为轻易表达的感情，像风一样易逝\n``` -->\n\n## 《阿甘正传》\n\n```\nlife's like a feather。\n```\n\n\n## 《하루하루》\n```\n离开时请不要回头\n以后活着也不要找我\n因为爱你\n没有一丝悔意\n所以请带着美好的回忆离去\n```\n\n## 《安娜·卡列尼娜》列夫·尼古拉耶维奇·托尔斯泰\n```\n“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”\n```\n\n## 阿德勒\n```\n“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”\n```\n\n## 享受平静才是生活的真谛\n>“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”\n\n\n## 看电影/阅读的意义是什么？\n \n> 谁看到的维度越多，世界在谁的眼中便越真实。\n> \n> 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。\n\n```\n认识这个世界，丰富认知维度。\n\n即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。\n```\n\n---\n     你的墓志铭上 要写什么？\n","source":"_posts/escape_from_the_world.md","raw":"---\ntitle: 我与这世界的距离 # 文章标题\ncategories:\n    - 00 ScarSu # 一级分类\ntags:\ncomments: true #开启评论\ndate: 1996-06-06\ndescription: 一些胡言乱语\ntoc: 0\n---\n\n## 子 瓜 犭 虫\n```\n稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。\n\n“孤独”\n\n这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇\n\n足以撑起一个盛夏傍晚的巷子口，人味十足。\n\n夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜\n \n忽然觉得好像过了半辈子\n\n又好像只过了半分钟。\n```\n\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i></a>\n> **爆炸性压力才能带来爆炸性进步**\n> \n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n> \n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n> \n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n> \n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n> \n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n> \n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n> \n## 时光\n```\n小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。\n```\n\n## 《stronger》kelly clarkson\n```\nWhat doesn't kill you makes you stronger\nStand a little taller\nDoesn't mean I'm lonely when I'm alone\n```\n\n## 《Cheap Thrills》Sia\n```\nI don't need dollar bills to have fun\nI love cheap thrills\n我不需要用金钱来满足我的欲望\n```\n\n## 《Lolita》\n```\n洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。\n```\n\n<!-- ## control\n```\n我想压抑一些，再压抑一些，因为轻易表达的感情，像风一样易逝\n``` -->\n\n## 《阿甘正传》\n\n```\nlife's like a feather。\n```\n\n\n## 《하루하루》\n```\n离开时请不要回头\n以后活着也不要找我\n因为爱你\n没有一丝悔意\n所以请带着美好的回忆离去\n```\n\n## 《安娜·卡列尼娜》列夫·尼古拉耶维奇·托尔斯泰\n```\n“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”\n```\n\n## 阿德勒\n```\n“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”\n```\n\n## 享受平静才是生活的真谛\n>“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”\n\n\n## 看电影/阅读的意义是什么？\n \n> 谁看到的维度越多，世界在谁的眼中便越真实。\n> \n> 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。\n\n```\n认识这个世界，丰富认知维度。\n\n即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。\n```\n\n---\n     你的墓志铭上 要写什么？\n","slug":"escape_from_the_world","published":1,"updated":"2020-04-08T00:43:01.123Z","_id":"ck94a9apb001f07s618fw84j8","layout":"post","photos":[],"link":"","content":"<h2 id=\"子-瓜-犭-虫\"><a href=\"#子-瓜-犭-虫\" class=\"headerlink\" title=\"子 瓜 犭 虫\"></a>子 瓜 犭 虫</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。</span><br><span class=\"line\"></span><br><span class=\"line\">“孤独”</span><br><span class=\"line\"></span><br><span class=\"line\">这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇</span><br><span class=\"line\"></span><br><span class=\"line\">足以撑起一个盛夏傍晚的巷子口，人味十足。</span><br><span class=\"line\"></span><br><span class=\"line\">夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜</span><br><span class=\"line\"> </span><br><span class=\"line\">忽然觉得好像过了半辈子</span><br><span class=\"line\"></span><br><span class=\"line\">又好像只过了半分钟。</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要趁年轻多学习\"><a href=\"#为什么要趁年轻多学习\" class=\"headerlink\" title=\"为什么要趁年轻多学习\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i></a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"时光\"><a href=\"#时光\" class=\"headerlink\" title=\"时光\"></a>时光</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。</span><br></pre></td></tr></table></figure>\n<h2 id=\"《stronger》kelly-clarkson\"><a href=\"#《stronger》kelly-clarkson\" class=\"headerlink\" title=\"《stronger》kelly clarkson\"></a>《stronger》kelly clarkson</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What doesn&apos;t kill you makes you stronger</span><br><span class=\"line\">Stand a little taller</span><br><span class=\"line\">Doesn&apos;t mean I&apos;m lonely when I&apos;m alone</span><br></pre></td></tr></table></figure>\n<h2 id=\"《Cheap-Thrills》Sia\"><a href=\"#《Cheap-Thrills》Sia\" class=\"headerlink\" title=\"《Cheap Thrills》Sia\"></a>《Cheap Thrills》Sia</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I don&apos;t need dollar bills to have fun</span><br><span class=\"line\">I love cheap thrills</span><br><span class=\"line\">我不需要用金钱来满足我的欲望</span><br></pre></td></tr></table></figure>\n<h2 id=\"《Lolita》\"><a href=\"#《Lolita》\" class=\"headerlink\" title=\"《Lolita》\"></a>《Lolita》</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。</span><br></pre></td></tr></table></figure>\n<!-- ## control\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我想压抑一些，再压抑一些，因为轻易表达的感情，像风一样易逝</span><br><span class=\"line\">``` --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 《阿甘正传》</span><br></pre></td></tr></table></figure>\n<p>life’s like a feather。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 《하루하루》</span><br></pre></td></tr></table></figure></p>\n<p>离开时请不要回头<br>以后活着也不要找我<br>因为爱你<br>没有一丝悔意<br>所以请带着美好的回忆离去<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 《安娜·卡列尼娜》列夫·尼古拉耶维奇·托尔斯泰</span><br></pre></td></tr></table></figure></p>\n<p>“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 阿德勒</span><br></pre></td></tr></table></figure></p>\n<p>“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 享受平静才是生活的真谛</span><br><span class=\"line\">&gt;“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 看电影/阅读的意义是什么？</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt; 谁看到的维度越多，世界在谁的眼中便越真实。</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。</span><br></pre></td></tr></table></figure></p>\n<p>认识这个世界，丰富认知维度。</p>\n<p>即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。<br><code>`</code></p>\n<hr>\n<pre><code>你的墓志铭上 要写什么？\n</code></pre>-->","site":{"data":{}},"excerpt":"","more":"<h2 id=\"子-瓜-犭-虫\"><a href=\"#子-瓜-犭-虫\" class=\"headerlink\" title=\"子 瓜 犭 虫\"></a>子 瓜 犭 虫</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。</span><br><span class=\"line\"></span><br><span class=\"line\">“孤独”</span><br><span class=\"line\"></span><br><span class=\"line\">这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇</span><br><span class=\"line\"></span><br><span class=\"line\">足以撑起一个盛夏傍晚的巷子口，人味十足。</span><br><span class=\"line\"></span><br><span class=\"line\">夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜</span><br><span class=\"line\"> </span><br><span class=\"line\">忽然觉得好像过了半辈子</span><br><span class=\"line\"></span><br><span class=\"line\">又好像只过了半分钟。</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要趁年轻多学习\"><a href=\"#为什么要趁年轻多学习\" class=\"headerlink\" title=\"为什么要趁年轻多学习\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i></a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"时光\"><a href=\"#时光\" class=\"headerlink\" title=\"时光\"></a>时光</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。</span><br></pre></td></tr></table></figure>\n<h2 id=\"《stronger》kelly-clarkson\"><a href=\"#《stronger》kelly-clarkson\" class=\"headerlink\" title=\"《stronger》kelly clarkson\"></a>《stronger》kelly clarkson</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What doesn&apos;t kill you makes you stronger</span><br><span class=\"line\">Stand a little taller</span><br><span class=\"line\">Doesn&apos;t mean I&apos;m lonely when I&apos;m alone</span><br></pre></td></tr></table></figure>\n<h2 id=\"《Cheap-Thrills》Sia\"><a href=\"#《Cheap-Thrills》Sia\" class=\"headerlink\" title=\"《Cheap Thrills》Sia\"></a>《Cheap Thrills》Sia</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I don&apos;t need dollar bills to have fun</span><br><span class=\"line\">I love cheap thrills</span><br><span class=\"line\">我不需要用金钱来满足我的欲望</span><br></pre></td></tr></table></figure>\n<h2 id=\"《Lolita》\"><a href=\"#《Lolita》\" class=\"headerlink\" title=\"《Lolita》\"></a>《Lolita》</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。</span><br></pre></td></tr></table></figure>\n<!-- ## control\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我想压抑一些，再压抑一些，因为轻易表达的感情，像风一样易逝</span><br><span class=\"line\">``` --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 《阿甘正传》</span><br></pre></td></tr></table></figure>\n<p>life’s like a feather。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 《하루하루》</span><br></pre></td></tr></table></figure></p>\n<p>离开时请不要回头<br>以后活着也不要找我<br>因为爱你<br>没有一丝悔意<br>所以请带着美好的回忆离去<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 《安娜·卡列尼娜》列夫·尼古拉耶维奇·托尔斯泰</span><br></pre></td></tr></table></figure></p>\n<p>“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 阿德勒</span><br></pre></td></tr></table></figure></p>\n<p>“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 享受平静才是生活的真谛</span><br><span class=\"line\">&gt;“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 看电影/阅读的意义是什么？</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt; 谁看到的维度越多，世界在谁的眼中便越真实。</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。</span><br></pre></td></tr></table></figure></p>\n<p>认识这个世界，丰富认知维度。</p>\n<p>即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。<br><code>`</code></p>\n<hr>\n<pre><code>你的墓志铭上 要写什么？\n</code></pre>-->"},{"title":"ML01 机器学习&神经网络简介","date":"2019-12-24T16:00:00.000Z","description":"Javascript玩转机器学习01","toc":1,"top":0,"_content":"## 大纲\n- 理论知识：机器学习、神经网络、 Tensorflow. js\n- 经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识\n别、商标识别、语音识别\n- 神经网络模型：从单个神经元到深度神经网络\n- 神经网络模型算法：MSE/Log/ Cross Entropy\nSigmoid/Relu/Softmax， SGD/Adam\n- 炼丹最佳实践：归化、欠（过）拟合、可视化、度量\n- 模型的迁移学习、保存、加载、转换\n\n## 为什么要学机器学习\n可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的[模型](https://www.tensorflow.org/js/models)\n\n例如，[BodyPix](https://github.com/tensorflow/tfjs-models/tree/master/body-pix)：实时分割人的身体和身体部位\n\n![body-pix](/images/ai/000.gif)\n\n[图像分类](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet),\n[文本恶意检测](https://github.com/tensorflow/tfjs-models/tree/master/toxicity),\n[语音指令识别](https://github.com/tensorflow/tfjs-models/tree/master/speech-commands),\n[...](https://www.tensorflow.org/js/models)\n\n\n## 机器学习是什么\n```\n数据 + 经验 -> 优化算法\n```\n- 对能**通过经验自动改进算法**的研究\n- 用**数据**或者以往的**经验**，来优化计算机程序的性能标准\n\n## 机器学习例子：线性回归\n- 只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\n\n![线性回归](/images/ai/01.png)\n\n- 如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\n\n![多元线性回归](/images/ai/02.png)\n\n## 机器学习例子：逻辑回归\n- 输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题\n\n![逻辑回归](/images/ai/03.png)\n\n- 例子：图片分类、语音助手\n\n![逻辑回归：图片分类](/images/ai/04.png)\n\n\n## 为什么要用机器学习\n- 有些问题无法用编写代码规则的方法来解决，例如图片识别。\n- 获取数据比编写规则更容易\n- GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展\n\n\n## 机器学习如何运作\n- 神经网络\n- 决策树、支持向量机、贝叶斯分类器、强化学习\n\n## 什么是神经网络\n- 人工神经网络\n- 一种运算模型（输入输出的映射）\n- 由大量的节点（神经元）之间相互连接构成\n\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n\n- 神经网路包括：一个输入层，若干隐藏层，一个输出层。\n- 每条线的权重可能不同\n\n## 神经元、权重、偏置、激活函数\n- 每个神经元里都存储着若干**权重wight**、**偏置bias**和一个**激活函数activation**\n- 输入**权重 + 偏置**，经过**激活函数**得到**输出**\n- **激活函数**：用于添加**非线性**变换\n\n\n## 神经网络的训练是什么？\n- 给大量输入输出，算出神经网络里所有神经元的**权重、偏置**，然后给定新的输入，可以算出新的输出\n\n## 机器学习中的术语\n- **==特征==**：输入\n- **==标签==**：输出\n- **训练集**：大量输入输出\n\n\n## 如何训练\n1. 初始化：随便生成一些**weight**，**bias**\n2. 计算**损失**：给定特征，计算出标签，得到其与真实标签的差距\n3. 优化：微调**weight**和**bias**，使损失变小\n\n## 前向传播\n- 将训练数据的**特征（输入）**送入网络，得到**标签（输出）**\n\n## 反向传播\n- 计算**损失**并优化\n\n## 如何计算损失\n**损失函数**：均方误差、对数损失、交叉熵...\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n## 如何优化\n**优化器**：随即梯度下降**SGD**、**Adam**\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_01.md","raw":"---\ntitle: ML01 机器学习&神经网络简介\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2019-12-25\ndescription: Javascript玩转机器学习01\ntoc: 1\ntop: 0\n---\n## 大纲\n- 理论知识：机器学习、神经网络、 Tensorflow. js\n- 经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识\n别、商标识别、语音识别\n- 神经网络模型：从单个神经元到深度神经网络\n- 神经网络模型算法：MSE/Log/ Cross Entropy\nSigmoid/Relu/Softmax， SGD/Adam\n- 炼丹最佳实践：归化、欠（过）拟合、可视化、度量\n- 模型的迁移学习、保存、加载、转换\n\n## 为什么要学机器学习\n可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的[模型](https://www.tensorflow.org/js/models)\n\n例如，[BodyPix](https://github.com/tensorflow/tfjs-models/tree/master/body-pix)：实时分割人的身体和身体部位\n\n![body-pix](/images/ai/000.gif)\n\n[图像分类](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet),\n[文本恶意检测](https://github.com/tensorflow/tfjs-models/tree/master/toxicity),\n[语音指令识别](https://github.com/tensorflow/tfjs-models/tree/master/speech-commands),\n[...](https://www.tensorflow.org/js/models)\n\n\n## 机器学习是什么\n```\n数据 + 经验 -> 优化算法\n```\n- 对能**通过经验自动改进算法**的研究\n- 用**数据**或者以往的**经验**，来优化计算机程序的性能标准\n\n## 机器学习例子：线性回归\n- 只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\n\n![线性回归](/images/ai/01.png)\n\n- 如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\n\n![多元线性回归](/images/ai/02.png)\n\n## 机器学习例子：逻辑回归\n- 输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题\n\n![逻辑回归](/images/ai/03.png)\n\n- 例子：图片分类、语音助手\n\n![逻辑回归：图片分类](/images/ai/04.png)\n\n\n## 为什么要用机器学习\n- 有些问题无法用编写代码规则的方法来解决，例如图片识别。\n- 获取数据比编写规则更容易\n- GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展\n\n\n## 机器学习如何运作\n- 神经网络\n- 决策树、支持向量机、贝叶斯分类器、强化学习\n\n## 什么是神经网络\n- 人工神经网络\n- 一种运算模型（输入输出的映射）\n- 由大量的节点（神经元）之间相互连接构成\n\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n\n- 神经网路包括：一个输入层，若干隐藏层，一个输出层。\n- 每条线的权重可能不同\n\n## 神经元、权重、偏置、激活函数\n- 每个神经元里都存储着若干**权重wight**、**偏置bias**和一个**激活函数activation**\n- 输入**权重 + 偏置**，经过**激活函数**得到**输出**\n- **激活函数**：用于添加**非线性**变换\n\n\n## 神经网络的训练是什么？\n- 给大量输入输出，算出神经网络里所有神经元的**权重、偏置**，然后给定新的输入，可以算出新的输出\n\n## 机器学习中的术语\n- **==特征==**：输入\n- **==标签==**：输出\n- **训练集**：大量输入输出\n\n\n## 如何训练\n1. 初始化：随便生成一些**weight**，**bias**\n2. 计算**损失**：给定特征，计算出标签，得到其与真实标签的差距\n3. 优化：微调**weight**和**bias**，使损失变小\n\n## 前向传播\n- 将训练数据的**特征（输入）**送入网络，得到**标签（输出）**\n\n## 反向传播\n- 计算**损失**并优化\n\n## 如何计算损失\n**损失函数**：均方误差、对数损失、交叉熵...\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n## 如何优化\n**优化器**：随即梯度下降**SGD**、**Adam**\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_01","published":1,"updated":"2020-04-29T08:17:28.493Z","_id":"ck94a9apb001h07s6gbv6l9v2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>理论知识：机器学习、神经网络、 Tensorflow. js</li>\n<li>经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识<br>别、商标识别、语音识别</li>\n<li>神经网络模型：从单个神经元到深度神经网络</li>\n<li>神经网络模型算法：MSE/Log/ Cross Entropy<br>Sigmoid/Relu/Softmax， SGD/Adam</li>\n<li>炼丹最佳实践：归化、欠（过）拟合、可视化、度量</li>\n<li>模型的迁移学习、保存、加载、转换</li>\n</ul>\n<h2 id=\"为什么要学机器学习\"><a href=\"#为什么要学机器学习\" class=\"headerlink\" title=\"为什么要学机器学习\"></a>为什么要学机器学习</h2><p>可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的<a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">模型</a></p>\n<p>例如，<a href=\"https://github.com/tensorflow/tfjs-models/tree/master/body-pix\" target=\"_blank\" rel=\"noopener\">BodyPix</a>：实时分割人的身体和身体部位</p>\n<p><img src=\"/images/ai/000.gif\" alt=\"body-pix\"></p>\n<p><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\" target=\"_blank\" rel=\"noopener\">图像分类</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/toxicity\" target=\"_blank\" rel=\"noopener\">文本恶意检测</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\" target=\"_blank\" rel=\"noopener\">语音指令识别</a>,<br><a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">…</a></p>\n<h2 id=\"机器学习是什么\"><a href=\"#机器学习是什么\" class=\"headerlink\" title=\"机器学习是什么\"></a>机器学习是什么</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据 + 经验 -&gt; 优化算法</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对能<strong>通过经验自动改进算法</strong>的研究</li>\n<li>用<strong>数据</strong>或者以往的<strong>经验</strong>，来优化计算机程序的性能标准</li>\n</ul>\n<h2 id=\"机器学习例子：线性回归\"><a href=\"#机器学习例子：线性回归\" class=\"headerlink\" title=\"机器学习例子：线性回归\"></a>机器学习例子：线性回归</h2><ul>\n<li>只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/01.png\" alt=\"线性回归\"></p>\n<ul>\n<li>如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/02.png\" alt=\"多元线性回归\"></p>\n<h2 id=\"机器学习例子：逻辑回归\"><a href=\"#机器学习例子：逻辑回归\" class=\"headerlink\" title=\"机器学习例子：逻辑回归\"></a>机器学习例子：逻辑回归</h2><ul>\n<li>输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题</li>\n</ul>\n<p><img src=\"/images/ai/03.png\" alt=\"逻辑回归\"></p>\n<ul>\n<li>例子：图片分类、语音助手</li>\n</ul>\n<p><img src=\"/images/ai/04.png\" alt=\"逻辑回归：图片分类\"></p>\n<h2 id=\"为什么要用机器学习\"><a href=\"#为什么要用机器学习\" class=\"headerlink\" title=\"为什么要用机器学习\"></a>为什么要用机器学习</h2><ul>\n<li>有些问题无法用编写代码规则的方法来解决，例如图片识别。</li>\n<li>获取数据比编写规则更容易</li>\n<li>GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展</li>\n</ul>\n<h2 id=\"机器学习如何运作\"><a href=\"#机器学习如何运作\" class=\"headerlink\" title=\"机器学习如何运作\"></a>机器学习如何运作</h2><ul>\n<li>神经网络</li>\n<li>决策树、支持向量机、贝叶斯分类器、强化学习</li>\n</ul>\n<h2 id=\"什么是神经网络\"><a href=\"#什么是神经网络\" class=\"headerlink\" title=\"什么是神经网络\"></a>什么是神经网络</h2><ul>\n<li>人工神经网络</li>\n<li>一种运算模型（输入输出的映射）</li>\n<li>由大量的节点（神经元）之间相互连接构成</li>\n</ul>\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n<ul>\n<li>神经网路包括：一个输入层，若干隐藏层，一个输出层。</li>\n<li>每条线的权重可能不同</li>\n</ul>\n<h2 id=\"神经元、权重、偏置、激活函数\"><a href=\"#神经元、权重、偏置、激活函数\" class=\"headerlink\" title=\"神经元、权重、偏置、激活函数\"></a>神经元、权重、偏置、激活函数</h2><ul>\n<li>每个神经元里都存储着若干<strong>权重wight</strong>、<strong>偏置bias</strong>和一个<strong>激活函数activation</strong></li>\n<li>输入<strong>权重 + 偏置</strong>，经过<strong>激活函数</strong>得到<strong>输出</strong></li>\n<li><strong>激活函数</strong>：用于添加<strong>非线性</strong>变换</li>\n</ul>\n<h2 id=\"神经网络的训练是什么？\"><a href=\"#神经网络的训练是什么？\" class=\"headerlink\" title=\"神经网络的训练是什么？\"></a>神经网络的训练是什么？</h2><ul>\n<li>给大量输入输出，算出神经网络里所有神经元的<strong>权重、偏置</strong>，然后给定新的输入，可以算出新的输出</li>\n</ul>\n<h2 id=\"机器学习中的术语\"><a href=\"#机器学习中的术语\" class=\"headerlink\" title=\"机器学习中的术语\"></a>机器学习中的术语</h2><ul>\n<li><strong>==特征==</strong>：输入</li>\n<li><strong>==标签==</strong>：输出</li>\n<li><strong>训练集</strong>：大量输入输出</li>\n</ul>\n<h2 id=\"如何训练\"><a href=\"#如何训练\" class=\"headerlink\" title=\"如何训练\"></a>如何训练</h2><ol>\n<li>初始化：随便生成一些<strong>weight</strong>，<strong>bias</strong></li>\n<li>计算<strong>损失</strong>：给定特征，计算出标签，得到其与真实标签的差距</li>\n<li>优化：微调<strong>weight</strong>和<strong>bias</strong>，使损失变小</li>\n</ol>\n<h2 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h2><ul>\n<li>将训练数据的<strong>特征（输入）</strong>送入网络，得到<strong>标签（输出）</strong></li>\n</ul>\n<h2 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h2><ul>\n<li>计算<strong>损失</strong>并优化</li>\n</ul>\n<h2 id=\"如何计算损失\"><a href=\"#如何计算损失\" class=\"headerlink\" title=\"如何计算损失\"></a>如何计算损失</h2><p><strong>损失函数</strong>：均方误差、对数损失、交叉熵…</p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><p><strong>优化器</strong>：随即梯度下降<strong>SGD</strong>、<strong>Adam</strong></p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>理论知识：机器学习、神经网络、 Tensorflow. js</li>\n<li>经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识<br>别、商标识别、语音识别</li>\n<li>神经网络模型：从单个神经元到深度神经网络</li>\n<li>神经网络模型算法：MSE/Log/ Cross Entropy<br>Sigmoid/Relu/Softmax， SGD/Adam</li>\n<li>炼丹最佳实践：归化、欠（过）拟合、可视化、度量</li>\n<li>模型的迁移学习、保存、加载、转换</li>\n</ul>\n<h2 id=\"为什么要学机器学习\"><a href=\"#为什么要学机器学习\" class=\"headerlink\" title=\"为什么要学机器学习\"></a>为什么要学机器学习</h2><p>可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的<a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">模型</a></p>\n<p>例如，<a href=\"https://github.com/tensorflow/tfjs-models/tree/master/body-pix\" target=\"_blank\" rel=\"noopener\">BodyPix</a>：实时分割人的身体和身体部位</p>\n<p><img src=\"/images/ai/000.gif\" alt=\"body-pix\"></p>\n<p><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\" target=\"_blank\" rel=\"noopener\">图像分类</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/toxicity\" target=\"_blank\" rel=\"noopener\">文本恶意检测</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\" target=\"_blank\" rel=\"noopener\">语音指令识别</a>,<br><a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">…</a></p>\n<h2 id=\"机器学习是什么\"><a href=\"#机器学习是什么\" class=\"headerlink\" title=\"机器学习是什么\"></a>机器学习是什么</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据 + 经验 -&gt; 优化算法</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对能<strong>通过经验自动改进算法</strong>的研究</li>\n<li>用<strong>数据</strong>或者以往的<strong>经验</strong>，来优化计算机程序的性能标准</li>\n</ul>\n<h2 id=\"机器学习例子：线性回归\"><a href=\"#机器学习例子：线性回归\" class=\"headerlink\" title=\"机器学习例子：线性回归\"></a>机器学习例子：线性回归</h2><ul>\n<li>只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/01.png\" alt=\"线性回归\"></p>\n<ul>\n<li>如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/02.png\" alt=\"多元线性回归\"></p>\n<h2 id=\"机器学习例子：逻辑回归\"><a href=\"#机器学习例子：逻辑回归\" class=\"headerlink\" title=\"机器学习例子：逻辑回归\"></a>机器学习例子：逻辑回归</h2><ul>\n<li>输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题</li>\n</ul>\n<p><img src=\"/images/ai/03.png\" alt=\"逻辑回归\"></p>\n<ul>\n<li>例子：图片分类、语音助手</li>\n</ul>\n<p><img src=\"/images/ai/04.png\" alt=\"逻辑回归：图片分类\"></p>\n<h2 id=\"为什么要用机器学习\"><a href=\"#为什么要用机器学习\" class=\"headerlink\" title=\"为什么要用机器学习\"></a>为什么要用机器学习</h2><ul>\n<li>有些问题无法用编写代码规则的方法来解决，例如图片识别。</li>\n<li>获取数据比编写规则更容易</li>\n<li>GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展</li>\n</ul>\n<h2 id=\"机器学习如何运作\"><a href=\"#机器学习如何运作\" class=\"headerlink\" title=\"机器学习如何运作\"></a>机器学习如何运作</h2><ul>\n<li>神经网络</li>\n<li>决策树、支持向量机、贝叶斯分类器、强化学习</li>\n</ul>\n<h2 id=\"什么是神经网络\"><a href=\"#什么是神经网络\" class=\"headerlink\" title=\"什么是神经网络\"></a>什么是神经网络</h2><ul>\n<li>人工神经网络</li>\n<li>一种运算模型（输入输出的映射）</li>\n<li>由大量的节点（神经元）之间相互连接构成</li>\n</ul>\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n<ul>\n<li>神经网路包括：一个输入层，若干隐藏层，一个输出层。</li>\n<li>每条线的权重可能不同</li>\n</ul>\n<h2 id=\"神经元、权重、偏置、激活函数\"><a href=\"#神经元、权重、偏置、激活函数\" class=\"headerlink\" title=\"神经元、权重、偏置、激活函数\"></a>神经元、权重、偏置、激活函数</h2><ul>\n<li>每个神经元里都存储着若干<strong>权重wight</strong>、<strong>偏置bias</strong>和一个<strong>激活函数activation</strong></li>\n<li>输入<strong>权重 + 偏置</strong>，经过<strong>激活函数</strong>得到<strong>输出</strong></li>\n<li><strong>激活函数</strong>：用于添加<strong>非线性</strong>变换</li>\n</ul>\n<h2 id=\"神经网络的训练是什么？\"><a href=\"#神经网络的训练是什么？\" class=\"headerlink\" title=\"神经网络的训练是什么？\"></a>神经网络的训练是什么？</h2><ul>\n<li>给大量输入输出，算出神经网络里所有神经元的<strong>权重、偏置</strong>，然后给定新的输入，可以算出新的输出</li>\n</ul>\n<h2 id=\"机器学习中的术语\"><a href=\"#机器学习中的术语\" class=\"headerlink\" title=\"机器学习中的术语\"></a>机器学习中的术语</h2><ul>\n<li><strong>==特征==</strong>：输入</li>\n<li><strong>==标签==</strong>：输出</li>\n<li><strong>训练集</strong>：大量输入输出</li>\n</ul>\n<h2 id=\"如何训练\"><a href=\"#如何训练\" class=\"headerlink\" title=\"如何训练\"></a>如何训练</h2><ol>\n<li>初始化：随便生成一些<strong>weight</strong>，<strong>bias</strong></li>\n<li>计算<strong>损失</strong>：给定特征，计算出标签，得到其与真实标签的差距</li>\n<li>优化：微调<strong>weight</strong>和<strong>bias</strong>，使损失变小</li>\n</ol>\n<h2 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h2><ul>\n<li>将训练数据的<strong>特征（输入）</strong>送入网络，得到<strong>标签（输出）</strong></li>\n</ul>\n<h2 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h2><ul>\n<li>计算<strong>损失</strong>并优化</li>\n</ul>\n<h2 id=\"如何计算损失\"><a href=\"#如何计算损失\" class=\"headerlink\" title=\"如何计算损失\"></a>如何计算损失</h2><p><strong>损失函数</strong>：均方误差、对数损失、交叉熵…</p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><p><strong>优化器</strong>：随即梯度下降<strong>SGD</strong>、<strong>Adam</strong></p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML03【Tensor-张量】简介","date":"2019-12-30T16:00:00.000Z","description":"Javascript玩转机器学习03","toc":1,"top":0,"_content":"\n## 什么是Tensor\n- **张量**\n- 是向量和矩阵向更高维度的推广\n- 相当于多维数组\n\n### 0维张量\n![0维张量](/images/ai/05.png)\n\n![rankType描述维度](/images/ai/06.png)\n\n### 1维张量\n![1维张量](/images/ai/07.png)\n\n![shape描述每个维度上数组长度](/images/ai/08.png)\n\n### 2维张量\n![每一维度数组长度均为2的2维张量](/images/ai/09.png)\n\n![size描述张量的元素数量](/images/ai/10.png)\n\n### 2 维张量\n![2维张量](/images/ai/11.png)\n\n![每一维度数组长度均为1的2维张量](/images/ai/12.png)\n\n\n### 3维张量\n![3维张量](/images/ai/13.png)\n\n![shape描述了三个维度的数组长度均为1](/images/ai/14.png)\n\n\n## Tensor和机器学习有什么关系？\n- Tensor符合神经网络的数据结构\n- 神经网络每一层要存N维数据\n- N层的For循环运算\n\n## Tensor的运算 十分符合 神经网络的运算\n- eg.用TensorFlow.js提供的**点乘dotAPI**能够简化复杂的for循环运算：\n\n![传统for循环运算张量 vs dot运算张量](/images/ai/15.png)\n\n![点乘结果与for循环结果一致](/images/ai/16.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_03_tensor.md","raw":"---\ntitle: ML03【Tensor-张量】简介\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2019-12-31\ndescription: Javascript玩转机器学习03\ntoc: 1\ntop: 0\n---\n\n## 什么是Tensor\n- **张量**\n- 是向量和矩阵向更高维度的推广\n- 相当于多维数组\n\n### 0维张量\n![0维张量](/images/ai/05.png)\n\n![rankType描述维度](/images/ai/06.png)\n\n### 1维张量\n![1维张量](/images/ai/07.png)\n\n![shape描述每个维度上数组长度](/images/ai/08.png)\n\n### 2维张量\n![每一维度数组长度均为2的2维张量](/images/ai/09.png)\n\n![size描述张量的元素数量](/images/ai/10.png)\n\n### 2 维张量\n![2维张量](/images/ai/11.png)\n\n![每一维度数组长度均为1的2维张量](/images/ai/12.png)\n\n\n### 3维张量\n![3维张量](/images/ai/13.png)\n\n![shape描述了三个维度的数组长度均为1](/images/ai/14.png)\n\n\n## Tensor和机器学习有什么关系？\n- Tensor符合神经网络的数据结构\n- 神经网络每一层要存N维数据\n- N层的For循环运算\n\n## Tensor的运算 十分符合 神经网络的运算\n- eg.用TensorFlow.js提供的**点乘dotAPI**能够简化复杂的for循环运算：\n\n![传统for循环运算张量 vs dot运算张量](/images/ai/15.png)\n\n![点乘结果与for循环结果一致](/images/ai/16.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_03_tensor","published":1,"updated":"2020-04-28T01:19:18.733Z","_id":"ck94a9apc001k07s62ycnyak8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Tensor\"><a href=\"#什么是Tensor\" class=\"headerlink\" title=\"什么是Tensor\"></a>什么是Tensor</h2><ul>\n<li><strong>张量</strong></li>\n<li>是向量和矩阵向更高维度的推广</li>\n<li>相当于多维数组</li>\n</ul>\n<h3 id=\"0维张量\"><a href=\"#0维张量\" class=\"headerlink\" title=\"0维张量\"></a>0维张量</h3><p><img src=\"/images/ai/05.png\" alt=\"0维张量\"></p>\n<p><img src=\"/images/ai/06.png\" alt=\"rankType描述维度\"></p>\n<h3 id=\"1维张量\"><a href=\"#1维张量\" class=\"headerlink\" title=\"1维张量\"></a>1维张量</h3><p><img src=\"/images/ai/07.png\" alt=\"1维张量\"></p>\n<p><img src=\"/images/ai/08.png\" alt=\"shape描述每个维度上数组长度\"></p>\n<h3 id=\"2维张量\"><a href=\"#2维张量\" class=\"headerlink\" title=\"2维张量\"></a>2维张量</h3><p><img src=\"/images/ai/09.png\" alt=\"每一维度数组长度均为2的2维张量\"></p>\n<p><img src=\"/images/ai/10.png\" alt=\"size描述张量的元素数量\"></p>\n<h3 id=\"2-维张量\"><a href=\"#2-维张量\" class=\"headerlink\" title=\"2 维张量\"></a>2 维张量</h3><p><img src=\"/images/ai/11.png\" alt=\"2维张量\"></p>\n<p><img src=\"/images/ai/12.png\" alt=\"每一维度数组长度均为1的2维张量\"></p>\n<h3 id=\"3维张量\"><a href=\"#3维张量\" class=\"headerlink\" title=\"3维张量\"></a>3维张量</h3><p><img src=\"/images/ai/13.png\" alt=\"3维张量\"></p>\n<p><img src=\"/images/ai/14.png\" alt=\"shape描述了三个维度的数组长度均为1\"></p>\n<h2 id=\"Tensor和机器学习有什么关系？\"><a href=\"#Tensor和机器学习有什么关系？\" class=\"headerlink\" title=\"Tensor和机器学习有什么关系？\"></a>Tensor和机器学习有什么关系？</h2><ul>\n<li>Tensor符合神经网络的数据结构</li>\n<li>神经网络每一层要存N维数据</li>\n<li>N层的For循环运算</li>\n</ul>\n<h2 id=\"Tensor的运算-十分符合-神经网络的运算\"><a href=\"#Tensor的运算-十分符合-神经网络的运算\" class=\"headerlink\" title=\"Tensor的运算 十分符合 神经网络的运算\"></a>Tensor的运算 十分符合 神经网络的运算</h2><ul>\n<li>eg.用TensorFlow.js提供的<strong>点乘dotAPI</strong>能够简化复杂的for循环运算：</li>\n</ul>\n<p><img src=\"/images/ai/15.png\" alt=\"传统for循环运算张量 vs dot运算张量\"></p>\n<p><img src=\"/images/ai/16.png\" alt=\"点乘结果与for循环结果一致\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Tensor\"><a href=\"#什么是Tensor\" class=\"headerlink\" title=\"什么是Tensor\"></a>什么是Tensor</h2><ul>\n<li><strong>张量</strong></li>\n<li>是向量和矩阵向更高维度的推广</li>\n<li>相当于多维数组</li>\n</ul>\n<h3 id=\"0维张量\"><a href=\"#0维张量\" class=\"headerlink\" title=\"0维张量\"></a>0维张量</h3><p><img src=\"/images/ai/05.png\" alt=\"0维张量\"></p>\n<p><img src=\"/images/ai/06.png\" alt=\"rankType描述维度\"></p>\n<h3 id=\"1维张量\"><a href=\"#1维张量\" class=\"headerlink\" title=\"1维张量\"></a>1维张量</h3><p><img src=\"/images/ai/07.png\" alt=\"1维张量\"></p>\n<p><img src=\"/images/ai/08.png\" alt=\"shape描述每个维度上数组长度\"></p>\n<h3 id=\"2维张量\"><a href=\"#2维张量\" class=\"headerlink\" title=\"2维张量\"></a>2维张量</h3><p><img src=\"/images/ai/09.png\" alt=\"每一维度数组长度均为2的2维张量\"></p>\n<p><img src=\"/images/ai/10.png\" alt=\"size描述张量的元素数量\"></p>\n<h3 id=\"2-维张量\"><a href=\"#2-维张量\" class=\"headerlink\" title=\"2 维张量\"></a>2 维张量</h3><p><img src=\"/images/ai/11.png\" alt=\"2维张量\"></p>\n<p><img src=\"/images/ai/12.png\" alt=\"每一维度数组长度均为1的2维张量\"></p>\n<h3 id=\"3维张量\"><a href=\"#3维张量\" class=\"headerlink\" title=\"3维张量\"></a>3维张量</h3><p><img src=\"/images/ai/13.png\" alt=\"3维张量\"></p>\n<p><img src=\"/images/ai/14.png\" alt=\"shape描述了三个维度的数组长度均为1\"></p>\n<h2 id=\"Tensor和机器学习有什么关系？\"><a href=\"#Tensor和机器学习有什么关系？\" class=\"headerlink\" title=\"Tensor和机器学习有什么关系？\"></a>Tensor和机器学习有什么关系？</h2><ul>\n<li>Tensor符合神经网络的数据结构</li>\n<li>神经网络每一层要存N维数据</li>\n<li>N层的For循环运算</li>\n</ul>\n<h2 id=\"Tensor的运算-十分符合-神经网络的运算\"><a href=\"#Tensor的运算-十分符合-神经网络的运算\" class=\"headerlink\" title=\"Tensor的运算 十分符合 神经网络的运算\"></a>Tensor的运算 十分符合 神经网络的运算</h2><ul>\n<li>eg.用TensorFlow.js提供的<strong>点乘dotAPI</strong>能够简化复杂的for循环运算：</li>\n</ul>\n<p><img src=\"/images/ai/15.png\" alt=\"传统for循环运算张量 vs dot运算张量\"></p>\n<p><img src=\"/images/ai/16.png\" alt=\"点乘结果与for循环结果一致\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML02 TensorFlow.js简介","date":"2019-12-25T16:00:00.000Z","description":"Javascript玩转机器学习02","toc":1,"top":0,"_content":"\n## TensorFlow.js是什么\n- js实现的机器学库\n- 可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性\n- 著名的TensorFlow是用Python实现的\n\n## TensorFlow.js能干什么\n- 运行现有的模型（算法工程师已经训练好的模型）\n- 重新训练现有模型\n- 使用javascript开发机器学习模型\n\n## demo\n- [tfjs的各种例子](https://github.com/tensorflow/tfjs-examples)\n\n## 在浏览器安装tfjs\n- 新建一个html，script标签引入\n\n`<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js\"></script>`\n\n- npm包安装，用import引入，用parcel/webpack构建\n\n`npm i @tensorflow/tfjs`\n\n## 在Node.JS安装tfjs\n- 安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)\n- 安装纯Javascript版本，性能较差\n\n- 使用require方式引用之前npm安装的`@tensorflow/tfjs`，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：\n\n```\n============================\nHi there. \nLooks like you are running TensorFlow.js in Node.js. \nTo speed things up dramatically, install our node backend, whi\nch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n```\n\n- 因此要使用`npm i @tensorflow/tfjs-node`命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：`npm i node-gyp windows-build-tools@4.0.0 -g`\n\n- `node-gyp`是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此`windows-build-tools@4.0.0`这个包就是用来解决其依赖问题的。\n\n- 安装完后端版本tfjs`@tensorflow/tfjs-node`后，即可直接通过require引入使用\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_02_tensorflow.md","raw":"---\ntitle: ML02 TensorFlow.js简介\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2019-12-26\ndescription: Javascript玩转机器学习02\ntoc: 1\ntop: 0\n---\n\n## TensorFlow.js是什么\n- js实现的机器学库\n- 可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性\n- 著名的TensorFlow是用Python实现的\n\n## TensorFlow.js能干什么\n- 运行现有的模型（算法工程师已经训练好的模型）\n- 重新训练现有模型\n- 使用javascript开发机器学习模型\n\n## demo\n- [tfjs的各种例子](https://github.com/tensorflow/tfjs-examples)\n\n## 在浏览器安装tfjs\n- 新建一个html，script标签引入\n\n`<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js\"></script>`\n\n- npm包安装，用import引入，用parcel/webpack构建\n\n`npm i @tensorflow/tfjs`\n\n## 在Node.JS安装tfjs\n- 安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)\n- 安装纯Javascript版本，性能较差\n\n- 使用require方式引用之前npm安装的`@tensorflow/tfjs`，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：\n\n```\n============================\nHi there. \nLooks like you are running TensorFlow.js in Node.js. \nTo speed things up dramatically, install our node backend, whi\nch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n```\n\n- 因此要使用`npm i @tensorflow/tfjs-node`命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：`npm i node-gyp windows-build-tools@4.0.0 -g`\n\n- `node-gyp`是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此`windows-build-tools@4.0.0`这个包就是用来解决其依赖问题的。\n\n- 安装完后端版本tfjs`@tensorflow/tfjs-node`后，即可直接通过require引入使用\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_02_tensorflow","published":1,"updated":"2020-04-28T01:19:15.318Z","_id":"ck94a9apd001m07s633wg6drp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"TensorFlow-js是什么\"><a href=\"#TensorFlow-js是什么\" class=\"headerlink\" title=\"TensorFlow.js是什么\"></a>TensorFlow.js是什么</h2><ul>\n<li>js实现的机器学库</li>\n<li>可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性</li>\n<li>著名的TensorFlow是用Python实现的</li>\n</ul>\n<h2 id=\"TensorFlow-js能干什么\"><a href=\"#TensorFlow-js能干什么\" class=\"headerlink\" title=\"TensorFlow.js能干什么\"></a>TensorFlow.js能干什么</h2><ul>\n<li>运行现有的模型（算法工程师已经训练好的模型）</li>\n<li>重新训练现有模型</li>\n<li>使用javascript开发机器学习模型</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ul>\n<li><a href=\"https://github.com/tensorflow/tfjs-examples\" target=\"_blank\" rel=\"noopener\">tfjs的各种例子</a></li>\n</ul>\n<h2 id=\"在浏览器安装tfjs\"><a href=\"#在浏览器安装tfjs\" class=\"headerlink\" title=\"在浏览器安装tfjs\"></a>在浏览器安装tfjs</h2><ul>\n<li>新建一个html，script标签引入</li>\n</ul>\n<p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<ul>\n<li>npm包安装，用import引入，用parcel/webpack构建</li>\n</ul>\n<p><code>npm i @tensorflow/tfjs</code></p>\n<h2 id=\"在Node-JS安装tfjs\"><a href=\"#在Node-JS安装tfjs\" class=\"headerlink\" title=\"在Node.JS安装tfjs\"></a>在Node.JS安装tfjs</h2><ul>\n<li>安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)</li>\n<li><p>安装纯Javascript版本，性能较差</p>\n</li>\n<li><p>使用require方式引用之前npm安装的<code>@tensorflow/tfjs</code>，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\">Hi there. </span><br><span class=\"line\">Looks like you are running TensorFlow.js in Node.js. </span><br><span class=\"line\">To speed things up dramatically, install our node backend, whi</span><br><span class=\"line\">ch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require(&apos;@tensorflow/tfjs-node&apos;); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.</span><br><span class=\"line\">============================</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>因此要使用<code>npm i @tensorflow/tfjs-node</code>命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：<code>npm i node-gyp windows-build-tools@4.0.0 -g</code></p>\n</li>\n<li><p><code>node-gyp</code>是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此<a href=\"mailto:`windows-build-tools@4.0.0\" target=\"_blank\" rel=\"noopener\">`windows-build-tools@4.0.0</a>`这个包就是用来解决其依赖问题的。</p>\n</li>\n<li><p>安装完后端版本tfjs<code>@tensorflow/tfjs-node</code>后，即可直接通过require引入使用</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TensorFlow-js是什么\"><a href=\"#TensorFlow-js是什么\" class=\"headerlink\" title=\"TensorFlow.js是什么\"></a>TensorFlow.js是什么</h2><ul>\n<li>js实现的机器学库</li>\n<li>可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性</li>\n<li>著名的TensorFlow是用Python实现的</li>\n</ul>\n<h2 id=\"TensorFlow-js能干什么\"><a href=\"#TensorFlow-js能干什么\" class=\"headerlink\" title=\"TensorFlow.js能干什么\"></a>TensorFlow.js能干什么</h2><ul>\n<li>运行现有的模型（算法工程师已经训练好的模型）</li>\n<li>重新训练现有模型</li>\n<li>使用javascript开发机器学习模型</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ul>\n<li><a href=\"https://github.com/tensorflow/tfjs-examples\" target=\"_blank\" rel=\"noopener\">tfjs的各种例子</a></li>\n</ul>\n<h2 id=\"在浏览器安装tfjs\"><a href=\"#在浏览器安装tfjs\" class=\"headerlink\" title=\"在浏览器安装tfjs\"></a>在浏览器安装tfjs</h2><ul>\n<li>新建一个html，script标签引入</li>\n</ul>\n<p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<ul>\n<li>npm包安装，用import引入，用parcel/webpack构建</li>\n</ul>\n<p><code>npm i @tensorflow/tfjs</code></p>\n<h2 id=\"在Node-JS安装tfjs\"><a href=\"#在Node-JS安装tfjs\" class=\"headerlink\" title=\"在Node.JS安装tfjs\"></a>在Node.JS安装tfjs</h2><ul>\n<li>安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)</li>\n<li><p>安装纯Javascript版本，性能较差</p>\n</li>\n<li><p>使用require方式引用之前npm安装的<code>@tensorflow/tfjs</code>，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\">Hi there. </span><br><span class=\"line\">Looks like you are running TensorFlow.js in Node.js. </span><br><span class=\"line\">To speed things up dramatically, install our node backend, whi</span><br><span class=\"line\">ch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require(&apos;@tensorflow/tfjs-node&apos;); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.</span><br><span class=\"line\">============================</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>因此要使用<code>npm i @tensorflow/tfjs-node</code>命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：<code>npm i node-gyp windows-build-tools@4.0.0 -g</code></p>\n</li>\n<li><p><code>node-gyp</code>是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此<a href=\"mailto:`windows-build-tools@4.0.0\" target=\"_blank\" rel=\"noopener\">`windows-build-tools@4.0.0</a>`这个包就是用来解决其依赖问题的。</p>\n</li>\n<li><p>安装完后端版本tfjs<code>@tensorflow/tfjs-node</code>后，即可直接通过require引入使用</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML04 线性回归训练","date":"2020-01-01T16:00:00.000Z","description":"Javascript玩转机器学习04","toc":1,"top":0,"_content":"\n## 线性回归是什么\n- 一种统计分析方法\n- 用于确定两种(或以上)变量间相互依赖的**定量关系**\n- eg.身高体重预测(两种变量)、房价预测(多变量)\n\n\n## 操作步骤\n- 准备、可视化：训练数据\n- 用TensorFlow.js的API构建一个简单的神经网络\n- 训练模型 并 预测\n\n## 前置条件\n- 最新版本chrome\n- 代码编辑器（eg.VSCODE\n- 基础的前端、神经网络知识\n\n## 准备、可视化：训练数据（实操）\n- 准备线性回归训练数据(特征、标签)\n- 使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)\n\n\n```html\n<!-- linear-regression/index.html-->\n<script src=\"script.js\"></script>\n```\n```js\n// linear-regression/script.js\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n};\n\n```\n\n```\n-- bash\nparcel li*/*.html\n```\n\n## 可视化效果\n![可视化效果](/images/ai/17.png)\n\n\n\n## 定义单个神经元的神经网络模型\n- 初始化一个神经网络模型(model)\n- 为模型添加**层**(layer)\n- 设计**层**的神经元个数和**inputShape**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n};\n\n```\n\n## 损失函数：均方误差（MSE-MeanSquaredError）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**损失函数**与**均方误差**：\n\n\n- **损失函数**用于计算预测值与实际值差距\n\n\n![预测值、实际值、损失](/images/ai/18.png)\n\n\n- **均方误差**（meanSquaredError）是一种损失函数\n\n![MSE](/images/ai/19.png)\n\n\n- 在TensorFlow.js中设置损失函数\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError})  //设置损失函数为均方误差MSE\n};\n```\n\n## 优化器：随即梯度下降（SGD）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**优化器**与**随机梯度下降**：\n\n\n- 迭代试错：\n\n![迭代试错](/images/ai/20.png)\n\n\n- 梯度下降法：\n\n![梯度下降法](/images/ai/21.png)\n\n\n- SGD\n\n![SGD](/images/ai/22.png)\n\n\n\n\n- 在TensorFlow.js中设置**优化器**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD\n};\n```\n\n## 训练模型并可视化训练过程\n- 将训练数据转为tensor\n- 训练模型\n- 用**tfvis**可视化训练过程\n\n\n\n```\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = async () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = tf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  const inputs = tf.tensor(xs);\n  const labels = tf.tensor(ys);\n\n  await model.fit(inputs, labels,{\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs:100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss'],\n    )\n  });\n\n};\n\n```\n\n- 批量处理size设置为1，训练初期会有明显抖动\n\n\n![](/images/ai/23.png)\n\n![](/images/ai/24.png)\n\n\n- 批量处理size设置为4，训练曲线比较平滑\n\n![](/images/ai/25.png)\n\n\n![](/images/ai/26.png)\n\n\n## 进行预测\n- 将待预测数据转为Tensor\n- 用训练好的模型进行预测\n- 将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）\n\n\n```\n  const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测\n  output.print();\n  console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示\n```\n\n![预测结果](/images/ai/27.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_04_linear_regression.md","raw":"---\ntitle: ML04 线性回归训练\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-01-02\ndescription: Javascript玩转机器学习04\ntoc: 1\ntop: 0\n---\n\n## 线性回归是什么\n- 一种统计分析方法\n- 用于确定两种(或以上)变量间相互依赖的**定量关系**\n- eg.身高体重预测(两种变量)、房价预测(多变量)\n\n\n## 操作步骤\n- 准备、可视化：训练数据\n- 用TensorFlow.js的API构建一个简单的神经网络\n- 训练模型 并 预测\n\n## 前置条件\n- 最新版本chrome\n- 代码编辑器（eg.VSCODE\n- 基础的前端、神经网络知识\n\n## 准备、可视化：训练数据（实操）\n- 准备线性回归训练数据(特征、标签)\n- 使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)\n\n\n```html\n<!-- linear-regression/index.html-->\n<script src=\"script.js\"></script>\n```\n```js\n// linear-regression/script.js\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n};\n\n```\n\n```\n-- bash\nparcel li*/*.html\n```\n\n## 可视化效果\n![可视化效果](/images/ai/17.png)\n\n\n\n## 定义单个神经元的神经网络模型\n- 初始化一个神经网络模型(model)\n- 为模型添加**层**(layer)\n- 设计**层**的神经元个数和**inputShape**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n};\n\n```\n\n## 损失函数：均方误差（MSE-MeanSquaredError）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**损失函数**与**均方误差**：\n\n\n- **损失函数**用于计算预测值与实际值差距\n\n\n![预测值、实际值、损失](/images/ai/18.png)\n\n\n- **均方误差**（meanSquaredError）是一种损失函数\n\n![MSE](/images/ai/19.png)\n\n\n- 在TensorFlow.js中设置损失函数\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError})  //设置损失函数为均方误差MSE\n};\n```\n\n## 优化器：随即梯度下降（SGD）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**优化器**与**随机梯度下降**：\n\n\n- 迭代试错：\n\n![迭代试错](/images/ai/20.png)\n\n\n- 梯度下降法：\n\n![梯度下降法](/images/ai/21.png)\n\n\n- SGD\n\n![SGD](/images/ai/22.png)\n\n\n\n\n- 在TensorFlow.js中设置**优化器**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD\n};\n```\n\n## 训练模型并可视化训练过程\n- 将训练数据转为tensor\n- 训练模型\n- 用**tfvis**可视化训练过程\n\n\n\n```\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = async () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = tf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  const inputs = tf.tensor(xs);\n  const labels = tf.tensor(ys);\n\n  await model.fit(inputs, labels,{\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs:100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss'],\n    )\n  });\n\n};\n\n```\n\n- 批量处理size设置为1，训练初期会有明显抖动\n\n\n![](/images/ai/23.png)\n\n![](/images/ai/24.png)\n\n\n- 批量处理size设置为4，训练曲线比较平滑\n\n![](/images/ai/25.png)\n\n\n![](/images/ai/26.png)\n\n\n## 进行预测\n- 将待预测数据转为Tensor\n- 用训练好的模型进行预测\n- 将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）\n\n\n```\n  const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测\n  output.print();\n  console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示\n```\n\n![预测结果](/images/ai/27.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_04_linear_regression","published":1,"updated":"2020-04-28T01:19:23.959Z","_id":"ck94a9ape001p07s6d1cl18n7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"线性回归是什么\"><a href=\"#线性回归是什么\" class=\"headerlink\" title=\"线性回归是什么\"></a>线性回归是什么</h2><ul>\n<li>一种统计分析方法</li>\n<li>用于确定两种(或以上)变量间相互依赖的<strong>定量关系</strong></li>\n<li>eg.身高体重预测(两种变量)、房价预测(多变量)</li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ul>\n<li>准备、可视化：训练数据</li>\n<li>用TensorFlow.js的API构建一个简单的神经网络</li>\n<li>训练模型 并 预测</li>\n</ul>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ul>\n<li>最新版本chrome</li>\n<li>代码编辑器（eg.VSCODE</li>\n<li>基础的前端、神经网络知识</li>\n</ul>\n<h2 id=\"准备、可视化：训练数据（实操）\"><a href=\"#准备、可视化：训练数据（实操）\" class=\"headerlink\" title=\"准备、可视化：训练数据（实操）\"></a>准备、可视化：训练数据（实操）</h2><ul>\n<li>准备线性回归训练数据(特征、标签)</li>\n<li>使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- linear-regression/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// linear-regression/script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">\"@tensorflow/tfjs-vis\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">//input</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ys = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]; <span class=\"comment\">//output</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"线性回归训练数据\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">values</span>: xs.map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> (&#123;x, <span class=\"attr\">y</span>:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">xAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">5</span>],<span class=\"attr\">yAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">9</span>]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- bash</span><br><span class=\"line\">parcel li*/*.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化效果\"><a href=\"#可视化效果\" class=\"headerlink\" title=\"可视化效果\"></a>可视化效果</h2><p><img src=\"/images/ai/17.png\" alt=\"可视化效果\"></p>\n<h2 id=\"定义单个神经元的神经网络模型\"><a href=\"#定义单个神经元的神经网络模型\" class=\"headerlink\" title=\"定义单个神经元的神经网络模型\"></a>定义单个神经元的神经网络模型</h2><ul>\n<li>初始化一个神经网络模型(model)</li>\n<li>为模型添加<strong>层</strong>(layer)</li>\n<li>设计<strong>层</strong>的神经元个数和<strong>inputShape</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"损失函数：均方误差（MSE-MeanSquaredError）\"><a href=\"#损失函数：均方误差（MSE-MeanSquaredError）\" class=\"headerlink\" title=\"损失函数：均方误差（MSE-MeanSquaredError）\"></a>损失函数：均方误差（MSE-MeanSquaredError）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>损失函数</strong>与<strong>均方误差</strong>：</li>\n</ul>\n<ul>\n<li><strong>损失函数</strong>用于计算预测值与实际值差距</li>\n</ul>\n<p><img src=\"/images/ai/18.png\" alt=\"预测值、实际值、损失\"></p>\n<ul>\n<li><strong>均方误差</strong>（meanSquaredError）是一种损失函数</li>\n</ul>\n<p><img src=\"/images/ai/19.png\" alt=\"MSE\"></p>\n<ul>\n<li>在TensorFlow.js中设置损失函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError&#125;)  //设置损失函数为均方误差MSE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器：随即梯度下降（SGD）\"><a href=\"#优化器：随即梯度下降（SGD）\" class=\"headerlink\" title=\"优化器：随即梯度下降（SGD）\"></a>优化器：随即梯度下降（SGD）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>优化器</strong>与<strong>随机梯度下降</strong>：</li>\n</ul>\n<ul>\n<li>迭代试错：</li>\n</ul>\n<p><img src=\"/images/ai/20.png\" alt=\"迭代试错\"></p>\n<ul>\n<li>梯度下降法：</li>\n</ul>\n<p><img src=\"/images/ai/21.png\" alt=\"梯度下降法\"></p>\n<ul>\n<li>SGD</li>\n</ul>\n<p><img src=\"/images/ai/22.png\" alt=\"SGD\"></p>\n<ul>\n<li>在TensorFlow.js中设置<strong>优化器</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化训练过程\"><a href=\"#训练模型并可视化训练过程\" class=\"headerlink\" title=\"训练模型并可视化训练过程\"></a>训练模型并可视化训练过程</h2><ul>\n<li>将训练数据转为tensor</li>\n<li>训练模型</li>\n<li>用<strong>tfvis</strong>可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tf from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = async () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = tf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  const inputs = tf.tensor(xs);</span><br><span class=\"line\">  const labels = tf.tensor(ys);</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs:100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;],</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>批量处理size设置为1，训练初期会有明显抖动</li>\n</ul>\n<p><img src=\"/images/ai/23.png\" alt></p>\n<p><img src=\"/images/ai/24.png\" alt></p>\n<ul>\n<li>批量处理size设置为4，训练曲线比较平滑</li>\n</ul>\n<p><img src=\"/images/ai/25.png\" alt></p>\n<p><img src=\"/images/ai/26.png\" alt></p>\n<h2 id=\"进行预测\"><a href=\"#进行预测\" class=\"headerlink\" title=\"进行预测\"></a>进行预测</h2><ul>\n<li>将待预测数据转为Tensor</li>\n<li>用训练好的模型进行预测</li>\n<li>将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">output.print();</span><br><span class=\"line\">console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/27.png\" alt=\"预测结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线性回归是什么\"><a href=\"#线性回归是什么\" class=\"headerlink\" title=\"线性回归是什么\"></a>线性回归是什么</h2><ul>\n<li>一种统计分析方法</li>\n<li>用于确定两种(或以上)变量间相互依赖的<strong>定量关系</strong></li>\n<li>eg.身高体重预测(两种变量)、房价预测(多变量)</li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ul>\n<li>准备、可视化：训练数据</li>\n<li>用TensorFlow.js的API构建一个简单的神经网络</li>\n<li>训练模型 并 预测</li>\n</ul>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ul>\n<li>最新版本chrome</li>\n<li>代码编辑器（eg.VSCODE</li>\n<li>基础的前端、神经网络知识</li>\n</ul>\n<h2 id=\"准备、可视化：训练数据（实操）\"><a href=\"#准备、可视化：训练数据（实操）\" class=\"headerlink\" title=\"准备、可视化：训练数据（实操）\"></a>准备、可视化：训练数据（实操）</h2><ul>\n<li>准备线性回归训练数据(特征、标签)</li>\n<li>使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- linear-regression/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// linear-regression/script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">\"@tensorflow/tfjs-vis\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">//input</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ys = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]; <span class=\"comment\">//output</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"线性回归训练数据\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">values</span>: xs.map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> (&#123;x, <span class=\"attr\">y</span>:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">xAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">5</span>],<span class=\"attr\">yAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">9</span>]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- bash</span><br><span class=\"line\">parcel li*/*.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化效果\"><a href=\"#可视化效果\" class=\"headerlink\" title=\"可视化效果\"></a>可视化效果</h2><p><img src=\"/images/ai/17.png\" alt=\"可视化效果\"></p>\n<h2 id=\"定义单个神经元的神经网络模型\"><a href=\"#定义单个神经元的神经网络模型\" class=\"headerlink\" title=\"定义单个神经元的神经网络模型\"></a>定义单个神经元的神经网络模型</h2><ul>\n<li>初始化一个神经网络模型(model)</li>\n<li>为模型添加<strong>层</strong>(layer)</li>\n<li>设计<strong>层</strong>的神经元个数和<strong>inputShape</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"损失函数：均方误差（MSE-MeanSquaredError）\"><a href=\"#损失函数：均方误差（MSE-MeanSquaredError）\" class=\"headerlink\" title=\"损失函数：均方误差（MSE-MeanSquaredError）\"></a>损失函数：均方误差（MSE-MeanSquaredError）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>损失函数</strong>与<strong>均方误差</strong>：</li>\n</ul>\n<ul>\n<li><strong>损失函数</strong>用于计算预测值与实际值差距</li>\n</ul>\n<p><img src=\"/images/ai/18.png\" alt=\"预测值、实际值、损失\"></p>\n<ul>\n<li><strong>均方误差</strong>（meanSquaredError）是一种损失函数</li>\n</ul>\n<p><img src=\"/images/ai/19.png\" alt=\"MSE\"></p>\n<ul>\n<li>在TensorFlow.js中设置损失函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError&#125;)  //设置损失函数为均方误差MSE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器：随即梯度下降（SGD）\"><a href=\"#优化器：随即梯度下降（SGD）\" class=\"headerlink\" title=\"优化器：随即梯度下降（SGD）\"></a>优化器：随即梯度下降（SGD）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>优化器</strong>与<strong>随机梯度下降</strong>：</li>\n</ul>\n<ul>\n<li>迭代试错：</li>\n</ul>\n<p><img src=\"/images/ai/20.png\" alt=\"迭代试错\"></p>\n<ul>\n<li>梯度下降法：</li>\n</ul>\n<p><img src=\"/images/ai/21.png\" alt=\"梯度下降法\"></p>\n<ul>\n<li>SGD</li>\n</ul>\n<p><img src=\"/images/ai/22.png\" alt=\"SGD\"></p>\n<ul>\n<li>在TensorFlow.js中设置<strong>优化器</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化训练过程\"><a href=\"#训练模型并可视化训练过程\" class=\"headerlink\" title=\"训练模型并可视化训练过程\"></a>训练模型并可视化训练过程</h2><ul>\n<li>将训练数据转为tensor</li>\n<li>训练模型</li>\n<li>用<strong>tfvis</strong>可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tf from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = async () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = tf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  const inputs = tf.tensor(xs);</span><br><span class=\"line\">  const labels = tf.tensor(ys);</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs:100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;],</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>批量处理size设置为1，训练初期会有明显抖动</li>\n</ul>\n<p><img src=\"/images/ai/23.png\" alt></p>\n<p><img src=\"/images/ai/24.png\" alt></p>\n<ul>\n<li>批量处理size设置为4，训练曲线比较平滑</li>\n</ul>\n<p><img src=\"/images/ai/25.png\" alt></p>\n<p><img src=\"/images/ai/26.png\" alt></p>\n<h2 id=\"进行预测\"><a href=\"#进行预测\" class=\"headerlink\" title=\"进行预测\"></a>进行预测</h2><ul>\n<li>将待预测数据转为Tensor</li>\n<li>用训练好的模型进行预测</li>\n<li>将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">output.print();</span><br><span class=\"line\">console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/27.png\" alt=\"预测结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML05 归一化","date":"2020-01-04T16:00:00.000Z","description":"Javascript玩转机器学习05","toc":1,"top":0,"_content":"## 归一化:\n- 将大数量级`特征`转化到较小的数量级下，通常是[0,1]或[-1,1]\n\n## 为什么要归一化：\n- 绝大多数TensorFlow.js的模型都不是给特别大的数设计的\n- 将不同数量级的`特征`转换到统一数量级，避免某个特征影响过大\n\n## 归一化任务实例-身高体重预测：\n- 准备身高体重数据，可视化\n\n\n```\n//模拟标签和特征\n  const heights=[150,160,170,180];\n  const weights=[40,50,60,70];\n\n  //可视化数据\n  tfvis.render.scatterplot(\n    {name:'身高体重预测'},\n    {values:heights.map((x,i)=>({x,y:weights[i]}))},\n    {\n      xAxisDomain:[140,190],\n      yAxisDomain:[30,80],\n    }\n  )\n```\n\n\n- 用TFJS的API`归一化`数据\n\n\n```\n//将数据转换为tensor 并归一化\n  const inputs = tf.tensor(heights).sub(150).div(30);\n  const labels = tf.tensor(weights).sub(40).div(30);\n  inputs.print();\n  labels.print();\n```\n\n- 归一化后数据：\n\n![image](/images/ai/28.png)\n\n\n- 训练模型并预测\n\n\n```\n//创造一个连续模型\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  await model.fit(inputs, labels, {\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks: tfvis.show.fitCallbacks({ name: \"训练过程\" }, [\"loss\"])\n  });\n\n  //将待预测数据190转为Tensor,用训练好的模型进行预测\n  const output = model.predict(tf.tensor([190]).sub(150).div(30)); \n  output.print();\n```\n\n\n- 将结果反归一化为正常数据\n\n\n```\n//将输出的Tensor反归一化并转为普通数据并显示\n  alert(`如果身高是190cm，预测体重为${output.mul(30).add(40).dataSync()}kg`); \n```\n\n- 预测结果：\n\n![image](/images/ai/29.png)\n\n- 上述例子中，归一化的关键步骤就是：\n```\n减去 min（最小值）\n除以 diff（最大值最小值的差）\n```\n\n- 反归一化的关键步骤就是归一化的反操作：\n```\n乘以 diff\n加上 min\n```\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n","source":"_posts/fed_ml_05_normalize.md","raw":"---\ntitle: ML05 归一化\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-01-05\ndescription: Javascript玩转机器学习05\ntoc: 1\ntop: 0\n---\n## 归一化:\n- 将大数量级`特征`转化到较小的数量级下，通常是[0,1]或[-1,1]\n\n## 为什么要归一化：\n- 绝大多数TensorFlow.js的模型都不是给特别大的数设计的\n- 将不同数量级的`特征`转换到统一数量级，避免某个特征影响过大\n\n## 归一化任务实例-身高体重预测：\n- 准备身高体重数据，可视化\n\n\n```\n//模拟标签和特征\n  const heights=[150,160,170,180];\n  const weights=[40,50,60,70];\n\n  //可视化数据\n  tfvis.render.scatterplot(\n    {name:'身高体重预测'},\n    {values:heights.map((x,i)=>({x,y:weights[i]}))},\n    {\n      xAxisDomain:[140,190],\n      yAxisDomain:[30,80],\n    }\n  )\n```\n\n\n- 用TFJS的API`归一化`数据\n\n\n```\n//将数据转换为tensor 并归一化\n  const inputs = tf.tensor(heights).sub(150).div(30);\n  const labels = tf.tensor(weights).sub(40).div(30);\n  inputs.print();\n  labels.print();\n```\n\n- 归一化后数据：\n\n![image](/images/ai/28.png)\n\n\n- 训练模型并预测\n\n\n```\n//创造一个连续模型\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  await model.fit(inputs, labels, {\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks: tfvis.show.fitCallbacks({ name: \"训练过程\" }, [\"loss\"])\n  });\n\n  //将待预测数据190转为Tensor,用训练好的模型进行预测\n  const output = model.predict(tf.tensor([190]).sub(150).div(30)); \n  output.print();\n```\n\n\n- 将结果反归一化为正常数据\n\n\n```\n//将输出的Tensor反归一化并转为普通数据并显示\n  alert(`如果身高是190cm，预测体重为${output.mul(30).add(40).dataSync()}kg`); \n```\n\n- 预测结果：\n\n![image](/images/ai/29.png)\n\n- 上述例子中，归一化的关键步骤就是：\n```\n减去 min（最小值）\n除以 diff（最大值最小值的差）\n```\n\n- 反归一化的关键步骤就是归一化的反操作：\n```\n乘以 diff\n加上 min\n```\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n","slug":"fed_ml_05_normalize","published":1,"updated":"2020-04-28T01:19:27.531Z","_id":"ck94a9ape001r07s6hqin570p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化:\"></a>归一化:</h2><ul>\n<li>将大数量级<code>特征</code>转化到较小的数量级下，通常是[0,1]或[-1,1]</li>\n</ul>\n<h2 id=\"为什么要归一化：\"><a href=\"#为什么要归一化：\" class=\"headerlink\" title=\"为什么要归一化：\"></a>为什么要归一化：</h2><ul>\n<li>绝大多数TensorFlow.js的模型都不是给特别大的数设计的</li>\n<li>将不同数量级的<code>特征</code>转换到统一数量级，避免某个特征影响过大</li>\n</ul>\n<h2 id=\"归一化任务实例-身高体重预测：\"><a href=\"#归一化任务实例-身高体重预测：\" class=\"headerlink\" title=\"归一化任务实例-身高体重预测：\"></a>归一化任务实例-身高体重预测：</h2><ul>\n<li>准备身高体重数据，可视化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//模拟标签和特征</span><br><span class=\"line\">  const heights=[150,160,170,180];</span><br><span class=\"line\">  const weights=[40,50,60,70];</span><br><span class=\"line\"></span><br><span class=\"line\">  //可视化数据</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;身高体重预测&apos;&#125;,</span><br><span class=\"line\">    &#123;values:heights.map((x,i)=&gt;(&#123;x,y:weights[i]&#125;))&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      xAxisDomain:[140,190],</span><br><span class=\"line\">      yAxisDomain:[30,80],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用TFJS的API<code>归一化</code>数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将数据转换为tensor 并归一化</span><br><span class=\"line\">  const inputs = tf.tensor(heights).sub(150).div(30);</span><br><span class=\"line\">  const labels = tf.tensor(weights).sub(40).div(30);</span><br><span class=\"line\">  inputs.print();</span><br><span class=\"line\">  labels.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>归一化后数据：</li>\n</ul>\n<p><img src=\"/images/ai/28.png\" alt=\"image\"></p>\n<ul>\n<li>训练模型并预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创造一个连续模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //将待预测数据190转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">  const output = model.predict(tf.tensor([190]).sub(150).div(30)); </span><br><span class=\"line\">  output.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将结果反归一化为正常数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将输出的Tensor反归一化并转为普通数据并显示</span><br><span class=\"line\">  alert(`如果身高是190cm，预测体重为$&#123;output.mul(30).add(40).dataSync()&#125;kg`);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/29.png\" alt=\"image\"></p>\n<ul>\n<li><p>上述例子中，归一化的关键步骤就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减去 min（最小值）</span><br><span class=\"line\">除以 diff（最大值最小值的差）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反归一化的关键步骤就是归一化的反操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乘以 diff</span><br><span class=\"line\">加上 min</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化:\"></a>归一化:</h2><ul>\n<li>将大数量级<code>特征</code>转化到较小的数量级下，通常是[0,1]或[-1,1]</li>\n</ul>\n<h2 id=\"为什么要归一化：\"><a href=\"#为什么要归一化：\" class=\"headerlink\" title=\"为什么要归一化：\"></a>为什么要归一化：</h2><ul>\n<li>绝大多数TensorFlow.js的模型都不是给特别大的数设计的</li>\n<li>将不同数量级的<code>特征</code>转换到统一数量级，避免某个特征影响过大</li>\n</ul>\n<h2 id=\"归一化任务实例-身高体重预测：\"><a href=\"#归一化任务实例-身高体重预测：\" class=\"headerlink\" title=\"归一化任务实例-身高体重预测：\"></a>归一化任务实例-身高体重预测：</h2><ul>\n<li>准备身高体重数据，可视化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//模拟标签和特征</span><br><span class=\"line\">  const heights=[150,160,170,180];</span><br><span class=\"line\">  const weights=[40,50,60,70];</span><br><span class=\"line\"></span><br><span class=\"line\">  //可视化数据</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;身高体重预测&apos;&#125;,</span><br><span class=\"line\">    &#123;values:heights.map((x,i)=&gt;(&#123;x,y:weights[i]&#125;))&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      xAxisDomain:[140,190],</span><br><span class=\"line\">      yAxisDomain:[30,80],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用TFJS的API<code>归一化</code>数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将数据转换为tensor 并归一化</span><br><span class=\"line\">  const inputs = tf.tensor(heights).sub(150).div(30);</span><br><span class=\"line\">  const labels = tf.tensor(weights).sub(40).div(30);</span><br><span class=\"line\">  inputs.print();</span><br><span class=\"line\">  labels.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>归一化后数据：</li>\n</ul>\n<p><img src=\"/images/ai/28.png\" alt=\"image\"></p>\n<ul>\n<li>训练模型并预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创造一个连续模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //将待预测数据190转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">  const output = model.predict(tf.tensor([190]).sub(150).div(30)); </span><br><span class=\"line\">  output.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将结果反归一化为正常数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将输出的Tensor反归一化并转为普通数据并显示</span><br><span class=\"line\">  alert(`如果身高是190cm，预测体重为$&#123;output.mul(30).add(40).dataSync()&#125;kg`);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/29.png\" alt=\"image\"></p>\n<ul>\n<li><p>上述例子中，归一化的关键步骤就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减去 min（最小值）</span><br><span class=\"line\">除以 diff（最大值最小值的差）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反归一化的关键步骤就是归一化的反操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乘以 diff</span><br><span class=\"line\">加上 min</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML06 逻辑回归训练","date":"2020-01-05T16:00:00.000Z","description":"Javascript玩转机器学习06","toc":1,"top":0,"_content":"\n## 逻辑回归简介\n- 解决分类问题，输出一个概率[0,1]\n\n![image](/images/ai/30.png)\n\n## 加载二分类数据集\n- 使用脚本生成二分类数据集\n\n\n```\n//利用脚本生成400组二分类数据\n  const data = getData(400);\n  console.log(data);\n```\n\n- 数据结构如图：\n\n![image](/images/ai/31.png)\n\n- 可视化二分类数据集(散点图)\n\n\n```\n//可视化为散点图\n  tfvis.render.scatterplot(\n    {name:'二分类逻辑回归 训练数据'},\n    {\n      values:[\n        data.filter(p=>p.label === 1),\n        data.filter(p=>p.label === 0),\n      ]\n    }\n  )\n```\n\n- 可视化效果：\n\n![image](/images/ai/32.png)\n\n\n## 定义模型结构:带有激活函数的单个神经元\n- 初始化一个sequential神经网络模型\n\n\n```\n//添加一个sequential神经网络模型\n  const model = tf.sequential();\n```\n\n\n- 为模型添加层，设计层的神经元个数、inputShape、激活函数(`model.add`)\n\n\n```\n//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）\n  model.add(tf.layers.dense({\n    units:1,  //神经元个数\n    inputShape:[2], //输入的tensor的shape：长度为2的一维数组\n    activation:'sigmoid', //sigmoid这种激活函数的曲线y值范围始终在[0,1]\n  }));\n```\n\n\n## 对数损失函数 Log Loss\n- 利用`wiki.fast.ai`人工智能教学网站，理解[对数损失函数](http://wiki.fast.ai/index.php/Log_Loss)\n- 对数损失函数:用于测量预测值在[0,1]的分类模型的性能\n- 如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：\n\n![image](/images/ai/33.png)\n\n## 用TFJS API设置损失函数为：LogLoss(`model.compile`)\n\n\n```\n//设置损失函数为：LogLoss 对数损失函数\n  model.compile({loss:tf.losses.logLoss});\n```\n\n## 设置超参数，训练模型(`model.fit`)\n\n\n```\n//设置超参数 训练模型\n  await model.fit(inputs, labels,{\n    batchSize:40,\n    epochs:50,\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss']\n    )\n  })\n```\n\n- 训练过程截图：\n\n![image](/images/ai/34.png)\n\n## 预测\n- 编写前端界面输入待预测数据\n- 使用训练好的模型进行预测(`model.predict`)\n\n\n```html\n<form action=\"\" onsubmit=\"predict(this);return false;\">\n  x: <input type=\"text\" name=\"x\">\n  y: <input type=\"text\" name=\"y\">\n  <button type=\"submit\">预测</button>\n</form>\n```\n\n\n```js\nwindow.predict = (form)=>{\n    const pred = model.predict(tf.tensor([[form.x.value * 1,form.y.value * 1]]));\n    alert(`预测结果：${pred.dataSync()[0]}`);\n  }\n```\n\n- 输入2，2    预测结果：\n\n![image](/images/ai/35.png)\n\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n","source":"_posts/fed_ml_06_logistic_regression.md","raw":"---\ntitle: ML06 逻辑回归训练\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-01-06\ndescription: Javascript玩转机器学习06\ntoc: 1\ntop: 0\n---\n\n## 逻辑回归简介\n- 解决分类问题，输出一个概率[0,1]\n\n![image](/images/ai/30.png)\n\n## 加载二分类数据集\n- 使用脚本生成二分类数据集\n\n\n```\n//利用脚本生成400组二分类数据\n  const data = getData(400);\n  console.log(data);\n```\n\n- 数据结构如图：\n\n![image](/images/ai/31.png)\n\n- 可视化二分类数据集(散点图)\n\n\n```\n//可视化为散点图\n  tfvis.render.scatterplot(\n    {name:'二分类逻辑回归 训练数据'},\n    {\n      values:[\n        data.filter(p=>p.label === 1),\n        data.filter(p=>p.label === 0),\n      ]\n    }\n  )\n```\n\n- 可视化效果：\n\n![image](/images/ai/32.png)\n\n\n## 定义模型结构:带有激活函数的单个神经元\n- 初始化一个sequential神经网络模型\n\n\n```\n//添加一个sequential神经网络模型\n  const model = tf.sequential();\n```\n\n\n- 为模型添加层，设计层的神经元个数、inputShape、激活函数(`model.add`)\n\n\n```\n//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）\n  model.add(tf.layers.dense({\n    units:1,  //神经元个数\n    inputShape:[2], //输入的tensor的shape：长度为2的一维数组\n    activation:'sigmoid', //sigmoid这种激活函数的曲线y值范围始终在[0,1]\n  }));\n```\n\n\n## 对数损失函数 Log Loss\n- 利用`wiki.fast.ai`人工智能教学网站，理解[对数损失函数](http://wiki.fast.ai/index.php/Log_Loss)\n- 对数损失函数:用于测量预测值在[0,1]的分类模型的性能\n- 如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：\n\n![image](/images/ai/33.png)\n\n## 用TFJS API设置损失函数为：LogLoss(`model.compile`)\n\n\n```\n//设置损失函数为：LogLoss 对数损失函数\n  model.compile({loss:tf.losses.logLoss});\n```\n\n## 设置超参数，训练模型(`model.fit`)\n\n\n```\n//设置超参数 训练模型\n  await model.fit(inputs, labels,{\n    batchSize:40,\n    epochs:50,\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss']\n    )\n  })\n```\n\n- 训练过程截图：\n\n![image](/images/ai/34.png)\n\n## 预测\n- 编写前端界面输入待预测数据\n- 使用训练好的模型进行预测(`model.predict`)\n\n\n```html\n<form action=\"\" onsubmit=\"predict(this);return false;\">\n  x: <input type=\"text\" name=\"x\">\n  y: <input type=\"text\" name=\"y\">\n  <button type=\"submit\">预测</button>\n</form>\n```\n\n\n```js\nwindow.predict = (form)=>{\n    const pred = model.predict(tf.tensor([[form.x.value * 1,form.y.value * 1]]));\n    alert(`预测结果：${pred.dataSync()[0]}`);\n  }\n```\n\n- 输入2，2    预测结果：\n\n![image](/images/ai/35.png)\n\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n","slug":"fed_ml_06_logistic_regression","published":1,"updated":"2020-04-28T01:19:30.974Z","_id":"ck94a9apf001u07s6i9fln3bh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"逻辑回归简介\"><a href=\"#逻辑回归简介\" class=\"headerlink\" title=\"逻辑回归简介\"></a>逻辑回归简介</h2><ul>\n<li>解决分类问题，输出一个概率[0,1]</li>\n</ul>\n<p><img src=\"/images/ai/30.png\" alt=\"image\"></p>\n<h2 id=\"加载二分类数据集\"><a href=\"#加载二分类数据集\" class=\"headerlink\" title=\"加载二分类数据集\"></a>加载二分类数据集</h2><ul>\n<li>使用脚本生成二分类数据集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用脚本生成400组二分类数据</span><br><span class=\"line\">  const data = getData(400);</span><br><span class=\"line\">  console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据结构如图：</li>\n</ul>\n<p><img src=\"/images/ai/31.png\" alt=\"image\"></p>\n<ul>\n<li>可视化二分类数据集(散点图)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化为散点图</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;二分类逻辑回归 训练数据&apos;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values:[</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 1),</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 0),</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化效果：</li>\n</ul>\n<p><img src=\"/images/ai/32.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构-带有激活函数的单个神经元\"><a href=\"#定义模型结构-带有激活函数的单个神经元\" class=\"headerlink\" title=\"定义模型结构:带有激活函数的单个神经元\"></a>定义模型结构:带有激活函数的单个神经元</h2><ul>\n<li>初始化一个sequential神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加一个sequential神经网络模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加层，设计层的神经元个数、inputShape、激活函数(<code>model.add</code>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:1,  //神经元个数</span><br><span class=\"line\">    inputShape:[2], //输入的tensor的shape：长度为2的一维数组</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;, //sigmoid这种激活函数的曲线y值范围始终在[0,1]</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数损失函数-Log-Loss\"><a href=\"#对数损失函数-Log-Loss\" class=\"headerlink\" title=\"对数损失函数 Log Loss\"></a>对数损失函数 Log Loss</h2><ul>\n<li>利用<code>wiki.fast.ai</code>人工智能教学网站，理解<a href=\"http://wiki.fast.ai/index.php/Log_Loss\" target=\"_blank\" rel=\"noopener\">对数损失函数</a></li>\n<li>对数损失函数:用于测量预测值在[0,1]的分类模型的性能</li>\n<li>如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：</li>\n</ul>\n<p><img src=\"/images/ai/33.png\" alt=\"image\"></p>\n<h2 id=\"用TFJS-API设置损失函数为：LogLoss-model-compile\"><a href=\"#用TFJS-API设置损失函数为：LogLoss-model-compile\" class=\"headerlink\" title=\"用TFJS API设置损失函数为：LogLoss(model.compile)\"></a>用TFJS API设置损失函数为：LogLoss(<code>model.compile</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数为：LogLoss 对数损失函数</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.logLoss&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置超参数，训练模型-model-fit\"><a href=\"#设置超参数，训练模型-model-fit\" class=\"headerlink\" title=\"设置超参数，训练模型(model.fit)\"></a>设置超参数，训练模型(<code>model.fit</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置超参数 训练模型</span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize:40,</span><br><span class=\"line\">    epochs:50,</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程截图：</li>\n</ul>\n<p><img src=\"/images/ai/34.png\" alt=\"image\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><ul>\n<li>编写前端界面输入待预测数据</li>\n<li>使用训练好的模型进行预测(<code>model.predict</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">\"predict(this);return false;\"</span>&gt;</span></span><br><span class=\"line\">  x: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>&gt;</span></span><br><span class=\"line\">  y: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"y\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>预测<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\">(<span class=\"params\">form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = model.predict(tf.tensor([[form.x.value * <span class=\"number\">1</span>,form.y.value * <span class=\"number\">1</span>]]));</span><br><span class=\"line\">    alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入2，2    预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/35.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"逻辑回归简介\"><a href=\"#逻辑回归简介\" class=\"headerlink\" title=\"逻辑回归简介\"></a>逻辑回归简介</h2><ul>\n<li>解决分类问题，输出一个概率[0,1]</li>\n</ul>\n<p><img src=\"/images/ai/30.png\" alt=\"image\"></p>\n<h2 id=\"加载二分类数据集\"><a href=\"#加载二分类数据集\" class=\"headerlink\" title=\"加载二分类数据集\"></a>加载二分类数据集</h2><ul>\n<li>使用脚本生成二分类数据集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用脚本生成400组二分类数据</span><br><span class=\"line\">  const data = getData(400);</span><br><span class=\"line\">  console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据结构如图：</li>\n</ul>\n<p><img src=\"/images/ai/31.png\" alt=\"image\"></p>\n<ul>\n<li>可视化二分类数据集(散点图)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化为散点图</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;二分类逻辑回归 训练数据&apos;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values:[</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 1),</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 0),</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化效果：</li>\n</ul>\n<p><img src=\"/images/ai/32.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构-带有激活函数的单个神经元\"><a href=\"#定义模型结构-带有激活函数的单个神经元\" class=\"headerlink\" title=\"定义模型结构:带有激活函数的单个神经元\"></a>定义模型结构:带有激活函数的单个神经元</h2><ul>\n<li>初始化一个sequential神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加一个sequential神经网络模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加层，设计层的神经元个数、inputShape、激活函数(<code>model.add</code>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:1,  //神经元个数</span><br><span class=\"line\">    inputShape:[2], //输入的tensor的shape：长度为2的一维数组</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;, //sigmoid这种激活函数的曲线y值范围始终在[0,1]</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数损失函数-Log-Loss\"><a href=\"#对数损失函数-Log-Loss\" class=\"headerlink\" title=\"对数损失函数 Log Loss\"></a>对数损失函数 Log Loss</h2><ul>\n<li>利用<code>wiki.fast.ai</code>人工智能教学网站，理解<a href=\"http://wiki.fast.ai/index.php/Log_Loss\" target=\"_blank\" rel=\"noopener\">对数损失函数</a></li>\n<li>对数损失函数:用于测量预测值在[0,1]的分类模型的性能</li>\n<li>如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：</li>\n</ul>\n<p><img src=\"/images/ai/33.png\" alt=\"image\"></p>\n<h2 id=\"用TFJS-API设置损失函数为：LogLoss-model-compile\"><a href=\"#用TFJS-API设置损失函数为：LogLoss-model-compile\" class=\"headerlink\" title=\"用TFJS API设置损失函数为：LogLoss(model.compile)\"></a>用TFJS API设置损失函数为：LogLoss(<code>model.compile</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数为：LogLoss 对数损失函数</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.logLoss&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置超参数，训练模型-model-fit\"><a href=\"#设置超参数，训练模型-model-fit\" class=\"headerlink\" title=\"设置超参数，训练模型(model.fit)\"></a>设置超参数，训练模型(<code>model.fit</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置超参数 训练模型</span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize:40,</span><br><span class=\"line\">    epochs:50,</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程截图：</li>\n</ul>\n<p><img src=\"/images/ai/34.png\" alt=\"image\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><ul>\n<li>编写前端界面输入待预测数据</li>\n<li>使用训练好的模型进行预测(<code>model.predict</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">\"predict(this);return false;\"</span>&gt;</span></span><br><span class=\"line\">  x: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>&gt;</span></span><br><span class=\"line\">  y: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"y\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>预测<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\">(<span class=\"params\">form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = model.predict(tf.tensor([[form.x.value * <span class=\"number\">1</span>,form.y.value * <span class=\"number\">1</span>]]));</span><br><span class=\"line\">    alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入2，2    预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/35.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML07 XOR回归训练：多层神经网络","date":"2020-01-06T16:00:00.000Z","description":"Javascript玩转机器学习07","toc":1,"top":0,"_content":"\n## XOR 异或逻辑回归\n- 不是线性问题\n- 需要多层神经网络+激活函数来解决\n\n![image](/images/ai/36.png)\n\n\n## [Google Playground网站](http://playground.tensorflow.org/)\n- 用TFJS写的 可视化学习机器学习的网站\n\n\n\n![image](/images/ai/37.png)\n\n\n## 加载XOR数据集\n\n```\n//调脚本接口生成模拟数据\nconst data = getData(400);\nconsole.log(data);\n```\n\n- 模拟数据 数据结构：\n![image](/images/ai/38.png)\n\n\n```\n//可视化\ntfvis.render.scatterplot(\n    { name: \"XOR训练数据\" },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0)\n        ]\n    }\n);\n```\n\n- 可视化结果\n\n![image](/images/ai/39.png)\n\n## 定义模型结构：多层神经网络\n- 初始化一个神经网络模型\n- 为模型添加两个层：隐藏层+输出层\n- 设计层的激活函数、inputShape、神经元个数\n\n\n```\n//初始化一个 sequential model\n    const mdoel = tf.sequential();\n\n    //添加一个隐藏层（全连接层）\n    mdoel.add(\n        tf.layers.dense({\n            units: 4,\n            inputShape: [2], //只有第一层需要设置inputShape\n            activition: \"relu\"\n        })\n    );\n\n    //添加一个输出层（全连接层）\n    model.add(\n        tf.layers.dense({\n            units: 1,\n            activition: \"sigmoid\" //需要输出[0,1]之间的概率所以选sigmoid\n        })\n    );\n```\n- 定义模型的损失函数和优化器\n\n\n```\n//定义模型的损失函数和优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n```\n\n\n## 训练模型并预测\n- 训练数据转换为tensor\n\n```\n//训练数据转换为tensor\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n```\n\n\n- 训练模型并可视化训练过程\n\n```\n//训练\nawait model.fit(inputs, labels, {\n    epochs: 10,\n    callbacks: tfvis.show.fitCallbacks({ name: \"XOR训练过程\" }, [\"loss\"])\n});\n```\n\n- 训练过程\n![image](/images/ai/40.png)\n\n\n- 进行预测\n\n```\n//预测\nwindow.predict = form => {\n    const pred = model.predict(\n        tf.tensor([[form.x.value * 1, form.y.value * 1]])\n    );\n    alert(`预测结果：${pred.dataSync()[0]}`);\n};\n```\n\n- 预测结果\n\n![image](/images/ai/41.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n\n","source":"_posts/fed_ml_07_xor_regression.md","raw":"---\ntitle: ML07 XOR回归训练：多层神经网络\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-01-07\ndescription: Javascript玩转机器学习07\ntoc: 1\ntop: 0\n---\n\n## XOR 异或逻辑回归\n- 不是线性问题\n- 需要多层神经网络+激活函数来解决\n\n![image](/images/ai/36.png)\n\n\n## [Google Playground网站](http://playground.tensorflow.org/)\n- 用TFJS写的 可视化学习机器学习的网站\n\n\n\n![image](/images/ai/37.png)\n\n\n## 加载XOR数据集\n\n```\n//调脚本接口生成模拟数据\nconst data = getData(400);\nconsole.log(data);\n```\n\n- 模拟数据 数据结构：\n![image](/images/ai/38.png)\n\n\n```\n//可视化\ntfvis.render.scatterplot(\n    { name: \"XOR训练数据\" },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0)\n        ]\n    }\n);\n```\n\n- 可视化结果\n\n![image](/images/ai/39.png)\n\n## 定义模型结构：多层神经网络\n- 初始化一个神经网络模型\n- 为模型添加两个层：隐藏层+输出层\n- 设计层的激活函数、inputShape、神经元个数\n\n\n```\n//初始化一个 sequential model\n    const mdoel = tf.sequential();\n\n    //添加一个隐藏层（全连接层）\n    mdoel.add(\n        tf.layers.dense({\n            units: 4,\n            inputShape: [2], //只有第一层需要设置inputShape\n            activition: \"relu\"\n        })\n    );\n\n    //添加一个输出层（全连接层）\n    model.add(\n        tf.layers.dense({\n            units: 1,\n            activition: \"sigmoid\" //需要输出[0,1]之间的概率所以选sigmoid\n        })\n    );\n```\n- 定义模型的损失函数和优化器\n\n\n```\n//定义模型的损失函数和优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n```\n\n\n## 训练模型并预测\n- 训练数据转换为tensor\n\n```\n//训练数据转换为tensor\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n```\n\n\n- 训练模型并可视化训练过程\n\n```\n//训练\nawait model.fit(inputs, labels, {\n    epochs: 10,\n    callbacks: tfvis.show.fitCallbacks({ name: \"XOR训练过程\" }, [\"loss\"])\n});\n```\n\n- 训练过程\n![image](/images/ai/40.png)\n\n\n- 进行预测\n\n```\n//预测\nwindow.predict = form => {\n    const pred = model.predict(\n        tf.tensor([[form.x.value * 1, form.y.value * 1]])\n    );\n    alert(`预测结果：${pred.dataSync()[0]}`);\n};\n```\n\n- 预测结果\n\n![image](/images/ai/41.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n\n","slug":"fed_ml_07_xor_regression","published":1,"updated":"2020-04-28T01:19:34.570Z","_id":"ck94a9apg001w07s6k3u9g9fx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"XOR-异或逻辑回归\"><a href=\"#XOR-异或逻辑回归\" class=\"headerlink\" title=\"XOR 异或逻辑回归\"></a>XOR 异或逻辑回归</h2><ul>\n<li>不是线性问题</li>\n<li>需要多层神经网络+激活函数来解决</li>\n</ul>\n<p><img src=\"/images/ai/36.png\" alt=\"image\"></p>\n<h2 id=\"Google-Playground网站\"><a href=\"#Google-Playground网站\" class=\"headerlink\" title=\"Google Playground网站\"></a><a href=\"http://playground.tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Google Playground网站</a></h2><ul>\n<li>用TFJS写的 可视化学习机器学习的网站</li>\n</ul>\n<p><img src=\"/images/ai/37.png\" alt=\"image\"></p>\n<h2 id=\"加载XOR数据集\"><a href=\"#加载XOR数据集\" class=\"headerlink\" title=\"加载XOR数据集\"></a>加载XOR数据集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调脚本接口生成模拟数据</span><br><span class=\"line\">const data = getData(400);</span><br><span class=\"line\">console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模拟数据 数据结构：<br><img src=\"/images/ai/38.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化</span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;XOR训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 1),</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 0)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化结果</li>\n</ul>\n<p><img src=\"/images/ai/39.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：多层神经网络\"><a href=\"#定义模型结构：多层神经网络\" class=\"headerlink\" title=\"定义模型结构：多层神经网络\"></a>定义模型结构：多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n<li>为模型添加两个层：隐藏层+输出层</li>\n<li>设计层的激活函数、inputShape、神经元个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化一个 sequential model</span><br><span class=\"line\">    const mdoel = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个隐藏层（全连接层）</span><br><span class=\"line\">    mdoel.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 4,</span><br><span class=\"line\">            inputShape: [2], //只有第一层需要设置inputShape</span><br><span class=\"line\">            activition: &quot;relu&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个输出层（全连接层）</span><br><span class=\"line\">    model.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 1,</span><br><span class=\"line\">            activition: &quot;sigmoid&quot; //需要输出[0,1]之间的概率所以选sigmoid</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义模型的损失函数和优化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义模型的损失函数和优化器</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(0.1)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并预测\"><a href=\"#训练模型并预测\" class=\"headerlink\" title=\"训练模型并预测\"></a>训练模型并预测</h2><ul>\n<li>训练数据转换为tensor</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练数据转换为tensor</span><br><span class=\"line\">const inputs = tf.tensor(data.map(p =&gt; [p.x, p.y]));</span><br><span class=\"line\">const labels = tf.tensor(data.map(p =&gt; p.label));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练模型并可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练</span><br><span class=\"line\">await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    epochs: 10,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;XOR训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程<br><img src=\"/images/ai/40.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>进行预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预测</span><br><span class=\"line\">window.predict = form =&gt; &#123;</span><br><span class=\"line\">    const pred = model.predict(</span><br><span class=\"line\">        tf.tensor([[form.x.value * 1, form.y.value * 1]])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    alert(`预测结果：$&#123;pred.dataSync()[0]&#125;`);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果</li>\n</ul>\n<p><img src=\"/images/ai/41.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"XOR-异或逻辑回归\"><a href=\"#XOR-异或逻辑回归\" class=\"headerlink\" title=\"XOR 异或逻辑回归\"></a>XOR 异或逻辑回归</h2><ul>\n<li>不是线性问题</li>\n<li>需要多层神经网络+激活函数来解决</li>\n</ul>\n<p><img src=\"/images/ai/36.png\" alt=\"image\"></p>\n<h2 id=\"Google-Playground网站\"><a href=\"#Google-Playground网站\" class=\"headerlink\" title=\"Google Playground网站\"></a><a href=\"http://playground.tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Google Playground网站</a></h2><ul>\n<li>用TFJS写的 可视化学习机器学习的网站</li>\n</ul>\n<p><img src=\"/images/ai/37.png\" alt=\"image\"></p>\n<h2 id=\"加载XOR数据集\"><a href=\"#加载XOR数据集\" class=\"headerlink\" title=\"加载XOR数据集\"></a>加载XOR数据集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调脚本接口生成模拟数据</span><br><span class=\"line\">const data = getData(400);</span><br><span class=\"line\">console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模拟数据 数据结构：<br><img src=\"/images/ai/38.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化</span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;XOR训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 1),</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 0)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化结果</li>\n</ul>\n<p><img src=\"/images/ai/39.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：多层神经网络\"><a href=\"#定义模型结构：多层神经网络\" class=\"headerlink\" title=\"定义模型结构：多层神经网络\"></a>定义模型结构：多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n<li>为模型添加两个层：隐藏层+输出层</li>\n<li>设计层的激活函数、inputShape、神经元个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化一个 sequential model</span><br><span class=\"line\">    const mdoel = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个隐藏层（全连接层）</span><br><span class=\"line\">    mdoel.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 4,</span><br><span class=\"line\">            inputShape: [2], //只有第一层需要设置inputShape</span><br><span class=\"line\">            activition: &quot;relu&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个输出层（全连接层）</span><br><span class=\"line\">    model.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 1,</span><br><span class=\"line\">            activition: &quot;sigmoid&quot; //需要输出[0,1]之间的概率所以选sigmoid</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义模型的损失函数和优化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义模型的损失函数和优化器</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(0.1)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并预测\"><a href=\"#训练模型并预测\" class=\"headerlink\" title=\"训练模型并预测\"></a>训练模型并预测</h2><ul>\n<li>训练数据转换为tensor</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练数据转换为tensor</span><br><span class=\"line\">const inputs = tf.tensor(data.map(p =&gt; [p.x, p.y]));</span><br><span class=\"line\">const labels = tf.tensor(data.map(p =&gt; p.label));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练模型并可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练</span><br><span class=\"line\">await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    epochs: 10,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;XOR训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程<br><img src=\"/images/ai/40.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>进行预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预测</span><br><span class=\"line\">window.predict = form =&gt; &#123;</span><br><span class=\"line\">    const pred = model.predict(</span><br><span class=\"line\">        tf.tensor([[form.x.value * 1, form.y.value * 1]])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    alert(`预测结果：$&#123;pred.dataSync()[0]&#125;`);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果</li>\n</ul>\n<p><img src=\"/images/ai/41.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"_content":"","source":"_posts/fed_ml_08_iris.md","raw":"","slug":"fed_ml_08_iris","published":1,"date":"2020-04-08T00:43:01.131Z","updated":"2020-04-29T07:24:09.051Z","_id":"ck94a9apg001z07s6htd4zl7y","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Grunt 学习总结","date":"2019-05-31T16:00:00.000Z","description":"自动化 压缩（minification）、编译、单元测试、linting等","toc":1,"top":0,"_content":"\n# 是什么 & 用途 & 场景\ngrunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。\n\n通过丰富的grunt插件可以实现以下功能：\n- jshint代码检查\n- 代码合并\n- 代码压缩--js/css/html都可以\n- SASS/LESS编译css\n- watch监听---文件发生改变自动执行任务\n\n# 相关\n- [官方github](https://github.com/gruntjs)\n- [官方网址（文档）](https://gruntjs.com/)\n- [中文文档](http://www.gruntjs.net/)\n- [插件列表](https://gruntjs.com/plugins)\n\n# 环境\ngrunt依赖Nodejs和npm环境\n\n使用npm安装全局grunt-cli命令行工具：`npm install -g grunt-cli`\n\n# demo\n1. 需求\n\n假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：\n\n![demo src 目录结构](/images/grunt/grunt01.png)\n\n现在你想用grunt，自动给你的源代码执行几个任务：\n- 将images/html和复制到 发布文件夹build下\n- 用jshint检查js语法\n- 合并四个js文件（分别合并，因为a,b用于不同的页面）\n- 编译scss文件\n- 压缩合并后的js文件，存储到build下\n- 调试：新建一个本地服务器监听文件改变自动刷新HTML文件\n\n2. 搭建环境\n\n- 在命令行里打开到gruntlearn的目录下，执行`npm init`\n- 安装 grunt 和 grunt-cli\n```bash\nnpm install grunt-cli --global\nnpm install grunt --save-dev\n```\n\n- 在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：\n    - 复制文件：grunt-contrib-copy\n    - 合并文件：grunt-contrib-concat\n    - 语法检查：grunt-contrib-jshint\n    - Scss 编译：grunt-contrib-sass\n    - 压缩文件：grunt-contrib-uglify\n    - 监听文件变动：grunt-contrib-watch\n    - 建立本地服务器：grunt-contrib-connect\n- 安装插件：\n```bash\nnpm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect\n```\n- 创建gruntfile.js文件，代码结构：\n![gruntfile.js 代码结构](/images/grunt/grunt02.png)\n\n- 根据demo需求配置gruntfile：\n```js\n//wrapper函数\nmodule.exports = function(grunt) {\n\n    //你可以像普通的js文件一样添加自己的代码\n    var sassStyle = 'expanded';\n\n    //1.配置任务 tasks--根据插件的文档来定义任务\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        //将html和图片从src复制到build\n        copy: { //task\n            html: { //target\n                files: [\n                    { expand: true, cwd: './src/html', src: '*', dest: './build/html/' }\n                ]\n            },\n            images: { //target\n                files: [\n                    { expand: true, cwd: './src/images', src: '*', dest: './build/images/' }\n                ]\n            }\n        },\n        //合并js\n        concat: {\n            /* options: {\n                separator: ';',//合并分隔符\n            }, */\n            dist: {\n                files: { //文件路径\n                    './src/js/a.all.js': ['./src/js/a.1.js', './src/js/a.2.js'],\n                    './src/js/b.all.js': ['./src/js/b.1.js', './src/js/b.2.js']\n                }\n            },\n        },\n        //task:编译sass\n        sass: {\n            output: { //target\n                options: { //target options\n                    style: sassStyle\n                },\n                files: {\n                    './build/css/style.css': './src/scss/style.scss' //'目标文件':'源文件'\n                }\n            }\n        },\n        //代码检查\n        jshint: {\n            all: ['./src/js/a.all.js', './src/js/b.all.js']\n        },\n        //压缩\n        uglify: {\n            uglifyjs: {\n                files: {\n                    './build/js/a.min.js': ['./src/js/a.all.js'],\n                    './build/js/b.min.js': ['./src/js/b.all.js']\n                }\n            }\n        },\n        //监听\n        watch: {\n            scripts: {\n                files: ['./src/js/a.1.js', './src/js/a.2.js', './src/js/b.1.js', '/src/js/b.2.js'],\n                tasks: ['concat', 'jshint', 'uglify']\n            },\n            sass: {\n                files: ['./src/scss/style.scss'],\n                tasks: ['sass']\n            },\n            livereload: {\n                options: {\n                    liverelload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    './src/html/index.html',\n                    './src/scss/style.scss',\n                    './src/js/a.1.js',\n                    './src/js/a.2.js',\n                    './src/js/b.1.js',\n                    './src/js/b.2.js'\n                ]\n            }\n        },\n        connect: {\n            options: {\n                port: 9000,\n                open: true,\n                livareload: 35729,\n                //change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            server: {\n                options: {\n                    port: 9001,\n                    base: './'\n                }\n            }\n        }\n    });\n\n    //2.加载插件\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-sass');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-connect');\n\n    //3.注册任务\n    grunt.registerTask('copyhtml', ['copy:html']); //可以用task：target的方法分别注册\n    grunt.registerTask('concatjs', ['concat']); //也可以只用task名称注册，默认执行task下全部target\n    grunt.registerTask('outputcss', ['sass']);\n    grunt.registerTask('watchit', ['concat', 'sass', 'jshint', 'uglify', 'connect', 'watch']);\n    grunt.registerTask('default', ['copy', 'concat', 'sass', 'jshint', 'uglify']);\n}\n```\n\n- 执行定义好的命令`grunt default`：\n![执行命令](/images/grunt/grunt03.png)\n\n- 执行后的项目目录结构：\n![执行后目录结构](/images/grunt/grunt04.png)\n","source":"_posts/grunt.md","raw":"---\ntitle: Grunt 学习总结\ncategories:\n    - 06 构建工具 # 一级分类\ntags:\ndate: 2019-06-01\ndescription: 自动化 压缩（minification）、编译、单元测试、linting等\ntoc: 1\ntop: 0\n---\n\n# 是什么 & 用途 & 场景\ngrunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。\n\n通过丰富的grunt插件可以实现以下功能：\n- jshint代码检查\n- 代码合并\n- 代码压缩--js/css/html都可以\n- SASS/LESS编译css\n- watch监听---文件发生改变自动执行任务\n\n# 相关\n- [官方github](https://github.com/gruntjs)\n- [官方网址（文档）](https://gruntjs.com/)\n- [中文文档](http://www.gruntjs.net/)\n- [插件列表](https://gruntjs.com/plugins)\n\n# 环境\ngrunt依赖Nodejs和npm环境\n\n使用npm安装全局grunt-cli命令行工具：`npm install -g grunt-cli`\n\n# demo\n1. 需求\n\n假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：\n\n![demo src 目录结构](/images/grunt/grunt01.png)\n\n现在你想用grunt，自动给你的源代码执行几个任务：\n- 将images/html和复制到 发布文件夹build下\n- 用jshint检查js语法\n- 合并四个js文件（分别合并，因为a,b用于不同的页面）\n- 编译scss文件\n- 压缩合并后的js文件，存储到build下\n- 调试：新建一个本地服务器监听文件改变自动刷新HTML文件\n\n2. 搭建环境\n\n- 在命令行里打开到gruntlearn的目录下，执行`npm init`\n- 安装 grunt 和 grunt-cli\n```bash\nnpm install grunt-cli --global\nnpm install grunt --save-dev\n```\n\n- 在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：\n    - 复制文件：grunt-contrib-copy\n    - 合并文件：grunt-contrib-concat\n    - 语法检查：grunt-contrib-jshint\n    - Scss 编译：grunt-contrib-sass\n    - 压缩文件：grunt-contrib-uglify\n    - 监听文件变动：grunt-contrib-watch\n    - 建立本地服务器：grunt-contrib-connect\n- 安装插件：\n```bash\nnpm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect\n```\n- 创建gruntfile.js文件，代码结构：\n![gruntfile.js 代码结构](/images/grunt/grunt02.png)\n\n- 根据demo需求配置gruntfile：\n```js\n//wrapper函数\nmodule.exports = function(grunt) {\n\n    //你可以像普通的js文件一样添加自己的代码\n    var sassStyle = 'expanded';\n\n    //1.配置任务 tasks--根据插件的文档来定义任务\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        //将html和图片从src复制到build\n        copy: { //task\n            html: { //target\n                files: [\n                    { expand: true, cwd: './src/html', src: '*', dest: './build/html/' }\n                ]\n            },\n            images: { //target\n                files: [\n                    { expand: true, cwd: './src/images', src: '*', dest: './build/images/' }\n                ]\n            }\n        },\n        //合并js\n        concat: {\n            /* options: {\n                separator: ';',//合并分隔符\n            }, */\n            dist: {\n                files: { //文件路径\n                    './src/js/a.all.js': ['./src/js/a.1.js', './src/js/a.2.js'],\n                    './src/js/b.all.js': ['./src/js/b.1.js', './src/js/b.2.js']\n                }\n            },\n        },\n        //task:编译sass\n        sass: {\n            output: { //target\n                options: { //target options\n                    style: sassStyle\n                },\n                files: {\n                    './build/css/style.css': './src/scss/style.scss' //'目标文件':'源文件'\n                }\n            }\n        },\n        //代码检查\n        jshint: {\n            all: ['./src/js/a.all.js', './src/js/b.all.js']\n        },\n        //压缩\n        uglify: {\n            uglifyjs: {\n                files: {\n                    './build/js/a.min.js': ['./src/js/a.all.js'],\n                    './build/js/b.min.js': ['./src/js/b.all.js']\n                }\n            }\n        },\n        //监听\n        watch: {\n            scripts: {\n                files: ['./src/js/a.1.js', './src/js/a.2.js', './src/js/b.1.js', '/src/js/b.2.js'],\n                tasks: ['concat', 'jshint', 'uglify']\n            },\n            sass: {\n                files: ['./src/scss/style.scss'],\n                tasks: ['sass']\n            },\n            livereload: {\n                options: {\n                    liverelload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    './src/html/index.html',\n                    './src/scss/style.scss',\n                    './src/js/a.1.js',\n                    './src/js/a.2.js',\n                    './src/js/b.1.js',\n                    './src/js/b.2.js'\n                ]\n            }\n        },\n        connect: {\n            options: {\n                port: 9000,\n                open: true,\n                livareload: 35729,\n                //change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            server: {\n                options: {\n                    port: 9001,\n                    base: './'\n                }\n            }\n        }\n    });\n\n    //2.加载插件\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-sass');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-connect');\n\n    //3.注册任务\n    grunt.registerTask('copyhtml', ['copy:html']); //可以用task：target的方法分别注册\n    grunt.registerTask('concatjs', ['concat']); //也可以只用task名称注册，默认执行task下全部target\n    grunt.registerTask('outputcss', ['sass']);\n    grunt.registerTask('watchit', ['concat', 'sass', 'jshint', 'uglify', 'connect', 'watch']);\n    grunt.registerTask('default', ['copy', 'concat', 'sass', 'jshint', 'uglify']);\n}\n```\n\n- 执行定义好的命令`grunt default`：\n![执行命令](/images/grunt/grunt03.png)\n\n- 执行后的项目目录结构：\n![执行后目录结构](/images/grunt/grunt04.png)\n","slug":"grunt","published":1,"updated":"2020-04-08T00:43:01.132Z","_id":"ck94a9aph002007s6wdk2vfv6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"是什么-amp-用途-amp-场景\"><a href=\"#是什么-amp-用途-amp-场景\" class=\"headerlink\" title=\"是什么 &amp; 用途 &amp; 场景\"></a>是什么 &amp; 用途 &amp; 场景</h1><p>grunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。</p>\n<p>通过丰富的grunt插件可以实现以下功能：</p>\n<ul>\n<li>jshint代码检查</li>\n<li>代码合并</li>\n<li>代码压缩–js/css/html都可以</li>\n<li>SASS/LESS编译css</li>\n<li>watch监听—文件发生改变自动执行任务</li>\n</ul>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><ul>\n<li><a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"noopener\">官方github</a></li>\n<li><a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">官方网址（文档）</a></li>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n<li><a href=\"https://gruntjs.com/plugins\" target=\"_blank\" rel=\"noopener\">插件列表</a></li>\n</ul>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>grunt依赖Nodejs和npm环境</p>\n<p>使用npm安装全局grunt-cli命令行工具：<code>npm install -g grunt-cli</code></p>\n<h1 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h1><ol>\n<li>需求</li>\n</ol>\n<p>假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：</p>\n<p><img src=\"/images/grunt/grunt01.png\" alt=\"demo src 目录结构\"></p>\n<p>现在你想用grunt，自动给你的源代码执行几个任务：</p>\n<ul>\n<li>将images/html和复制到 发布文件夹build下</li>\n<li>用jshint检查js语法</li>\n<li>合并四个js文件（分别合并，因为a,b用于不同的页面）</li>\n<li>编译scss文件</li>\n<li>压缩合并后的js文件，存储到build下</li>\n<li>调试：新建一个本地服务器监听文件改变自动刷新HTML文件</li>\n</ul>\n<ol start=\"2\">\n<li>搭建环境</li>\n</ol>\n<ul>\n<li>在命令行里打开到gruntlearn的目录下，执行<code>npm init</code></li>\n<li><p>安装 grunt 和 grunt-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-cli --global</span><br><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：</p>\n<ul>\n<li>复制文件：grunt-contrib-copy</li>\n<li>合并文件：grunt-contrib-concat</li>\n<li>语法检查：grunt-contrib-jshint</li>\n<li>Scss 编译：grunt-contrib-sass</li>\n<li>压缩文件：grunt-contrib-uglify</li>\n<li>监听文件变动：grunt-contrib-watch</li>\n<li>建立本地服务器：grunt-contrib-connect</li>\n</ul>\n</li>\n<li><p>安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建gruntfile.js文件，代码结构：<br><img src=\"/images/grunt/grunt02.png\" alt=\"gruntfile.js 代码结构\"></p>\n</li>\n<li><p>根据demo需求配置gruntfile：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//wrapper函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//你可以像普通的js文件一样添加自己的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sassStyle = <span class=\"string\">'expanded'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.配置任务 tasks--根据插件的文档来定义任务</span></span><br><span class=\"line\">    grunt.initConfig(&#123;</span><br><span class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">        <span class=\"comment\">//将html和图片从src复制到build</span></span><br><span class=\"line\">        copy: &#123; <span class=\"comment\">//task</span></span><br><span class=\"line\">            html: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/html'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/html/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            images: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/images'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/images/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//合并js</span></span><br><span class=\"line\">        concat: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* options: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                separator: ';',//合并分隔符</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;, */</span></span><br><span class=\"line\">            dist: &#123;</span><br><span class=\"line\">                files: &#123; <span class=\"comment\">//文件路径</span></span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.all.js'</span>: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.all.js'</span>: [<span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'./src/js/b.2.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//task:编译sass</span></span><br><span class=\"line\">        sass: &#123;</span><br><span class=\"line\">            output: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                options: &#123; <span class=\"comment\">//target options</span></span><br><span class=\"line\">                    style: sassStyle</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/css/style.css'</span>: <span class=\"string\">'./src/scss/style.scss'</span> <span class=\"comment\">//'目标文件':'源文件'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//代码检查</span></span><br><span class=\"line\">        jshint: &#123;</span><br><span class=\"line\">            all: [<span class=\"string\">'./src/js/a.all.js'</span>, <span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//压缩</span></span><br><span class=\"line\">        uglify: &#123;</span><br><span class=\"line\">            uglifyjs: &#123;</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/a.min.js'</span>: [<span class=\"string\">'./src/js/a.all.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/b.min.js'</span>: [<span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//监听</span></span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">            scripts: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>, <span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'/src/js/b.2.js'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'concat'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/scss/style.scss'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            livereload: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    liverelload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    <span class=\"string\">'./src/html/index.html'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/scss/style.scss'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.2.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.2.js'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        connect: &#123;</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">                open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                livareload: <span class=\"number\">35729</span>,</span><br><span class=\"line\">                <span class=\"comment\">//change this to '0.0.0.0' to access the server from outside</span></span><br><span class=\"line\">                hostname: <span class=\"string\">'localhost'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            server: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    port: <span class=\"number\">9001</span>,</span><br><span class=\"line\">                    base: <span class=\"string\">'./'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.加载插件</span></span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-copy'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-sass'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-jshint'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-connect'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.注册任务</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'copyhtml'</span>, [<span class=\"string\">'copy:html'</span>]); <span class=\"comment\">//可以用task：target的方法分别注册</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'concatjs'</span>, [<span class=\"string\">'concat'</span>]); <span class=\"comment\">//也可以只用task名称注册，默认执行task下全部target</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'outputcss'</span>, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'watchit'</span>, [<span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>, <span class=\"string\">'connect'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'copy'</span>, <span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行定义好的命令<code>grunt default</code>：<br><img src=\"/images/grunt/grunt03.png\" alt=\"执行命令\"></p>\n</li>\n<li><p>执行后的项目目录结构：<br><img src=\"/images/grunt/grunt04.png\" alt=\"执行后目录结构\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"是什么-amp-用途-amp-场景\"><a href=\"#是什么-amp-用途-amp-场景\" class=\"headerlink\" title=\"是什么 &amp; 用途 &amp; 场景\"></a>是什么 &amp; 用途 &amp; 场景</h1><p>grunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。</p>\n<p>通过丰富的grunt插件可以实现以下功能：</p>\n<ul>\n<li>jshint代码检查</li>\n<li>代码合并</li>\n<li>代码压缩–js/css/html都可以</li>\n<li>SASS/LESS编译css</li>\n<li>watch监听—文件发生改变自动执行任务</li>\n</ul>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><ul>\n<li><a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"noopener\">官方github</a></li>\n<li><a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">官方网址（文档）</a></li>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n<li><a href=\"https://gruntjs.com/plugins\" target=\"_blank\" rel=\"noopener\">插件列表</a></li>\n</ul>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>grunt依赖Nodejs和npm环境</p>\n<p>使用npm安装全局grunt-cli命令行工具：<code>npm install -g grunt-cli</code></p>\n<h1 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h1><ol>\n<li>需求</li>\n</ol>\n<p>假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：</p>\n<p><img src=\"/images/grunt/grunt01.png\" alt=\"demo src 目录结构\"></p>\n<p>现在你想用grunt，自动给你的源代码执行几个任务：</p>\n<ul>\n<li>将images/html和复制到 发布文件夹build下</li>\n<li>用jshint检查js语法</li>\n<li>合并四个js文件（分别合并，因为a,b用于不同的页面）</li>\n<li>编译scss文件</li>\n<li>压缩合并后的js文件，存储到build下</li>\n<li>调试：新建一个本地服务器监听文件改变自动刷新HTML文件</li>\n</ul>\n<ol start=\"2\">\n<li>搭建环境</li>\n</ol>\n<ul>\n<li>在命令行里打开到gruntlearn的目录下，执行<code>npm init</code></li>\n<li><p>安装 grunt 和 grunt-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-cli --global</span><br><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：</p>\n<ul>\n<li>复制文件：grunt-contrib-copy</li>\n<li>合并文件：grunt-contrib-concat</li>\n<li>语法检查：grunt-contrib-jshint</li>\n<li>Scss 编译：grunt-contrib-sass</li>\n<li>压缩文件：grunt-contrib-uglify</li>\n<li>监听文件变动：grunt-contrib-watch</li>\n<li>建立本地服务器：grunt-contrib-connect</li>\n</ul>\n</li>\n<li><p>安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建gruntfile.js文件，代码结构：<br><img src=\"/images/grunt/grunt02.png\" alt=\"gruntfile.js 代码结构\"></p>\n</li>\n<li><p>根据demo需求配置gruntfile：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//wrapper函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//你可以像普通的js文件一样添加自己的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sassStyle = <span class=\"string\">'expanded'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.配置任务 tasks--根据插件的文档来定义任务</span></span><br><span class=\"line\">    grunt.initConfig(&#123;</span><br><span class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">        <span class=\"comment\">//将html和图片从src复制到build</span></span><br><span class=\"line\">        copy: &#123; <span class=\"comment\">//task</span></span><br><span class=\"line\">            html: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/html'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/html/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            images: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/images'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/images/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//合并js</span></span><br><span class=\"line\">        concat: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* options: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                separator: ';',//合并分隔符</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;, */</span></span><br><span class=\"line\">            dist: &#123;</span><br><span class=\"line\">                files: &#123; <span class=\"comment\">//文件路径</span></span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.all.js'</span>: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.all.js'</span>: [<span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'./src/js/b.2.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//task:编译sass</span></span><br><span class=\"line\">        sass: &#123;</span><br><span class=\"line\">            output: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                options: &#123; <span class=\"comment\">//target options</span></span><br><span class=\"line\">                    style: sassStyle</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/css/style.css'</span>: <span class=\"string\">'./src/scss/style.scss'</span> <span class=\"comment\">//'目标文件':'源文件'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//代码检查</span></span><br><span class=\"line\">        jshint: &#123;</span><br><span class=\"line\">            all: [<span class=\"string\">'./src/js/a.all.js'</span>, <span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//压缩</span></span><br><span class=\"line\">        uglify: &#123;</span><br><span class=\"line\">            uglifyjs: &#123;</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/a.min.js'</span>: [<span class=\"string\">'./src/js/a.all.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/b.min.js'</span>: [<span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//监听</span></span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">            scripts: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>, <span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'/src/js/b.2.js'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'concat'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/scss/style.scss'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            livereload: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    liverelload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    <span class=\"string\">'./src/html/index.html'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/scss/style.scss'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.2.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.2.js'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        connect: &#123;</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">                open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                livareload: <span class=\"number\">35729</span>,</span><br><span class=\"line\">                <span class=\"comment\">//change this to '0.0.0.0' to access the server from outside</span></span><br><span class=\"line\">                hostname: <span class=\"string\">'localhost'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            server: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    port: <span class=\"number\">9001</span>,</span><br><span class=\"line\">                    base: <span class=\"string\">'./'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.加载插件</span></span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-copy'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-sass'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-jshint'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-connect'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.注册任务</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'copyhtml'</span>, [<span class=\"string\">'copy:html'</span>]); <span class=\"comment\">//可以用task：target的方法分别注册</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'concatjs'</span>, [<span class=\"string\">'concat'</span>]); <span class=\"comment\">//也可以只用task名称注册，默认执行task下全部target</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'outputcss'</span>, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'watchit'</span>, [<span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>, <span class=\"string\">'connect'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'copy'</span>, <span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行定义好的命令<code>grunt default</code>：<br><img src=\"/images/grunt/grunt03.png\" alt=\"执行命令\"></p>\n</li>\n<li><p>执行后的项目目录结构：<br><img src=\"/images/grunt/grunt04.png\" alt=\"执行后目录结构\"></p>\n</li>\n</ul>\n"},{"title":"本博客搭建指南[ Hexo + Netlify ]","comments":1,"date":"2017-12-31T16:00:00.000Z","description":"免费 高效 自动部署 markdown友好。","toc":0,"_content":"\n## 搭建工具\n\n#### 1. [Hexo](https://hexo.io) - 快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n\n#### 2. [Netlify](https://www.netlify.com/) - 自动化构建、部署、持续集成，自动化HTTPS\n1. 配置代码仓库\n2. 添加构建设置\n3. 自动部署\n\n## 为什么选择这两个工具\n\n1. `Markdown赛高`：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。\n2. `提交代码 自动构建部署`：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。\n3. `自定义域名 无需服务器 HTTPS`：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。\n4. `可定制`：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改\n5. 作为参考，`vuejs.org`官方文档构建的解决方案也是hexo+netlify\n\n## 相关配置\n\n- Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n- 本博客代码仓库地址 [github scarsu/ScarSuHexo_Netlify](https://github.com/scarsu/ScarSuHexo_Netlify)\n\n\n## 本地搭建步骤：\n```bash\n#克隆代码仓库到本地\ngit clone https://github.com/scarsu/ScarSuHexo_Netlify.git\n#全局安装hexo\nnpm install hexo -g \n#安装相关依赖\nnpm install \n#构建打包\nhexo d -g \n#运行本地服务器\nhexo s \n```\n\n\n## 本站git仓库目录结构\n```bash\n.\n├── _config.yml    #网站配置\n├── package.json    #npm包信息\n├── scaffolds   #模板文件夹\n├── public   #生成的静态资源文件夹（需要添加到.gitignore文件中）\n├── node_modules   #项目依赖的node模块（需要添加到.gitignore文件中）\n├── source      #资源文件夹\n|   ├── _posts     #markown文档文件夹（日常更新md文章存放路径）\n|   ├── _xx      #所有_开头的文件夹会被编译器忽略\n|   └── xx      #不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）\n└── themes      #主题\n    └── maupassant     #maupassant主题包\n            ├── languages      #多语言文件\n            ├── layout      #布局模板文件\n            ├── source      #主题资源\n            └── _config.yml      #主题配置\n\n```\n\n\n\n---\n\n     免费 高效 自动部署 markdown友好。\n","source":"_posts/hello_hexo.md","raw":"---\ntitle: 本博客搭建指南[ Hexo + Netlify ] # 文章标题\ncategories:\n    - 00 ScarSu # 一级分类\ntags:\ncomments: true #开启评论\ndate: 2018-01-01\ndescription: 免费 高效 自动部署 markdown友好。\ntoc: 0\n---\n\n## 搭建工具\n\n#### 1. [Hexo](https://hexo.io) - 快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n\n#### 2. [Netlify](https://www.netlify.com/) - 自动化构建、部署、持续集成，自动化HTTPS\n1. 配置代码仓库\n2. 添加构建设置\n3. 自动部署\n\n## 为什么选择这两个工具\n\n1. `Markdown赛高`：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。\n2. `提交代码 自动构建部署`：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。\n3. `自定义域名 无需服务器 HTTPS`：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。\n4. `可定制`：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改\n5. 作为参考，`vuejs.org`官方文档构建的解决方案也是hexo+netlify\n\n## 相关配置\n\n- Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n- 本博客代码仓库地址 [github scarsu/ScarSuHexo_Netlify](https://github.com/scarsu/ScarSuHexo_Netlify)\n\n\n## 本地搭建步骤：\n```bash\n#克隆代码仓库到本地\ngit clone https://github.com/scarsu/ScarSuHexo_Netlify.git\n#全局安装hexo\nnpm install hexo -g \n#安装相关依赖\nnpm install \n#构建打包\nhexo d -g \n#运行本地服务器\nhexo s \n```\n\n\n## 本站git仓库目录结构\n```bash\n.\n├── _config.yml    #网站配置\n├── package.json    #npm包信息\n├── scaffolds   #模板文件夹\n├── public   #生成的静态资源文件夹（需要添加到.gitignore文件中）\n├── node_modules   #项目依赖的node模块（需要添加到.gitignore文件中）\n├── source      #资源文件夹\n|   ├── _posts     #markown文档文件夹（日常更新md文章存放路径）\n|   ├── _xx      #所有_开头的文件夹会被编译器忽略\n|   └── xx      #不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）\n└── themes      #主题\n    └── maupassant     #maupassant主题包\n            ├── languages      #多语言文件\n            ├── layout      #布局模板文件\n            ├── source      #主题资源\n            └── _config.yml      #主题配置\n\n```\n\n\n\n---\n\n     免费 高效 自动部署 markdown友好。\n","slug":"hello_hexo","published":1,"updated":"2020-04-18T00:49:44.968Z","_id":"ck94a9api002307s6byxt5p4d","layout":"post","photos":[],"link":"","content":"<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><h4 id=\"1-Hexo-快速、简洁且高效的博客框架\"><a href=\"#1-Hexo-快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"1. Hexo - 快速、简洁且高效的博客框架\"></a>1. <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> - 快速、简洁且高效的博客框架</h4><ul>\n<li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n<h4 id=\"2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\"><a href=\"#2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\" class=\"headerlink\" title=\"2. Netlify - 自动化构建、部署、持续集成，自动化HTTPS\"></a>2. <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a> - 自动化构建、部署、持续集成，自动化HTTPS</h4><ol>\n<li>配置代码仓库</li>\n<li>添加构建设置</li>\n<li>自动部署</li>\n</ol>\n<h2 id=\"为什么选择这两个工具\"><a href=\"#为什么选择这两个工具\" class=\"headerlink\" title=\"为什么选择这两个工具\"></a>为什么选择这两个工具</h2><ol>\n<li><code>Markdown赛高</code>：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。</li>\n<li><code>提交代码 自动构建部署</code>：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。</li>\n<li><code>自定义域名 无需服务器 HTTPS</code>：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。</li>\n<li><code>可定制</code>：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改</li>\n<li>作为参考，<code>vuejs.org</code>官方文档构建的解决方案也是hexo+netlify</li>\n</ol>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li>Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></li>\n<li>本博客代码仓库地址 <a href=\"https://github.com/scarsu/ScarSuHexo_Netlify\" target=\"_blank\" rel=\"noopener\">github scarsu/ScarSuHexo_Netlify</a></li>\n</ul>\n<h2 id=\"本地搭建步骤：\"><a href=\"#本地搭建步骤：\" class=\"headerlink\" title=\"本地搭建步骤：\"></a>本地搭建步骤：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆代码仓库到本地</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/scarsu/ScarSuHexo_Netlify.git</span><br><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">npm install hexo -g </span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">npm install </span><br><span class=\"line\"><span class=\"comment\">#构建打包</span></span><br><span class=\"line\">hexo d -g </span><br><span class=\"line\"><span class=\"comment\">#运行本地服务器</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"本站git仓库目录结构\"><a href=\"#本站git仓库目录结构\" class=\"headerlink\" title=\"本站git仓库目录结构\"></a>本站git仓库目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    <span class=\"comment\">#网站配置</span></span><br><span class=\"line\">├── package.json    <span class=\"comment\">#npm包信息</span></span><br><span class=\"line\">├── scaffolds   <span class=\"comment\">#模板文件夹</span></span><br><span class=\"line\">├── public   <span class=\"comment\">#生成的静态资源文件夹（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── node_modules   <span class=\"comment\">#项目依赖的node模块（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>      <span class=\"comment\">#资源文件夹</span></span><br><span class=\"line\">|   ├── _posts     <span class=\"comment\">#markown文档文件夹（日常更新md文章存放路径）</span></span><br><span class=\"line\">|   ├── _xx      <span class=\"comment\">#所有_开头的文件夹会被编译器忽略</span></span><br><span class=\"line\">|   └── xx      <span class=\"comment\">#不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）</span></span><br><span class=\"line\">└── themes      <span class=\"comment\">#主题</span></span><br><span class=\"line\">    └── maupassant     <span class=\"comment\">#maupassant主题包</span></span><br><span class=\"line\">            ├── languages      <span class=\"comment\">#多语言文件</span></span><br><span class=\"line\">            ├── layout      <span class=\"comment\">#布局模板文件</span></span><br><span class=\"line\">            ├── <span class=\"built_in\">source</span>      <span class=\"comment\">#主题资源</span></span><br><span class=\"line\">            └── _config.yml      <span class=\"comment\">#主题配置</span></span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>免费 高效 自动部署 markdown友好。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><h4 id=\"1-Hexo-快速、简洁且高效的博客框架\"><a href=\"#1-Hexo-快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"1. Hexo - 快速、简洁且高效的博客框架\"></a>1. <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> - 快速、简洁且高效的博客框架</h4><ul>\n<li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n<h4 id=\"2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\"><a href=\"#2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\" class=\"headerlink\" title=\"2. Netlify - 自动化构建、部署、持续集成，自动化HTTPS\"></a>2. <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a> - 自动化构建、部署、持续集成，自动化HTTPS</h4><ol>\n<li>配置代码仓库</li>\n<li>添加构建设置</li>\n<li>自动部署</li>\n</ol>\n<h2 id=\"为什么选择这两个工具\"><a href=\"#为什么选择这两个工具\" class=\"headerlink\" title=\"为什么选择这两个工具\"></a>为什么选择这两个工具</h2><ol>\n<li><code>Markdown赛高</code>：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。</li>\n<li><code>提交代码 自动构建部署</code>：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。</li>\n<li><code>自定义域名 无需服务器 HTTPS</code>：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。</li>\n<li><code>可定制</code>：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改</li>\n<li>作为参考，<code>vuejs.org</code>官方文档构建的解决方案也是hexo+netlify</li>\n</ol>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li>Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></li>\n<li>本博客代码仓库地址 <a href=\"https://github.com/scarsu/ScarSuHexo_Netlify\" target=\"_blank\" rel=\"noopener\">github scarsu/ScarSuHexo_Netlify</a></li>\n</ul>\n<h2 id=\"本地搭建步骤：\"><a href=\"#本地搭建步骤：\" class=\"headerlink\" title=\"本地搭建步骤：\"></a>本地搭建步骤：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆代码仓库到本地</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/scarsu/ScarSuHexo_Netlify.git</span><br><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">npm install hexo -g </span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">npm install </span><br><span class=\"line\"><span class=\"comment\">#构建打包</span></span><br><span class=\"line\">hexo d -g </span><br><span class=\"line\"><span class=\"comment\">#运行本地服务器</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"本站git仓库目录结构\"><a href=\"#本站git仓库目录结构\" class=\"headerlink\" title=\"本站git仓库目录结构\"></a>本站git仓库目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    <span class=\"comment\">#网站配置</span></span><br><span class=\"line\">├── package.json    <span class=\"comment\">#npm包信息</span></span><br><span class=\"line\">├── scaffolds   <span class=\"comment\">#模板文件夹</span></span><br><span class=\"line\">├── public   <span class=\"comment\">#生成的静态资源文件夹（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── node_modules   <span class=\"comment\">#项目依赖的node模块（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>      <span class=\"comment\">#资源文件夹</span></span><br><span class=\"line\">|   ├── _posts     <span class=\"comment\">#markown文档文件夹（日常更新md文章存放路径）</span></span><br><span class=\"line\">|   ├── _xx      <span class=\"comment\">#所有_开头的文件夹会被编译器忽略</span></span><br><span class=\"line\">|   └── xx      <span class=\"comment\">#不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）</span></span><br><span class=\"line\">└── themes      <span class=\"comment\">#主题</span></span><br><span class=\"line\">    └── maupassant     <span class=\"comment\">#maupassant主题包</span></span><br><span class=\"line\">            ├── languages      <span class=\"comment\">#多语言文件</span></span><br><span class=\"line\">            ├── layout      <span class=\"comment\">#布局模板文件</span></span><br><span class=\"line\">            ├── <span class=\"built_in\">source</span>      <span class=\"comment\">#主题资源</span></span><br><span class=\"line\">            └── _config.yml      <span class=\"comment\">#主题配置</span></span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>免费 高效 自动部署 markdown友好。\n</code></pre>"},{"title":"高可定+低维护的博客搭建指南","date":"2018-12-07T16:00:00.000Z","description":"Markdown赛高d=====(￣▽￣*)b","toc":1,"top":0,"_content":"\n## 为什么要有博客\n\n博客之于程序员意义重大，因为，**输出**是一个程序员的基本素养和技能，**开源分享**是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。\n\n为什么输出分享对程序员来说十分重要，我有以下几点看法。\n\n-   从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。\n\n-   在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。\n\n如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。\n\n-   例如 IT 圈出名的[阮一峰](http://www.ruanyifeng.com)，[张鑫旭](https://www.zhangxinxu.com/)，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；\n\n-   我也曾不止一次吸取前辈的经验以及建议，前端圈的[小爝](https://www.zhihu.com/people/xiao-jue-83/activities)大佬在知乎的某个[回答](https://www.zhihu.com/question/301802742/answer/528508203)当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；\n\n-   “前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。\n\n还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。\n\n（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）\n\n## 如何选择博客\n\n现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）\n\n也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）\n\n自建博客的选择丰富多彩，选择一个最适合自己的最重要。\n\n作为一个博客，我最重视的有两个方面：\n\n1. 可自定义，可个性化。\n\n因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。\n\n2. 高效转化。\n\n我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。\n\n我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，\n\n> Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。\n>\n> 非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。\n>\n> 就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\n\n因此今天推荐的博客搭建工具，就是[Hexo](https://hexo.io).\n\n-   通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）\n-   搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面\n-   生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可\n\n## Hexo 博客搭建 & DIY & 使用指南\n\n> 具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程\n\n1. 安装 node 和 git\n2. npm 安装 hexo 和相关依赖\n3. 根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置\n4. 在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题[maupassant](https://github.com/tufu9441/maupassant-hexo)为例\n\n主题默认样式如图：\n\n![maupassant](/images/maupassant.jpg)\n\n5. 除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。\n\n例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。\n\n配置:\n\n![hexo1](/images/hexo1.jpg)\n\npost.pug 模板代码:\n\n![hexo2](/images/hexo2.jpg)\n\n实现效果：\n\n![hexo3](/images/hexo3.jpg)\n\n6. 其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见[文档](https://pugjs.org)）\n7. 调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。\n8. 搭建完成后，日常使用只需要将 md 源文件放入 source/\\_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git\n\n```\nhexo generate --deploy\nhexo g -d\n```\n\n9. 一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。**总之 DIY 自由度极高，适合开发者**\n\n## 写在最后\n\n最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。\n","source":"_posts/highly_configurable_low_maintenance_blog_build_guide.md","raw":"---\ntitle: 高可定+低维护的博客搭建指南\ncategories:\n    - 00 ScarSu # 一级分类\ntags:\ndate: 2018-12-08\ndescription: Markdown赛高d=====(￣▽￣*)b\ntoc: 1\ntop: 0\n---\n\n## 为什么要有博客\n\n博客之于程序员意义重大，因为，**输出**是一个程序员的基本素养和技能，**开源分享**是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。\n\n为什么输出分享对程序员来说十分重要，我有以下几点看法。\n\n-   从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。\n\n-   在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。\n\n如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。\n\n-   例如 IT 圈出名的[阮一峰](http://www.ruanyifeng.com)，[张鑫旭](https://www.zhangxinxu.com/)，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；\n\n-   我也曾不止一次吸取前辈的经验以及建议，前端圈的[小爝](https://www.zhihu.com/people/xiao-jue-83/activities)大佬在知乎的某个[回答](https://www.zhihu.com/question/301802742/answer/528508203)当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；\n\n-   “前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。\n\n还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。\n\n（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）\n\n## 如何选择博客\n\n现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）\n\n也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）\n\n自建博客的选择丰富多彩，选择一个最适合自己的最重要。\n\n作为一个博客，我最重视的有两个方面：\n\n1. 可自定义，可个性化。\n\n因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。\n\n2. 高效转化。\n\n我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。\n\n我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，\n\n> Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。\n>\n> 非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。\n>\n> 就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\n\n因此今天推荐的博客搭建工具，就是[Hexo](https://hexo.io).\n\n-   通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）\n-   搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面\n-   生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可\n\n## Hexo 博客搭建 & DIY & 使用指南\n\n> 具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程\n\n1. 安装 node 和 git\n2. npm 安装 hexo 和相关依赖\n3. 根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置\n4. 在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题[maupassant](https://github.com/tufu9441/maupassant-hexo)为例\n\n主题默认样式如图：\n\n![maupassant](/images/maupassant.jpg)\n\n5. 除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。\n\n例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。\n\n配置:\n\n![hexo1](/images/hexo1.jpg)\n\npost.pug 模板代码:\n\n![hexo2](/images/hexo2.jpg)\n\n实现效果：\n\n![hexo3](/images/hexo3.jpg)\n\n6. 其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见[文档](https://pugjs.org)）\n7. 调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。\n8. 搭建完成后，日常使用只需要将 md 源文件放入 source/\\_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git\n\n```\nhexo generate --deploy\nhexo g -d\n```\n\n9. 一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。**总之 DIY 自由度极高，适合开发者**\n\n## 写在最后\n\n最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。\n","slug":"highly_configurable_low_maintenance_blog_build_guide","published":1,"updated":"2020-04-08T00:43:01.134Z","_id":"ck94a9apj002407s6f4bute32","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要有博客\"><a href=\"#为什么要有博客\" class=\"headerlink\" title=\"为什么要有博客\"></a>为什么要有博客</h2><p>博客之于程序员意义重大，因为，<strong>输出</strong>是一个程序员的基本素养和技能，<strong>开源分享</strong>是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。</p>\n<p>为什么输出分享对程序员来说十分重要，我有以下几点看法。</p>\n<ul>\n<li><p>从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。</p>\n</li>\n<li><p>在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。</p>\n</li>\n</ul>\n<p>如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。</p>\n<ul>\n<li><p>例如 IT 圈出名的<a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰</a>，<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；</p>\n</li>\n<li><p>我也曾不止一次吸取前辈的经验以及建议，前端圈的<a href=\"https://www.zhihu.com/people/xiao-jue-83/activities\" target=\"_blank\" rel=\"noopener\">小爝</a>大佬在知乎的某个<a href=\"https://www.zhihu.com/question/301802742/answer/528508203\" target=\"_blank\" rel=\"noopener\">回答</a>当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；</p>\n</li>\n<li><p>“前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。</p>\n</li>\n</ul>\n<p>还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。</p>\n<p>（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）</p>\n<h2 id=\"如何选择博客\"><a href=\"#如何选择博客\" class=\"headerlink\" title=\"如何选择博客\"></a>如何选择博客</h2><p>现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）</p>\n<p>也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）</p>\n<p>自建博客的选择丰富多彩，选择一个最适合自己的最重要。</p>\n<p>作为一个博客，我最重视的有两个方面：</p>\n<ol>\n<li>可自定义，可个性化。</li>\n</ol>\n<p>因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。</p>\n<ol start=\"2\">\n<li>高效转化。</li>\n</ol>\n<p>我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。</p>\n<p>我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，</p>\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>\n<p>非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>\n<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>\n</blockquote>\n<p>因此今天推荐的博客搭建工具，就是<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>.</p>\n<ul>\n<li>通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）</li>\n<li>搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面</li>\n<li>生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可</li>\n</ul>\n<h2 id=\"Hexo-博客搭建-amp-DIY-amp-使用指南\"><a href=\"#Hexo-博客搭建-amp-DIY-amp-使用指南\" class=\"headerlink\" title=\"Hexo 博客搭建 &amp; DIY &amp; 使用指南\"></a>Hexo 博客搭建 &amp; DIY &amp; 使用指南</h2><blockquote>\n<p>具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程</p>\n</blockquote>\n<ol>\n<li>安装 node 和 git</li>\n<li>npm 安装 hexo 和相关依赖</li>\n<li>根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置</li>\n<li>在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant</a>为例</li>\n</ol>\n<p>主题默认样式如图：</p>\n<p><img src=\"/images/maupassant.jpg\" alt=\"maupassant\"></p>\n<ol start=\"5\">\n<li>除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。</li>\n</ol>\n<p>例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。</p>\n<p>配置:</p>\n<p><img src=\"/images/hexo1.jpg\" alt=\"hexo1\"></p>\n<p>post.pug 模板代码:</p>\n<p><img src=\"/images/hexo2.jpg\" alt=\"hexo2\"></p>\n<p>实现效果：</p>\n<p><img src=\"/images/hexo3.jpg\" alt=\"hexo3\"></p>\n<ol start=\"6\">\n<li>其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见<a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">文档</a>）</li>\n<li>调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。</li>\n<li>搭建完成后，日常使用只需要将 md 源文件放入 source/_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。<strong>总之 DIY 自由度极高，适合开发者</strong></li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要有博客\"><a href=\"#为什么要有博客\" class=\"headerlink\" title=\"为什么要有博客\"></a>为什么要有博客</h2><p>博客之于程序员意义重大，因为，<strong>输出</strong>是一个程序员的基本素养和技能，<strong>开源分享</strong>是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。</p>\n<p>为什么输出分享对程序员来说十分重要，我有以下几点看法。</p>\n<ul>\n<li><p>从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。</p>\n</li>\n<li><p>在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。</p>\n</li>\n</ul>\n<p>如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。</p>\n<ul>\n<li><p>例如 IT 圈出名的<a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰</a>，<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；</p>\n</li>\n<li><p>我也曾不止一次吸取前辈的经验以及建议，前端圈的<a href=\"https://www.zhihu.com/people/xiao-jue-83/activities\" target=\"_blank\" rel=\"noopener\">小爝</a>大佬在知乎的某个<a href=\"https://www.zhihu.com/question/301802742/answer/528508203\" target=\"_blank\" rel=\"noopener\">回答</a>当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；</p>\n</li>\n<li><p>“前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。</p>\n</li>\n</ul>\n<p>还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。</p>\n<p>（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）</p>\n<h2 id=\"如何选择博客\"><a href=\"#如何选择博客\" class=\"headerlink\" title=\"如何选择博客\"></a>如何选择博客</h2><p>现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）</p>\n<p>也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）</p>\n<p>自建博客的选择丰富多彩，选择一个最适合自己的最重要。</p>\n<p>作为一个博客，我最重视的有两个方面：</p>\n<ol>\n<li>可自定义，可个性化。</li>\n</ol>\n<p>因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。</p>\n<ol start=\"2\">\n<li>高效转化。</li>\n</ol>\n<p>我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。</p>\n<p>我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，</p>\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>\n<p>非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>\n<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>\n</blockquote>\n<p>因此今天推荐的博客搭建工具，就是<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>.</p>\n<ul>\n<li>通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）</li>\n<li>搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面</li>\n<li>生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可</li>\n</ul>\n<h2 id=\"Hexo-博客搭建-amp-DIY-amp-使用指南\"><a href=\"#Hexo-博客搭建-amp-DIY-amp-使用指南\" class=\"headerlink\" title=\"Hexo 博客搭建 &amp; DIY &amp; 使用指南\"></a>Hexo 博客搭建 &amp; DIY &amp; 使用指南</h2><blockquote>\n<p>具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程</p>\n</blockquote>\n<ol>\n<li>安装 node 和 git</li>\n<li>npm 安装 hexo 和相关依赖</li>\n<li>根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置</li>\n<li>在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant</a>为例</li>\n</ol>\n<p>主题默认样式如图：</p>\n<p><img src=\"/images/maupassant.jpg\" alt=\"maupassant\"></p>\n<ol start=\"5\">\n<li>除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。</li>\n</ol>\n<p>例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。</p>\n<p>配置:</p>\n<p><img src=\"/images/hexo1.jpg\" alt=\"hexo1\"></p>\n<p>post.pug 模板代码:</p>\n<p><img src=\"/images/hexo2.jpg\" alt=\"hexo2\"></p>\n<p>实现效果：</p>\n<p><img src=\"/images/hexo3.jpg\" alt=\"hexo3\"></p>\n<ol start=\"6\">\n<li>其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见<a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">文档</a>）</li>\n<li>调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。</li>\n<li>搭建完成后，日常使用只需要将 md 源文件放入 source/_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。<strong>总之 DIY 自由度极高，适合开发者</strong></li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。</p>\n"},{"title":"关于字体图标的那些事","date":"2020-02-08T16:00:00.000Z","description":"不要再用图片当icon了拜托~","toc":1,"top":0,"_content":"\n# 矢量图标 & 字体图标\n\n### 前言\n```\n用了iconfont\n\n用mac的UI再也不吐槽你页面的图标放大后有点糊了...\n\nPM再也不会嫌弃你画的页面图片太大，太占load time了...\n\n你也不用因为一个hover状态，就写一段换图片src的逻辑了...\n\n```\n\n### iconfont是什么\n- 矢量图标\n- 矢量图片(UI) -> 转换成字体文件(工具) -> 定义font-face(前端)\n\n### iconfont优点\n- 体积小（用到的图标越多性价比越高）\n- 样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器\n\n### 阿里巴巴iconfont\n- 设计师上传svg矢量图\n\n![设计师上传svg矢量图](http://www.scarsu.com/images/gitbook/web_font03.png)\n\n- 前端下载代码，解压后目录结构：\n![iconfont目录结构](http://www.scarsu.com/images/gitbook/web_font04.png)\n\n### 前端引用iconfont主流方式：\n1. Unicode\n    - 兼容性最好，支持 IE6+，及所有现代浏览器。\n    - 支持按字体的方式去动态调整图标大小，颜色等等。\n    - 但是因为是字体，所以不支持多色。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义使用 iconfont 的样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：挑选相应图标并获取unicode编码，应用于页面*/\n    <span class=\"iconfont\">&#x33;</span>\n    ```\n\n2. font-class（使用最多）\n    - unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的**FontAwesome**即使用该方式\n    - 兼容性良好，支持 IE8+，及所有现代浏览器。\n    - 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。\n    - 本质上还是字体，所以多色图标还是不支持的。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义iconfont样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：定义每个icon unicode 样式类*/\n    .icon-gouwuche:before {\n        content: \"\\e669\";\n    }\n    ```\n    ```html\n    <!-- 第四步：引入1，2步的css -->\n    <link rel=\"stylesheet\" href=\"./iconfont.css\">\n    <!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： -->\n    <span class=\"iconfont icon-xxx\"></span>\n    ```\n\n\n3. Symbol\n    - 本质是svg，支持多色。\n    - 较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。\n    - 通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。\n    - 浏览器渲染 SVG 的性能一般，还不如 png。\n    ```html\n    <!-- 第一步：引入js代码 -->\n    <script src=\"./iconfont.js\"></script>\n    ```\n    ```css\n    /* 第二步：加入通用css样式（引入一次即可） */\n    .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n    }\n    ```\n    ```html\n    <!-- 第三步：挑选相应图标并获取类名，应用于页面： -->\n    <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-xxx\"></use>\n    </svg>\n    ```","source":"_posts/iconfont.md","raw":"---\ntitle: 关于字体图标的那些事\ncategories:\n    - 02 CSS # 一级分类\ntags:\ndate: 2020-02-09\ndescription: 不要再用图片当icon了拜托~\ntoc: 1\ntop: 0\n---\n\n# 矢量图标 & 字体图标\n\n### 前言\n```\n用了iconfont\n\n用mac的UI再也不吐槽你页面的图标放大后有点糊了...\n\nPM再也不会嫌弃你画的页面图片太大，太占load time了...\n\n你也不用因为一个hover状态，就写一段换图片src的逻辑了...\n\n```\n\n### iconfont是什么\n- 矢量图标\n- 矢量图片(UI) -> 转换成字体文件(工具) -> 定义font-face(前端)\n\n### iconfont优点\n- 体积小（用到的图标越多性价比越高）\n- 样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器\n\n### 阿里巴巴iconfont\n- 设计师上传svg矢量图\n\n![设计师上传svg矢量图](http://www.scarsu.com/images/gitbook/web_font03.png)\n\n- 前端下载代码，解压后目录结构：\n![iconfont目录结构](http://www.scarsu.com/images/gitbook/web_font04.png)\n\n### 前端引用iconfont主流方式：\n1. Unicode\n    - 兼容性最好，支持 IE6+，及所有现代浏览器。\n    - 支持按字体的方式去动态调整图标大小，颜色等等。\n    - 但是因为是字体，所以不支持多色。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义使用 iconfont 的样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：挑选相应图标并获取unicode编码，应用于页面*/\n    <span class=\"iconfont\">&#x33;</span>\n    ```\n\n2. font-class（使用最多）\n    - unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的**FontAwesome**即使用该方式\n    - 兼容性良好，支持 IE8+，及所有现代浏览器。\n    - 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。\n    - 本质上还是字体，所以多色图标还是不支持的。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义iconfont样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：定义每个icon unicode 样式类*/\n    .icon-gouwuche:before {\n        content: \"\\e669\";\n    }\n    ```\n    ```html\n    <!-- 第四步：引入1，2步的css -->\n    <link rel=\"stylesheet\" href=\"./iconfont.css\">\n    <!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： -->\n    <span class=\"iconfont icon-xxx\"></span>\n    ```\n\n\n3. Symbol\n    - 本质是svg，支持多色。\n    - 较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。\n    - 通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。\n    - 浏览器渲染 SVG 的性能一般，还不如 png。\n    ```html\n    <!-- 第一步：引入js代码 -->\n    <script src=\"./iconfont.js\"></script>\n    ```\n    ```css\n    /* 第二步：加入通用css样式（引入一次即可） */\n    .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n    }\n    ```\n    ```html\n    <!-- 第三步：挑选相应图标并获取类名，应用于页面： -->\n    <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-xxx\"></use>\n    </svg>\n    ```","slug":"iconfont","published":1,"updated":"2020-04-18T00:49:45.015Z","_id":"ck94a9apk002707s6qyg7wqti","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"矢量图标-amp-字体图标\"><a href=\"#矢量图标-amp-字体图标\" class=\"headerlink\" title=\"矢量图标 &amp; 字体图标\"></a>矢量图标 &amp; 字体图标</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用了iconfont</span><br><span class=\"line\"></span><br><span class=\"line\">用mac的UI再也不吐槽你页面的图标放大后有点糊了...</span><br><span class=\"line\"></span><br><span class=\"line\">PM再也不会嫌弃你画的页面图片太大，太占load time了...</span><br><span class=\"line\"></span><br><span class=\"line\">你也不用因为一个hover状态，就写一段换图片src的逻辑了...</span><br></pre></td></tr></table></figure>\n<h3 id=\"iconfont是什么\"><a href=\"#iconfont是什么\" class=\"headerlink\" title=\"iconfont是什么\"></a>iconfont是什么</h3><ul>\n<li>矢量图标</li>\n<li>矢量图片(UI) -&gt; 转换成字体文件(工具) -&gt; 定义font-face(前端)</li>\n</ul>\n<h3 id=\"iconfont优点\"><a href=\"#iconfont优点\" class=\"headerlink\" title=\"iconfont优点\"></a>iconfont优点</h3><ul>\n<li>体积小（用到的图标越多性价比越高）</li>\n<li>样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器</li>\n</ul>\n<h3 id=\"阿里巴巴iconfont\"><a href=\"#阿里巴巴iconfont\" class=\"headerlink\" title=\"阿里巴巴iconfont\"></a>阿里巴巴iconfont</h3><ul>\n<li>设计师上传svg矢量图</li>\n</ul>\n<p><img src=\"http://www.scarsu.com/images/gitbook/web_font03.png\" alt=\"设计师上传svg矢量图\"></p>\n<ul>\n<li>前端下载代码，解压后目录结构：<br><img src=\"http://www.scarsu.com/images/gitbook/web_font04.png\" alt=\"iconfont目录结构\"></li>\n</ul>\n<h3 id=\"前端引用iconfont主流方式：\"><a href=\"#前端引用iconfont主流方式：\" class=\"headerlink\" title=\"前端引用iconfont主流方式：\"></a>前端引用iconfont主流方式：</h3><ol>\n<li><p>Unicode</p>\n<ul>\n<li>兼容性最好，支持 IE6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义使用 iconfont 的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：挑选相应图标并获取unicode编码，应用于页面*/</span></span><br><span class=\"line\">&lt;span class=\"iconfont\"&gt;&amp;#x33;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>font-class（使用最多）</p>\n<ul>\n<li>unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的<strong>FontAwesome</strong>即使用该方式</li>\n<li>兼容性良好，支持 IE8+，及所有现代浏览器。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。</li>\n<li><p>本质上还是字体，所以多色图标还是不支持的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义iconfont样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：定义每个icon unicode 样式类*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-gouwuche</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e669\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第四步：引入1，2步的css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./iconfont.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Symbol</p>\n<ul>\n<li>本质是svg，支持多色。</li>\n<li>较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。</li>\n<li><p>浏览器渲染 SVG 的性能一般，还不如 png。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一步：引入js代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./iconfont.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 第二步：加入通用css样式（引入一次即可） */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: -<span class=\"number\">0.15em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第三步：挑选相应图标并获取类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"矢量图标-amp-字体图标\"><a href=\"#矢量图标-amp-字体图标\" class=\"headerlink\" title=\"矢量图标 &amp; 字体图标\"></a>矢量图标 &amp; 字体图标</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用了iconfont</span><br><span class=\"line\"></span><br><span class=\"line\">用mac的UI再也不吐槽你页面的图标放大后有点糊了...</span><br><span class=\"line\"></span><br><span class=\"line\">PM再也不会嫌弃你画的页面图片太大，太占load time了...</span><br><span class=\"line\"></span><br><span class=\"line\">你也不用因为一个hover状态，就写一段换图片src的逻辑了...</span><br></pre></td></tr></table></figure>\n<h3 id=\"iconfont是什么\"><a href=\"#iconfont是什么\" class=\"headerlink\" title=\"iconfont是什么\"></a>iconfont是什么</h3><ul>\n<li>矢量图标</li>\n<li>矢量图片(UI) -&gt; 转换成字体文件(工具) -&gt; 定义font-face(前端)</li>\n</ul>\n<h3 id=\"iconfont优点\"><a href=\"#iconfont优点\" class=\"headerlink\" title=\"iconfont优点\"></a>iconfont优点</h3><ul>\n<li>体积小（用到的图标越多性价比越高）</li>\n<li>样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器</li>\n</ul>\n<h3 id=\"阿里巴巴iconfont\"><a href=\"#阿里巴巴iconfont\" class=\"headerlink\" title=\"阿里巴巴iconfont\"></a>阿里巴巴iconfont</h3><ul>\n<li>设计师上传svg矢量图</li>\n</ul>\n<p><img src=\"http://www.scarsu.com/images/gitbook/web_font03.png\" alt=\"设计师上传svg矢量图\"></p>\n<ul>\n<li>前端下载代码，解压后目录结构：<br><img src=\"http://www.scarsu.com/images/gitbook/web_font04.png\" alt=\"iconfont目录结构\"></li>\n</ul>\n<h3 id=\"前端引用iconfont主流方式：\"><a href=\"#前端引用iconfont主流方式：\" class=\"headerlink\" title=\"前端引用iconfont主流方式：\"></a>前端引用iconfont主流方式：</h3><ol>\n<li><p>Unicode</p>\n<ul>\n<li>兼容性最好，支持 IE6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义使用 iconfont 的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：挑选相应图标并获取unicode编码，应用于页面*/</span></span><br><span class=\"line\">&lt;span class=\"iconfont\"&gt;&amp;#x33;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>font-class（使用最多）</p>\n<ul>\n<li>unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的<strong>FontAwesome</strong>即使用该方式</li>\n<li>兼容性良好，支持 IE8+，及所有现代浏览器。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。</li>\n<li><p>本质上还是字体，所以多色图标还是不支持的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义iconfont样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：定义每个icon unicode 样式类*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-gouwuche</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e669\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第四步：引入1，2步的css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./iconfont.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Symbol</p>\n<ul>\n<li>本质是svg，支持多色。</li>\n<li>较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。</li>\n<li><p>浏览器渲染 SVG 的性能一般，还不如 png。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一步：引入js代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./iconfont.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 第二步：加入通用css样式（引入一次即可） */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: -<span class=\"number\">0.15em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第三步：挑选相应图标并获取类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"title":"《被讨厌的勇气》读书笔记","date":"2019-11-08T16:00:00.000Z","description":"“自由就是被人讨厌”、“一切烦恼皆来自于人际关系”","toc":1,"top":0,"_content":"\n## 简介\n## 我们的不幸是谁的错？\n## 一切烦恼都来自于人际关系\n## 让干涉你的人见鬼去\n## 要有被讨厌的勇气\n## 认真的人生活在“当下”\n\n---\n有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。","source":"_posts/life_courage.md","raw":"---\ntitle: 《被讨厌的勇气》读书笔记\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\n    - 阿德勒心理学\ndate: 2019-11-09\ndescription: “自由就是被人讨厌”、“一切烦恼皆来自于人际关系”\ntoc: 1\ntop: 0\n---\n\n## 简介\n## 我们的不幸是谁的错？\n## 一切烦恼都来自于人际关系\n## 让干涉你的人见鬼去\n## 要有被讨厌的勇气\n## 认真的人生活在“当下”\n\n---\n有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。","slug":"life_courage","published":1,"updated":"2020-04-11T03:10:49.866Z","_id":"ck94a9apl002907s6tsvah0ld","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"我们的不幸是谁的错？\"><a href=\"#我们的不幸是谁的错？\" class=\"headerlink\" title=\"我们的不幸是谁的错？\"></a>我们的不幸是谁的错？</h2><h2 id=\"一切烦恼都来自于人际关系\"><a href=\"#一切烦恼都来自于人际关系\" class=\"headerlink\" title=\"一切烦恼都来自于人际关系\"></a>一切烦恼都来自于人际关系</h2><h2 id=\"让干涉你的人见鬼去\"><a href=\"#让干涉你的人见鬼去\" class=\"headerlink\" title=\"让干涉你的人见鬼去\"></a>让干涉你的人见鬼去</h2><h2 id=\"要有被讨厌的勇气\"><a href=\"#要有被讨厌的勇气\" class=\"headerlink\" title=\"要有被讨厌的勇气\"></a>要有被讨厌的勇气</h2><h2 id=\"认真的人生活在“当下”\"><a href=\"#认真的人生活在“当下”\" class=\"headerlink\" title=\"认真的人生活在“当下”\"></a>认真的人生活在“当下”</h2><hr>\n<p>有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"我们的不幸是谁的错？\"><a href=\"#我们的不幸是谁的错？\" class=\"headerlink\" title=\"我们的不幸是谁的错？\"></a>我们的不幸是谁的错？</h2><h2 id=\"一切烦恼都来自于人际关系\"><a href=\"#一切烦恼都来自于人际关系\" class=\"headerlink\" title=\"一切烦恼都来自于人际关系\"></a>一切烦恼都来自于人际关系</h2><h2 id=\"让干涉你的人见鬼去\"><a href=\"#让干涉你的人见鬼去\" class=\"headerlink\" title=\"让干涉你的人见鬼去\"></a>让干涉你的人见鬼去</h2><h2 id=\"要有被讨厌的勇气\"><a href=\"#要有被讨厌的勇气\" class=\"headerlink\" title=\"要有被讨厌的勇气\"></a>要有被讨厌的勇气</h2><h2 id=\"认真的人生活在“当下”\"><a href=\"#认真的人生活在“当下”\" class=\"headerlink\" title=\"认真的人生活在“当下”\"></a>认真的人生活在“当下”</h2><hr>\n<p>有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。</p>\n"},{"title":"MongoDB配置","date":"2018-03-05T16:00:00.000Z","description":"MongoDB被我选来做毕设的数据库，在此记录配置过程。","toc":1,"top":0,"_content":"\n## 官网下载安装\n\n    （我版本3.0.15\n    [官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n\n## 安装路径\n\n    将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n    即可在任何位置使用\n    mongo   使用数据库\n    mongod  开机\n    mongoimport  导入数据\n\n## 新建\n\n    C:\\data\\db路径作为数据库\n\n## 开机 cmd 命令：\n\n    mongod --dbpath c:\\data\\db\n    （保持该cmd窗口才能正常运行mongodb）\n    （其他数据操作另外开cmd）\n    --dbpath是选择数据库文档所在文件夹\n    即，mongodb中数据库有物理文件\n\n## use\n\n    use 数据库名字\n    使用一个数据库\n    如果想新建数据库，也是use。use一个不存在的，就是新建。\n\n## 查看当前所在数据库\n\n    db\n\n## 插入数据\n\n    数据库中不能直接插入数据，\n    只能往集合(collections)中插入数据\n    db.userid.insert({\"id\":\"zengsuyu\",\"password\":\"123456789\"});\n    此处的userid就是集合\n\n## 删除当前所在的数据库\n\n    db.dropDatabase();\n\n## 导入外部 json 数据\n\n    用sublime在外部写好json数据库的形式，然后导入数据库：\n    -db 数据库名（选择数据库\n    --collection 集合名（ 选择集合\n    --drop （把集合清空\n    --file json文件名（选择要导入的json文件\n\n## 查找数据:\n\n    db.集合名.find() （列出所有数据\n    db.集合名.find({\"key\":\"value\"})  (精确匹配key为value值的数据\n    db.集合名.find().sort(\"\")  （升降排序\n\n## mongoose\n\n    不用直接操作数据库，操作对象，对象自动持久\n\n-   连接 Mongo 数据库\n\n```\nvar mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/geekChat');//；连接数据库\n```\n\n-   监听 open 事件\n\n```\ndb.once('open', function (callback) {\n    console.log(\"数据库成功连接\");\n});\n```\n\n-   创建类\n\n```\n//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。\nvar Cat = mongoose.model('Cat', { name: String });\n//实例化一只猫\nvar kitty = new Cat({ name: 'Zildjian' });\n//调用这只猫的save方法，保存这只猫\nkitty.save(function (err) {\n  console.log('喵喵喵');\n});\n```\n\n-   创建模型\n\n```\nvar Schema = mongoose.Schema;\nvar userScheMa = new Schema({\n    name: String,\n    password: String\n}); //  定义了一个新的模型，但是此模式还未和users集合有关联\nexports.user = db.model('user', userScheMa); //  与users集合关联\n\nref 数据表关联\n```\n\n---\n\n    这次不皮了\n","source":"_posts/mongoDB_configuration.md","raw":"---\ntitle: MongoDB配置\ncategories:\n    - 10 DataBase\ntags:\ndate: 2018-03-06\ndescription: MongoDB被我选来做毕设的数据库，在此记录配置过程。\ntoc: 1\ntop: 0\n---\n\n## 官网下载安装\n\n    （我版本3.0.15\n    [官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n\n## 安装路径\n\n    将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n    即可在任何位置使用\n    mongo   使用数据库\n    mongod  开机\n    mongoimport  导入数据\n\n## 新建\n\n    C:\\data\\db路径作为数据库\n\n## 开机 cmd 命令：\n\n    mongod --dbpath c:\\data\\db\n    （保持该cmd窗口才能正常运行mongodb）\n    （其他数据操作另外开cmd）\n    --dbpath是选择数据库文档所在文件夹\n    即，mongodb中数据库有物理文件\n\n## use\n\n    use 数据库名字\n    使用一个数据库\n    如果想新建数据库，也是use。use一个不存在的，就是新建。\n\n## 查看当前所在数据库\n\n    db\n\n## 插入数据\n\n    数据库中不能直接插入数据，\n    只能往集合(collections)中插入数据\n    db.userid.insert({\"id\":\"zengsuyu\",\"password\":\"123456789\"});\n    此处的userid就是集合\n\n## 删除当前所在的数据库\n\n    db.dropDatabase();\n\n## 导入外部 json 数据\n\n    用sublime在外部写好json数据库的形式，然后导入数据库：\n    -db 数据库名（选择数据库\n    --collection 集合名（ 选择集合\n    --drop （把集合清空\n    --file json文件名（选择要导入的json文件\n\n## 查找数据:\n\n    db.集合名.find() （列出所有数据\n    db.集合名.find({\"key\":\"value\"})  (精确匹配key为value值的数据\n    db.集合名.find().sort(\"\")  （升降排序\n\n## mongoose\n\n    不用直接操作数据库，操作对象，对象自动持久\n\n-   连接 Mongo 数据库\n\n```\nvar mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/geekChat');//；连接数据库\n```\n\n-   监听 open 事件\n\n```\ndb.once('open', function (callback) {\n    console.log(\"数据库成功连接\");\n});\n```\n\n-   创建类\n\n```\n//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。\nvar Cat = mongoose.model('Cat', { name: String });\n//实例化一只猫\nvar kitty = new Cat({ name: 'Zildjian' });\n//调用这只猫的save方法，保存这只猫\nkitty.save(function (err) {\n  console.log('喵喵喵');\n});\n```\n\n-   创建模型\n\n```\nvar Schema = mongoose.Schema;\nvar userScheMa = new Schema({\n    name: String,\n    password: String\n}); //  定义了一个新的模型，但是此模式还未和users集合有关联\nexports.user = db.model('user', userScheMa); //  与users集合关联\n\nref 数据表关联\n```\n\n---\n\n    这次不皮了\n","slug":"mongoDB_configuration","published":1,"updated":"2020-04-08T00:43:01.136Z","_id":"ck94a9apl002c07s6b3jocl6i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"官网下载安装\"><a href=\"#官网下载安装\" class=\"headerlink\" title=\"官网下载安装\"></a>官网下载安装</h2><pre><code>（我版本3.0.15\n[官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n</code></pre><h2 id=\"安装路径\"><a href=\"#安装路径\" class=\"headerlink\" title=\"安装路径\"></a>安装路径</h2><pre><code>将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n即可在任何位置使用\nmongo   使用数据库\nmongod  开机\nmongoimport  导入数据\n</code></pre><h2 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h2><pre><code>C:\\data\\db路径作为数据库\n</code></pre><h2 id=\"开机-cmd-命令：\"><a href=\"#开机-cmd-命令：\" class=\"headerlink\" title=\"开机 cmd 命令：\"></a>开机 cmd 命令：</h2><pre><code>mongod --dbpath c:\\data\\db\n（保持该cmd窗口才能正常运行mongodb）\n（其他数据操作另外开cmd）\n--dbpath是选择数据库文档所在文件夹\n即，mongodb中数据库有物理文件\n</code></pre><h2 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h2><pre><code>use 数据库名字\n使用一个数据库\n如果想新建数据库，也是use。use一个不存在的，就是新建。\n</code></pre><h2 id=\"查看当前所在数据库\"><a href=\"#查看当前所在数据库\" class=\"headerlink\" title=\"查看当前所在数据库\"></a>查看当前所在数据库</h2><pre><code>db\n</code></pre><h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><pre><code>数据库中不能直接插入数据，\n只能往集合(collections)中插入数据\ndb.userid.insert({&quot;id&quot;:&quot;zengsuyu&quot;,&quot;password&quot;:&quot;123456789&quot;});\n此处的userid就是集合\n</code></pre><h2 id=\"删除当前所在的数据库\"><a href=\"#删除当前所在的数据库\" class=\"headerlink\" title=\"删除当前所在的数据库\"></a>删除当前所在的数据库</h2><pre><code>db.dropDatabase();\n</code></pre><h2 id=\"导入外部-json-数据\"><a href=\"#导入外部-json-数据\" class=\"headerlink\" title=\"导入外部 json 数据\"></a>导入外部 json 数据</h2><pre><code>用sublime在外部写好json数据库的形式，然后导入数据库：\n-db 数据库名（选择数据库\n--collection 集合名（ 选择集合\n--drop （把集合清空\n--file json文件名（选择要导入的json文件\n</code></pre><h2 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据:\"></a>查找数据:</h2><pre><code>db.集合名.find() （列出所有数据\ndb.集合名.find({&quot;key&quot;:&quot;value&quot;})  (精确匹配key为value值的数据\ndb.集合名.find().sort(&quot;&quot;)  （升降排序\n</code></pre><h2 id=\"mongoose\"><a href=\"#mongoose\" class=\"headerlink\" title=\"mongoose\"></a>mongoose</h2><pre><code>不用直接操作数据库，操作对象，对象自动持久\n</code></pre><ul>\n<li>连接 Mongo 数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var db = mongoose.connect(&apos;mongodb://localhost/geekChat&apos;);//；连接数据库</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 open 事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&quot;数据库成功连接&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。</span><br><span class=\"line\">var Cat = mongoose.model(&apos;Cat&apos;, &#123; name: String &#125;);</span><br><span class=\"line\">//实例化一只猫</span><br><span class=\"line\">var kitty = new Cat(&#123; name: &apos;Zildjian&apos; &#125;);</span><br><span class=\"line\">//调用这只猫的save方法，保存这只猫</span><br><span class=\"line\">kitty.save(function (err) &#123;</span><br><span class=\"line\">  console.log(&apos;喵喵喵&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var userScheMa = new Schema(&#123;</span><br><span class=\"line\">    name: String,</span><br><span class=\"line\">    password: String</span><br><span class=\"line\">&#125;); //  定义了一个新的模型，但是此模式还未和users集合有关联</span><br><span class=\"line\">exports.user = db.model(&apos;user&apos;, userScheMa); //  与users集合关联</span><br><span class=\"line\"></span><br><span class=\"line\">ref 数据表关联</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>这次不皮了\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"官网下载安装\"><a href=\"#官网下载安装\" class=\"headerlink\" title=\"官网下载安装\"></a>官网下载安装</h2><pre><code>（我版本3.0.15\n[官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n</code></pre><h2 id=\"安装路径\"><a href=\"#安装路径\" class=\"headerlink\" title=\"安装路径\"></a>安装路径</h2><pre><code>将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n即可在任何位置使用\nmongo   使用数据库\nmongod  开机\nmongoimport  导入数据\n</code></pre><h2 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h2><pre><code>C:\\data\\db路径作为数据库\n</code></pre><h2 id=\"开机-cmd-命令：\"><a href=\"#开机-cmd-命令：\" class=\"headerlink\" title=\"开机 cmd 命令：\"></a>开机 cmd 命令：</h2><pre><code>mongod --dbpath c:\\data\\db\n（保持该cmd窗口才能正常运行mongodb）\n（其他数据操作另外开cmd）\n--dbpath是选择数据库文档所在文件夹\n即，mongodb中数据库有物理文件\n</code></pre><h2 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h2><pre><code>use 数据库名字\n使用一个数据库\n如果想新建数据库，也是use。use一个不存在的，就是新建。\n</code></pre><h2 id=\"查看当前所在数据库\"><a href=\"#查看当前所在数据库\" class=\"headerlink\" title=\"查看当前所在数据库\"></a>查看当前所在数据库</h2><pre><code>db\n</code></pre><h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><pre><code>数据库中不能直接插入数据，\n只能往集合(collections)中插入数据\ndb.userid.insert({&quot;id&quot;:&quot;zengsuyu&quot;,&quot;password&quot;:&quot;123456789&quot;});\n此处的userid就是集合\n</code></pre><h2 id=\"删除当前所在的数据库\"><a href=\"#删除当前所在的数据库\" class=\"headerlink\" title=\"删除当前所在的数据库\"></a>删除当前所在的数据库</h2><pre><code>db.dropDatabase();\n</code></pre><h2 id=\"导入外部-json-数据\"><a href=\"#导入外部-json-数据\" class=\"headerlink\" title=\"导入外部 json 数据\"></a>导入外部 json 数据</h2><pre><code>用sublime在外部写好json数据库的形式，然后导入数据库：\n-db 数据库名（选择数据库\n--collection 集合名（ 选择集合\n--drop （把集合清空\n--file json文件名（选择要导入的json文件\n</code></pre><h2 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据:\"></a>查找数据:</h2><pre><code>db.集合名.find() （列出所有数据\ndb.集合名.find({&quot;key&quot;:&quot;value&quot;})  (精确匹配key为value值的数据\ndb.集合名.find().sort(&quot;&quot;)  （升降排序\n</code></pre><h2 id=\"mongoose\"><a href=\"#mongoose\" class=\"headerlink\" title=\"mongoose\"></a>mongoose</h2><pre><code>不用直接操作数据库，操作对象，对象自动持久\n</code></pre><ul>\n<li>连接 Mongo 数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var db = mongoose.connect(&apos;mongodb://localhost/geekChat&apos;);//；连接数据库</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 open 事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&quot;数据库成功连接&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。</span><br><span class=\"line\">var Cat = mongoose.model(&apos;Cat&apos;, &#123; name: String &#125;);</span><br><span class=\"line\">//实例化一只猫</span><br><span class=\"line\">var kitty = new Cat(&#123; name: &apos;Zildjian&apos; &#125;);</span><br><span class=\"line\">//调用这只猫的save方法，保存这只猫</span><br><span class=\"line\">kitty.save(function (err) &#123;</span><br><span class=\"line\">  console.log(&apos;喵喵喵&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var userScheMa = new Schema(&#123;</span><br><span class=\"line\">    name: String,</span><br><span class=\"line\">    password: String</span><br><span class=\"line\">&#125;); //  定义了一个新的模型，但是此模式还未和users集合有关联</span><br><span class=\"line\">exports.user = db.model(&apos;user&apos;, userScheMa); //  与users集合关联</span><br><span class=\"line\"></span><br><span class=\"line\">ref 数据表关联</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>这次不皮了\n</code></pre>"},{"title":"Node版本管理工具 nvm for windows","date":"2018-09-28T16:00:00.000Z","description":"node版本更新那么快，怎么才能在机子上多装几版node？还能一句命令切换？","toc":1,"top":0,"_content":"\n# nvm\n\n只支持 linux 和 cent os\n\n# nvm for windows\n\n[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)\n\n# 安装\n\n    0. 安装前卸载干净已经有的node\n    1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n    2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n\n# 常用命令\n\n```\nnvm list -当前安装的node版本\nnvm list available -可获取的版本\nnvm install xx.xx.xx -安装某版本node\nnvm use xx.xx.xx -使用某版本node\nnvm uninstall xx.xx.xx -卸载某版本node\n```\n\n# 其他命令\n\n```\nnvm arch -查看当前系统位数\nnvm on/off -打开/关闭nvm（好像并没有什么区别\nnvm proxy [url] -设置代理下载地址\nnvm root [path] -nvm安装路径\nnvm node_mirror [url] -node下载库路径\nnvm npm_mirror [url] -npm下载库路径\n```\n\n---\n\n    “重点是node为什么更新那么快？”\n","source":"_posts/nvm_for_windows.md","raw":"---\ntitle: Node版本管理工具 nvm for windows\ncategories:\n    - 11 Tools # 一级分类\ntags:\ndate: 2018-09-29\ndescription: node版本更新那么快，怎么才能在机子上多装几版node？还能一句命令切换？\ntoc: 1\ntop: 0\n---\n\n# nvm\n\n只支持 linux 和 cent os\n\n# nvm for windows\n\n[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)\n\n# 安装\n\n    0. 安装前卸载干净已经有的node\n    1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n    2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n\n# 常用命令\n\n```\nnvm list -当前安装的node版本\nnvm list available -可获取的版本\nnvm install xx.xx.xx -安装某版本node\nnvm use xx.xx.xx -使用某版本node\nnvm uninstall xx.xx.xx -卸载某版本node\n```\n\n# 其他命令\n\n```\nnvm arch -查看当前系统位数\nnvm on/off -打开/关闭nvm（好像并没有什么区别\nnvm proxy [url] -设置代理下载地址\nnvm root [path] -nvm安装路径\nnvm node_mirror [url] -node下载库路径\nnvm npm_mirror [url] -npm下载库路径\n```\n\n---\n\n    “重点是node为什么更新那么快？”\n","slug":"nvm_for_windows","published":1,"updated":"2020-04-08T00:43:01.137Z","_id":"ck94a9apm002f07s6jcean3x1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h1><p>只支持 linux 和 cent os</p>\n<h1 id=\"nvm-for-windows\"><a href=\"#nvm-for-windows\" class=\"headerlink\" title=\"nvm for windows\"></a>nvm for windows</h1><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>0. 安装前卸载干净已经有的node\n1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n</code></pre><h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list -当前安装的node版本</span><br><span class=\"line\">nvm list available -可获取的版本</span><br><span class=\"line\">nvm install xx.xx.xx -安装某版本node</span><br><span class=\"line\">nvm use xx.xx.xx -使用某版本node</span><br><span class=\"line\">nvm uninstall xx.xx.xx -卸载某版本node</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm arch -查看当前系统位数</span><br><span class=\"line\">nvm on/off -打开/关闭nvm（好像并没有什么区别</span><br><span class=\"line\">nvm proxy [url] -设置代理下载地址</span><br><span class=\"line\">nvm root [path] -nvm安装路径</span><br><span class=\"line\">nvm node_mirror [url] -node下载库路径</span><br><span class=\"line\">nvm npm_mirror [url] -npm下载库路径</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>“重点是node为什么更新那么快？”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h1><p>只支持 linux 和 cent os</p>\n<h1 id=\"nvm-for-windows\"><a href=\"#nvm-for-windows\" class=\"headerlink\" title=\"nvm for windows\"></a>nvm for windows</h1><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>0. 安装前卸载干净已经有的node\n1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n</code></pre><h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list -当前安装的node版本</span><br><span class=\"line\">nvm list available -可获取的版本</span><br><span class=\"line\">nvm install xx.xx.xx -安装某版本node</span><br><span class=\"line\">nvm use xx.xx.xx -使用某版本node</span><br><span class=\"line\">nvm uninstall xx.xx.xx -卸载某版本node</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm arch -查看当前系统位数</span><br><span class=\"line\">nvm on/off -打开/关闭nvm（好像并没有什么区别</span><br><span class=\"line\">nvm proxy [url] -设置代理下载地址</span><br><span class=\"line\">nvm root [path] -nvm安装路径</span><br><span class=\"line\">nvm node_mirror [url] -node下载库路径</span><br><span class=\"line\">nvm npm_mirror [url] -npm下载库路径</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>“重点是node为什么更新那么快？”\n</code></pre>"},{"title":"《贫穷的本质：我们为什么摆脱不了贫穷》读书输出","date":"2020-01-01T16:00:00.000Z","description":"2019诺贝尔经济学家获奖作品、贫穷的本质&如何逃离贫穷陷阱","toc":1,"top":0,"_content":"\n## 简介\n- 作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）\n- 两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源\n- 该书用九章大篇幅，从**营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与**等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。\n\n- 为什么穷人吃不饱饭还要买电视？\n- 为什么他们的孩子即使上了学也不爱学习？\n- 为什么他们放着免费的健康生活不去享受，却要自己花钱买药？\n- 为什么他们能创业却难以守业？\n- 为什么大多数人认为小额信贷、穷人银行没什么效用？\n\n\n\n\n---\n这本书太难啃了，未完待续","source":"_posts/poor_economics.md","raw":"---\ntitle: 《贫穷的本质：我们为什么摆脱不了贫穷》读书输出\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\ndate: 2020-01-02\ndescription: 2019诺贝尔经济学家获奖作品、贫穷的本质&如何逃离贫穷陷阱\ntoc: 1\ntop: 0\n---\n\n## 简介\n- 作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）\n- 两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源\n- 该书用九章大篇幅，从**营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与**等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。\n\n- 为什么穷人吃不饱饭还要买电视？\n- 为什么他们的孩子即使上了学也不爱学习？\n- 为什么他们放着免费的健康生活不去享受，却要自己花钱买药？\n- 为什么他们能创业却难以守业？\n- 为什么大多数人认为小额信贷、穷人银行没什么效用？\n\n\n\n\n---\n这本书太难啃了，未完待续","slug":"poor_economics","published":1,"updated":"2020-04-08T00:43:01.138Z","_id":"ck94a9apn002i07s652yvib4d","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）</li>\n<li>两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源</li>\n<li><p>该书用九章大篇幅，从<strong>营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与</strong>等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。</p>\n</li>\n<li><p>为什么穷人吃不饱饭还要买电视？</p>\n</li>\n<li>为什么他们的孩子即使上了学也不爱学习？</li>\n<li>为什么他们放着免费的健康生活不去享受，却要自己花钱买药？</li>\n<li>为什么他们能创业却难以守业？</li>\n<li>为什么大多数人认为小额信贷、穷人银行没什么效用？</li>\n</ul>\n<hr>\n<p>这本书太难啃了，未完待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）</li>\n<li>两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源</li>\n<li><p>该书用九章大篇幅，从<strong>营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与</strong>等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。</p>\n</li>\n<li><p>为什么穷人吃不饱饭还要买电视？</p>\n</li>\n<li>为什么他们的孩子即使上了学也不爱学习？</li>\n<li>为什么他们放着免费的健康生活不去享受，却要自己花钱买药？</li>\n<li>为什么他们能创业却难以守业？</li>\n<li>为什么大多数人认为小额信贷、穷人银行没什么效用？</li>\n</ul>\n<hr>\n<p>这本书太难啃了，未完待续</p>\n"},{"title":"《自控力》读书输出","date":"2019-09-18T16:00:00.000Z","description":"了解意志力/欲望的生理心理精神学原理，从而更好的掌控自己","toc":1,"top":0,"_content":"\n## 《自控力》介绍\n- “斯坦福大学广受欢迎的心理学课程”\n- 总结 意志力/欲望的现象\n- 分析 意志力/欲望的 生理 心理 精神学原理\n- 找出 提升自控力/控制欲望 的对策\n\n#### 思维导图\n![《自控力思维导图》](/images/self_control.png)\n\n## 意志力的本质\n1. `我要`的力量：行动\n2. `我不要`的力量：抵制\n3. `我想要`的力量：目标\n\n\n## 意志力的生理特征\n- 意志力像`肌肉`一样有限制。\n- 意志力被消耗，会导致失控。\n- 意志力从早到晚，逐渐减弱——把需要意志力的事情放在`早上`（意志力最强的时候）做。\n- 饥饿/疲惫/紧张会影响意志力。\n- 意志力可以训练：在一些小事上持续自控会提升整体的意志力\n\n## 增强意志力的生理方法\n- `运动`：坚持运动，能提升意志力\n- `睡眠`：睡眠是对能量的恢复，早上的意志力最强\n- `放松`：压力会消耗意志力\n- `呼吸等待`：做失控决定前深呼吸，告诉自己等待几分钟再去做\n- `训练`：通过持续性的小事自控来训练意志力\n- `动力`：找出“我想要”的动力，让它环绕在你的生活的角角落落\n\n\n## 引起“失控”的几种心理\n- `自我感觉良好`会让自己更易纵容。\n- `把进步当作放纵的接口`：前进一小步，后退两大步\n- `透支成就感`：向未来赊账\n\n\n## 多巴胺 & 欲望vs幸福\n\n#### 多巴胺：让人产生欲望，而不是快乐\n- 人脑的多巴胺系统，与快感中心不是同一个部分。\n- 多巴胺系统刺激人原始动力系统的一部分。\n- 使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。\n- 过量的多巴胺：上瘾\n\n#### 欲望 != 幸福\n- 没有欲望不幸福，欲望过多使人失控。\n- 好欲望-》产生动力-》促进意志力\n- 坏欲望-》屈服于诱惑-》失控\n- 所以要合理利用欲望，分清“欲望”和“幸福”\n\n#### 多巴胺系统的特点\n- 对新鲜事物/未知奖励敏感\n- 对多样性敏感\n\n#### 多巴胺对策\n- “多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。\n- “鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。\n\n\n## 压力带来的“失控负循环”\n\n![压力带来的“失控负循环”](/images/stress_circle.png)\n\n\n#### 打破循环的方法\n- 及时止损，不要破罐子破摔\n- “自我谅解”，而不是加深自责加深压力促进循环\n- “行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”\n- 用有效的方式解压↓\n\n#### 有效的解压方式\n- 运动\n- 培养爱好\n- 社交\n- 音乐\n- 阅读\n- 牢牢记住以上方式解压后愉悦的心情\n\n\n## 现代 vs 未来\n\n#### `即时反馈`&`延迟折扣`\n- `多巴胺系统`使人乐于追求即时反馈\n- 眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力\n- 延迟折扣：需要等待时间越久的奖励，诱惑力越低\n\n#### 抵制即时反馈\n- 拉开与诱惑的距离：时间 & 空间\n- “10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低\n- 放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方\n\n#### 缩小“现在的自己” 与“未来的自己”的差距\n- 不要高看未来的自己\n- 不要一切都拖到未来去做\n\n\n## 意志力会传染\n- 人生来就具有社会性：不可能脱离社会生存，要与他人产生联系\n#### `社会认同感`\n- “自豪”，“惭愧”等社会性情绪，会促进人的自控\n- 让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控\n\n#### `镜像神经元`的行为：\n- 无意识的模仿他人\n- 情绪传染\n- 自控力传染\n\n#### 对策\n- 增强免疫力\n- 坚定自我\n- 远离不自控人群\n\n## 讽刺性反弹\n#### “我不要”的神经学原理\n1. 大脑的“操作系统”：消耗能力去自控（耗能高）\n2. 大脑的“监控系统”：充满了“不要xxx”的警告\n（自动机制，耗能很低）\n- 当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控\n\n#### 讽刺性反弹的结果\n- “我不要”的力量，有时候会产生相反的效果\n- 通过“抑制想法”来抵抗诱惑，可能会适得其反\n- 越压抑人的本能，越容易适得其反\n\n#### 对策\n- 了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的\n- 放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错\n- `直面自身的欲望，但不去行动`：对内接受自我，对外控制行为\n- 把“我不要”转为“我想要”效果更好。\n\n\n<small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small>","source":"_posts/self_control.md","raw":"---\ntitle: 《自控力》读书输出\ncategories:\n    - 05 课外输入 # 一级分类\ntags:\ndate: 2019-09-19\ndescription: 了解意志力/欲望的生理心理精神学原理，从而更好的掌控自己\ntoc: 1\ntop: 0\n---\n\n## 《自控力》介绍\n- “斯坦福大学广受欢迎的心理学课程”\n- 总结 意志力/欲望的现象\n- 分析 意志力/欲望的 生理 心理 精神学原理\n- 找出 提升自控力/控制欲望 的对策\n\n#### 思维导图\n![《自控力思维导图》](/images/self_control.png)\n\n## 意志力的本质\n1. `我要`的力量：行动\n2. `我不要`的力量：抵制\n3. `我想要`的力量：目标\n\n\n## 意志力的生理特征\n- 意志力像`肌肉`一样有限制。\n- 意志力被消耗，会导致失控。\n- 意志力从早到晚，逐渐减弱——把需要意志力的事情放在`早上`（意志力最强的时候）做。\n- 饥饿/疲惫/紧张会影响意志力。\n- 意志力可以训练：在一些小事上持续自控会提升整体的意志力\n\n## 增强意志力的生理方法\n- `运动`：坚持运动，能提升意志力\n- `睡眠`：睡眠是对能量的恢复，早上的意志力最强\n- `放松`：压力会消耗意志力\n- `呼吸等待`：做失控决定前深呼吸，告诉自己等待几分钟再去做\n- `训练`：通过持续性的小事自控来训练意志力\n- `动力`：找出“我想要”的动力，让它环绕在你的生活的角角落落\n\n\n## 引起“失控”的几种心理\n- `自我感觉良好`会让自己更易纵容。\n- `把进步当作放纵的接口`：前进一小步，后退两大步\n- `透支成就感`：向未来赊账\n\n\n## 多巴胺 & 欲望vs幸福\n\n#### 多巴胺：让人产生欲望，而不是快乐\n- 人脑的多巴胺系统，与快感中心不是同一个部分。\n- 多巴胺系统刺激人原始动力系统的一部分。\n- 使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。\n- 过量的多巴胺：上瘾\n\n#### 欲望 != 幸福\n- 没有欲望不幸福，欲望过多使人失控。\n- 好欲望-》产生动力-》促进意志力\n- 坏欲望-》屈服于诱惑-》失控\n- 所以要合理利用欲望，分清“欲望”和“幸福”\n\n#### 多巴胺系统的特点\n- 对新鲜事物/未知奖励敏感\n- 对多样性敏感\n\n#### 多巴胺对策\n- “多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。\n- “鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。\n\n\n## 压力带来的“失控负循环”\n\n![压力带来的“失控负循环”](/images/stress_circle.png)\n\n\n#### 打破循环的方法\n- 及时止损，不要破罐子破摔\n- “自我谅解”，而不是加深自责加深压力促进循环\n- “行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”\n- 用有效的方式解压↓\n\n#### 有效的解压方式\n- 运动\n- 培养爱好\n- 社交\n- 音乐\n- 阅读\n- 牢牢记住以上方式解压后愉悦的心情\n\n\n## 现代 vs 未来\n\n#### `即时反馈`&`延迟折扣`\n- `多巴胺系统`使人乐于追求即时反馈\n- 眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力\n- 延迟折扣：需要等待时间越久的奖励，诱惑力越低\n\n#### 抵制即时反馈\n- 拉开与诱惑的距离：时间 & 空间\n- “10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低\n- 放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方\n\n#### 缩小“现在的自己” 与“未来的自己”的差距\n- 不要高看未来的自己\n- 不要一切都拖到未来去做\n\n\n## 意志力会传染\n- 人生来就具有社会性：不可能脱离社会生存，要与他人产生联系\n#### `社会认同感`\n- “自豪”，“惭愧”等社会性情绪，会促进人的自控\n- 让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控\n\n#### `镜像神经元`的行为：\n- 无意识的模仿他人\n- 情绪传染\n- 自控力传染\n\n#### 对策\n- 增强免疫力\n- 坚定自我\n- 远离不自控人群\n\n## 讽刺性反弹\n#### “我不要”的神经学原理\n1. 大脑的“操作系统”：消耗能力去自控（耗能高）\n2. 大脑的“监控系统”：充满了“不要xxx”的警告\n（自动机制，耗能很低）\n- 当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控\n\n#### 讽刺性反弹的结果\n- “我不要”的力量，有时候会产生相反的效果\n- 通过“抑制想法”来抵抗诱惑，可能会适得其反\n- 越压抑人的本能，越容易适得其反\n\n#### 对策\n- 了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的\n- 放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错\n- `直面自身的欲望，但不去行动`：对内接受自我，对外控制行为\n- 把“我不要”转为“我想要”效果更好。\n\n\n<small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small>","slug":"self_control","published":1,"updated":"2020-04-08T00:43:01.139Z","_id":"ck94a9apo002k07s6u03r0h8b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"《自控力》介绍\"><a href=\"#《自控力》介绍\" class=\"headerlink\" title=\"《自控力》介绍\"></a>《自控力》介绍</h2><ul>\n<li>“斯坦福大学广受欢迎的心理学课程”</li>\n<li>总结 意志力/欲望的现象</li>\n<li>分析 意志力/欲望的 生理 心理 精神学原理</li>\n<li>找出 提升自控力/控制欲望 的对策</li>\n</ul>\n<h4 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h4><p><img src=\"/images/self_control.png\" alt=\"《自控力思维导图》\"></p>\n<h2 id=\"意志力的本质\"><a href=\"#意志力的本质\" class=\"headerlink\" title=\"意志力的本质\"></a>意志力的本质</h2><ol>\n<li><code>我要</code>的力量：行动</li>\n<li><code>我不要</code>的力量：抵制</li>\n<li><code>我想要</code>的力量：目标</li>\n</ol>\n<h2 id=\"意志力的生理特征\"><a href=\"#意志力的生理特征\" class=\"headerlink\" title=\"意志力的生理特征\"></a>意志力的生理特征</h2><ul>\n<li>意志力像<code>肌肉</code>一样有限制。</li>\n<li>意志力被消耗，会导致失控。</li>\n<li>意志力从早到晚，逐渐减弱——把需要意志力的事情放在<code>早上</code>（意志力最强的时候）做。</li>\n<li>饥饿/疲惫/紧张会影响意志力。</li>\n<li>意志力可以训练：在一些小事上持续自控会提升整体的意志力</li>\n</ul>\n<h2 id=\"增强意志力的生理方法\"><a href=\"#增强意志力的生理方法\" class=\"headerlink\" title=\"增强意志力的生理方法\"></a>增强意志力的生理方法</h2><ul>\n<li><code>运动</code>：坚持运动，能提升意志力</li>\n<li><code>睡眠</code>：睡眠是对能量的恢复，早上的意志力最强</li>\n<li><code>放松</code>：压力会消耗意志力</li>\n<li><code>呼吸等待</code>：做失控决定前深呼吸，告诉自己等待几分钟再去做</li>\n<li><code>训练</code>：通过持续性的小事自控来训练意志力</li>\n<li><code>动力</code>：找出“我想要”的动力，让它环绕在你的生活的角角落落</li>\n</ul>\n<h2 id=\"引起“失控”的几种心理\"><a href=\"#引起“失控”的几种心理\" class=\"headerlink\" title=\"引起“失控”的几种心理\"></a>引起“失控”的几种心理</h2><ul>\n<li><code>自我感觉良好</code>会让自己更易纵容。</li>\n<li><code>把进步当作放纵的接口</code>：前进一小步，后退两大步</li>\n<li><code>透支成就感</code>：向未来赊账</li>\n</ul>\n<h2 id=\"多巴胺-amp-欲望vs幸福\"><a href=\"#多巴胺-amp-欲望vs幸福\" class=\"headerlink\" title=\"多巴胺 &amp; 欲望vs幸福\"></a>多巴胺 &amp; 欲望vs幸福</h2><h4 id=\"多巴胺：让人产生欲望，而不是快乐\"><a href=\"#多巴胺：让人产生欲望，而不是快乐\" class=\"headerlink\" title=\"多巴胺：让人产生欲望，而不是快乐\"></a>多巴胺：让人产生欲望，而不是快乐</h4><ul>\n<li>人脑的多巴胺系统，与快感中心不是同一个部分。</li>\n<li>多巴胺系统刺激人原始动力系统的一部分。</li>\n<li>使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。</li>\n<li>过量的多巴胺：上瘾</li>\n</ul>\n<h4 id=\"欲望-幸福\"><a href=\"#欲望-幸福\" class=\"headerlink\" title=\"欲望 != 幸福\"></a>欲望 != 幸福</h4><ul>\n<li>没有欲望不幸福，欲望过多使人失控。</li>\n<li>好欲望-》产生动力-》促进意志力</li>\n<li>坏欲望-》屈服于诱惑-》失控</li>\n<li>所以要合理利用欲望，分清“欲望”和“幸福”</li>\n</ul>\n<h4 id=\"多巴胺系统的特点\"><a href=\"#多巴胺系统的特点\" class=\"headerlink\" title=\"多巴胺系统的特点\"></a>多巴胺系统的特点</h4><ul>\n<li>对新鲜事物/未知奖励敏感</li>\n<li>对多样性敏感</li>\n</ul>\n<h4 id=\"多巴胺对策\"><a href=\"#多巴胺对策\" class=\"headerlink\" title=\"多巴胺对策\"></a>多巴胺对策</h4><ul>\n<li>“多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。</li>\n<li>“鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。</li>\n</ul>\n<h2 id=\"压力带来的“失控负循环”\"><a href=\"#压力带来的“失控负循环”\" class=\"headerlink\" title=\"压力带来的“失控负循环”\"></a>压力带来的“失控负循环”</h2><p><img src=\"/images/stress_circle.png\" alt=\"压力带来的“失控负循环”\"></p>\n<h4 id=\"打破循环的方法\"><a href=\"#打破循环的方法\" class=\"headerlink\" title=\"打破循环的方法\"></a>打破循环的方法</h4><ul>\n<li>及时止损，不要破罐子破摔</li>\n<li>“自我谅解”，而不是加深自责加深压力促进循环</li>\n<li>“行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”</li>\n<li>用有效的方式解压↓</li>\n</ul>\n<h4 id=\"有效的解压方式\"><a href=\"#有效的解压方式\" class=\"headerlink\" title=\"有效的解压方式\"></a>有效的解压方式</h4><ul>\n<li>运动</li>\n<li>培养爱好</li>\n<li>社交</li>\n<li>音乐</li>\n<li>阅读</li>\n<li>牢牢记住以上方式解压后愉悦的心情</li>\n</ul>\n<h2 id=\"现代-vs-未来\"><a href=\"#现代-vs-未来\" class=\"headerlink\" title=\"现代 vs 未来\"></a>现代 vs 未来</h2><h4 id=\"即时反馈-amp-延迟折扣\"><a href=\"#即时反馈-amp-延迟折扣\" class=\"headerlink\" title=\"即时反馈&amp;延迟折扣\"></a><code>即时反馈</code>&amp;<code>延迟折扣</code></h4><ul>\n<li><code>多巴胺系统</code>使人乐于追求即时反馈</li>\n<li>眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力</li>\n<li>延迟折扣：需要等待时间越久的奖励，诱惑力越低</li>\n</ul>\n<h4 id=\"抵制即时反馈\"><a href=\"#抵制即时反馈\" class=\"headerlink\" title=\"抵制即时反馈\"></a>抵制即时反馈</h4><ul>\n<li>拉开与诱惑的距离：时间 &amp; 空间</li>\n<li>“10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低</li>\n<li>放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方</li>\n</ul>\n<h4 id=\"缩小“现在的自己”-与“未来的自己”的差距\"><a href=\"#缩小“现在的自己”-与“未来的自己”的差距\" class=\"headerlink\" title=\"缩小“现在的自己” 与“未来的自己”的差距\"></a>缩小“现在的自己” 与“未来的自己”的差距</h4><ul>\n<li>不要高看未来的自己</li>\n<li>不要一切都拖到未来去做</li>\n</ul>\n<h2 id=\"意志力会传染\"><a href=\"#意志力会传染\" class=\"headerlink\" title=\"意志力会传染\"></a>意志力会传染</h2><ul>\n<li>人生来就具有社会性：不可能脱离社会生存，要与他人产生联系<h4 id=\"社会认同感\"><a href=\"#社会认同感\" class=\"headerlink\" title=\"社会认同感\"></a><code>社会认同感</code></h4></li>\n<li>“自豪”，“惭愧”等社会性情绪，会促进人的自控</li>\n<li>让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控</li>\n</ul>\n<h4 id=\"镜像神经元的行为：\"><a href=\"#镜像神经元的行为：\" class=\"headerlink\" title=\"镜像神经元的行为：\"></a><code>镜像神经元</code>的行为：</h4><ul>\n<li>无意识的模仿他人</li>\n<li>情绪传染</li>\n<li>自控力传染</li>\n</ul>\n<h4 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>增强免疫力</li>\n<li>坚定自我</li>\n<li>远离不自控人群</li>\n</ul>\n<h2 id=\"讽刺性反弹\"><a href=\"#讽刺性反弹\" class=\"headerlink\" title=\"讽刺性反弹\"></a>讽刺性反弹</h2><h4 id=\"“我不要”的神经学原理\"><a href=\"#“我不要”的神经学原理\" class=\"headerlink\" title=\"“我不要”的神经学原理\"></a>“我不要”的神经学原理</h4><ol>\n<li>大脑的“操作系统”：消耗能力去自控（耗能高）</li>\n<li>大脑的“监控系统”：充满了“不要xxx”的警告<br>（自动机制，耗能很低）</li>\n</ol>\n<ul>\n<li>当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控</li>\n</ul>\n<h4 id=\"讽刺性反弹的结果\"><a href=\"#讽刺性反弹的结果\" class=\"headerlink\" title=\"讽刺性反弹的结果\"></a>讽刺性反弹的结果</h4><ul>\n<li>“我不要”的力量，有时候会产生相反的效果</li>\n<li>通过“抑制想法”来抵抗诱惑，可能会适得其反</li>\n<li>越压抑人的本能，越容易适得其反</li>\n</ul>\n<h4 id=\"对策-1\"><a href=\"#对策-1\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的</li>\n<li>放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错</li>\n<li><code>直面自身的欲望，但不去行动</code>：对内接受自我，对外控制行为</li>\n<li>把“我不要”转为“我想要”效果更好。</li>\n</ul>\n<p><small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"《自控力》介绍\"><a href=\"#《自控力》介绍\" class=\"headerlink\" title=\"《自控力》介绍\"></a>《自控力》介绍</h2><ul>\n<li>“斯坦福大学广受欢迎的心理学课程”</li>\n<li>总结 意志力/欲望的现象</li>\n<li>分析 意志力/欲望的 生理 心理 精神学原理</li>\n<li>找出 提升自控力/控制欲望 的对策</li>\n</ul>\n<h4 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h4><p><img src=\"/images/self_control.png\" alt=\"《自控力思维导图》\"></p>\n<h2 id=\"意志力的本质\"><a href=\"#意志力的本质\" class=\"headerlink\" title=\"意志力的本质\"></a>意志力的本质</h2><ol>\n<li><code>我要</code>的力量：行动</li>\n<li><code>我不要</code>的力量：抵制</li>\n<li><code>我想要</code>的力量：目标</li>\n</ol>\n<h2 id=\"意志力的生理特征\"><a href=\"#意志力的生理特征\" class=\"headerlink\" title=\"意志力的生理特征\"></a>意志力的生理特征</h2><ul>\n<li>意志力像<code>肌肉</code>一样有限制。</li>\n<li>意志力被消耗，会导致失控。</li>\n<li>意志力从早到晚，逐渐减弱——把需要意志力的事情放在<code>早上</code>（意志力最强的时候）做。</li>\n<li>饥饿/疲惫/紧张会影响意志力。</li>\n<li>意志力可以训练：在一些小事上持续自控会提升整体的意志力</li>\n</ul>\n<h2 id=\"增强意志力的生理方法\"><a href=\"#增强意志力的生理方法\" class=\"headerlink\" title=\"增强意志力的生理方法\"></a>增强意志力的生理方法</h2><ul>\n<li><code>运动</code>：坚持运动，能提升意志力</li>\n<li><code>睡眠</code>：睡眠是对能量的恢复，早上的意志力最强</li>\n<li><code>放松</code>：压力会消耗意志力</li>\n<li><code>呼吸等待</code>：做失控决定前深呼吸，告诉自己等待几分钟再去做</li>\n<li><code>训练</code>：通过持续性的小事自控来训练意志力</li>\n<li><code>动力</code>：找出“我想要”的动力，让它环绕在你的生活的角角落落</li>\n</ul>\n<h2 id=\"引起“失控”的几种心理\"><a href=\"#引起“失控”的几种心理\" class=\"headerlink\" title=\"引起“失控”的几种心理\"></a>引起“失控”的几种心理</h2><ul>\n<li><code>自我感觉良好</code>会让自己更易纵容。</li>\n<li><code>把进步当作放纵的接口</code>：前进一小步，后退两大步</li>\n<li><code>透支成就感</code>：向未来赊账</li>\n</ul>\n<h2 id=\"多巴胺-amp-欲望vs幸福\"><a href=\"#多巴胺-amp-欲望vs幸福\" class=\"headerlink\" title=\"多巴胺 &amp; 欲望vs幸福\"></a>多巴胺 &amp; 欲望vs幸福</h2><h4 id=\"多巴胺：让人产生欲望，而不是快乐\"><a href=\"#多巴胺：让人产生欲望，而不是快乐\" class=\"headerlink\" title=\"多巴胺：让人产生欲望，而不是快乐\"></a>多巴胺：让人产生欲望，而不是快乐</h4><ul>\n<li>人脑的多巴胺系统，与快感中心不是同一个部分。</li>\n<li>多巴胺系统刺激人原始动力系统的一部分。</li>\n<li>使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。</li>\n<li>过量的多巴胺：上瘾</li>\n</ul>\n<h4 id=\"欲望-幸福\"><a href=\"#欲望-幸福\" class=\"headerlink\" title=\"欲望 != 幸福\"></a>欲望 != 幸福</h4><ul>\n<li>没有欲望不幸福，欲望过多使人失控。</li>\n<li>好欲望-》产生动力-》促进意志力</li>\n<li>坏欲望-》屈服于诱惑-》失控</li>\n<li>所以要合理利用欲望，分清“欲望”和“幸福”</li>\n</ul>\n<h4 id=\"多巴胺系统的特点\"><a href=\"#多巴胺系统的特点\" class=\"headerlink\" title=\"多巴胺系统的特点\"></a>多巴胺系统的特点</h4><ul>\n<li>对新鲜事物/未知奖励敏感</li>\n<li>对多样性敏感</li>\n</ul>\n<h4 id=\"多巴胺对策\"><a href=\"#多巴胺对策\" class=\"headerlink\" title=\"多巴胺对策\"></a>多巴胺对策</h4><ul>\n<li>“多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。</li>\n<li>“鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。</li>\n</ul>\n<h2 id=\"压力带来的“失控负循环”\"><a href=\"#压力带来的“失控负循环”\" class=\"headerlink\" title=\"压力带来的“失控负循环”\"></a>压力带来的“失控负循环”</h2><p><img src=\"/images/stress_circle.png\" alt=\"压力带来的“失控负循环”\"></p>\n<h4 id=\"打破循环的方法\"><a href=\"#打破循环的方法\" class=\"headerlink\" title=\"打破循环的方法\"></a>打破循环的方法</h4><ul>\n<li>及时止损，不要破罐子破摔</li>\n<li>“自我谅解”，而不是加深自责加深压力促进循环</li>\n<li>“行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”</li>\n<li>用有效的方式解压↓</li>\n</ul>\n<h4 id=\"有效的解压方式\"><a href=\"#有效的解压方式\" class=\"headerlink\" title=\"有效的解压方式\"></a>有效的解压方式</h4><ul>\n<li>运动</li>\n<li>培养爱好</li>\n<li>社交</li>\n<li>音乐</li>\n<li>阅读</li>\n<li>牢牢记住以上方式解压后愉悦的心情</li>\n</ul>\n<h2 id=\"现代-vs-未来\"><a href=\"#现代-vs-未来\" class=\"headerlink\" title=\"现代 vs 未来\"></a>现代 vs 未来</h2><h4 id=\"即时反馈-amp-延迟折扣\"><a href=\"#即时反馈-amp-延迟折扣\" class=\"headerlink\" title=\"即时反馈&amp;延迟折扣\"></a><code>即时反馈</code>&amp;<code>延迟折扣</code></h4><ul>\n<li><code>多巴胺系统</code>使人乐于追求即时反馈</li>\n<li>眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力</li>\n<li>延迟折扣：需要等待时间越久的奖励，诱惑力越低</li>\n</ul>\n<h4 id=\"抵制即时反馈\"><a href=\"#抵制即时反馈\" class=\"headerlink\" title=\"抵制即时反馈\"></a>抵制即时反馈</h4><ul>\n<li>拉开与诱惑的距离：时间 &amp; 空间</li>\n<li>“10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低</li>\n<li>放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方</li>\n</ul>\n<h4 id=\"缩小“现在的自己”-与“未来的自己”的差距\"><a href=\"#缩小“现在的自己”-与“未来的自己”的差距\" class=\"headerlink\" title=\"缩小“现在的自己” 与“未来的自己”的差距\"></a>缩小“现在的自己” 与“未来的自己”的差距</h4><ul>\n<li>不要高看未来的自己</li>\n<li>不要一切都拖到未来去做</li>\n</ul>\n<h2 id=\"意志力会传染\"><a href=\"#意志力会传染\" class=\"headerlink\" title=\"意志力会传染\"></a>意志力会传染</h2><ul>\n<li>人生来就具有社会性：不可能脱离社会生存，要与他人产生联系<h4 id=\"社会认同感\"><a href=\"#社会认同感\" class=\"headerlink\" title=\"社会认同感\"></a><code>社会认同感</code></h4></li>\n<li>“自豪”，“惭愧”等社会性情绪，会促进人的自控</li>\n<li>让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控</li>\n</ul>\n<h4 id=\"镜像神经元的行为：\"><a href=\"#镜像神经元的行为：\" class=\"headerlink\" title=\"镜像神经元的行为：\"></a><code>镜像神经元</code>的行为：</h4><ul>\n<li>无意识的模仿他人</li>\n<li>情绪传染</li>\n<li>自控力传染</li>\n</ul>\n<h4 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>增强免疫力</li>\n<li>坚定自我</li>\n<li>远离不自控人群</li>\n</ul>\n<h2 id=\"讽刺性反弹\"><a href=\"#讽刺性反弹\" class=\"headerlink\" title=\"讽刺性反弹\"></a>讽刺性反弹</h2><h4 id=\"“我不要”的神经学原理\"><a href=\"#“我不要”的神经学原理\" class=\"headerlink\" title=\"“我不要”的神经学原理\"></a>“我不要”的神经学原理</h4><ol>\n<li>大脑的“操作系统”：消耗能力去自控（耗能高）</li>\n<li>大脑的“监控系统”：充满了“不要xxx”的警告<br>（自动机制，耗能很低）</li>\n</ol>\n<ul>\n<li>当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控</li>\n</ul>\n<h4 id=\"讽刺性反弹的结果\"><a href=\"#讽刺性反弹的结果\" class=\"headerlink\" title=\"讽刺性反弹的结果\"></a>讽刺性反弹的结果</h4><ul>\n<li>“我不要”的力量，有时候会产生相反的效果</li>\n<li>通过“抑制想法”来抵抗诱惑，可能会适得其反</li>\n<li>越压抑人的本能，越容易适得其反</li>\n</ul>\n<h4 id=\"对策-1\"><a href=\"#对策-1\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的</li>\n<li>放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错</li>\n<li><code>直面自身的欲望，但不去行动</code>：对内接受自我，对外控制行为</li>\n<li>把“我不要”转为“我想要”效果更好。</li>\n</ul>\n<p><small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small></p>\n"},{"title":"前端向UI指南-WEB中的字体","date":"2020-02-01T16:00:00.000Z","description":"UI小姐姐动不动就丢给你奇奇怪怪的字体和各种尺寸的图标？快把这些文章丢改她看","toc":1,"top":0,"_content":"\n# WEB中的字体\n\n### 前言\n```bash\n某天，隔壁新来的漂亮UI小妹妹又优雅的丢给你一个压缩包，你满心欢喜的解压\n\n才发现又是新页面的需求\n\n然后你摸了摸光亮的脑门，捋了捋稀疏的鬓角，吭哧吭哧开始画页面...\n\n咦？pingfangsc medium,pingfangsc bold,pingfangsc light...??\n(同理可换成 sans serif，microsoft yahei)\n\n常用windows的你傻傻分不清楚小妹妹选定的mac字体\n\n这是同一个字体吗？font-weight还要写吗？不写的话win上显示就不一样了呀...\n\n于是你只能再打开小妹妹的聊天面板，码下一大段话“不同系统默认字体不一样...巴拉巴拉...web安全字体...备选字体集...字体文件包”\n\n然后在你的小本本上，画上第1025个圈圈，记录并预测下，到底还要跟多少UI做好字体交易...\n\n虽然你会为跟小妹妹进行了一次深入性的技术沟通 而心情大好，但是\n\n终将有一天，你的耐心会消耗殆尽，然后把这篇文章，丢到部门UI群\n\n从那以后，UI小妹妹们...\n\n...\n\n给你授予了“最矫情的技术没有之一”的称号 并 丢了更多pingfangsc给你🐶\n\n```\n\n### WEB 安全字体\n不同操作系统内置的字体是不同的，甚至差异很大，例如：\n![OS字体差异图](http://www.scarsu.com/images/gitbook/web_font01.png)\n\nwin7和mac下，只有十种字体重合，Windows XP中甚至没有其中的Palatino 和Trebuchet MS字体.....\n\n因此为了兼容性考虑，最安全的字体有：\n- Arial\n- Courier New\n- Georgia\n- Times New Roman\n- Verdana\n- ...\n- 随着操作系统的发展更新，这个数据也不是最准确的，可选的可能比上面五个多一些，请以实际测试为准\n\n### 备选字体组合\n\n当不确定网页用户电脑上是否有某种字体时，可以使用字体组合，提供备选的字体：\n\n```css\nfont-family:'Times New Roman', Times, serif\n```\n\n备选的意思可以参考备胎，就是：\n\n当浏览器在系统中找不到第一种字体时，会自动去使用第二种，依次类推...\n\n\n### 自定义字体\n\n如果对某种不通用字体有刚需，可以使用自定义字体。\n\n1. UI需要提供字体的woff和eot格式源文件（需要考虑文件太大会影响网页加载）\n2. 前端需要在css中自定义@font-face（不用担心浏览器兼容性）\n\n至于为什么是woff和eot：\n```\nTureTpe(.ttf)格式:\n .ttf字体是Windows和Mac系统的最常见的字体，是一种RAW格式，不为网站优化\n\nOpenType(.otf)格式：\n.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能\n\nWeb Open Font Format(.woff)格式：\n.woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离\n\nEmbedded Open Type(.eot)格式：\n.eot字体是IE专用字体，可以从TrueType创建此格式字体\n\nSVG(.svg)格式：\n.svg字体是基于SVG字体渲染的一种格式\n\n这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。\n```\n\n不同浏览器对不同字体文件格式的兼容性也不同：\n\n![OS字体文件兼容性图](http://www.scarsu.com/images/gitbook/web_font02.png)\n\n**总结来说：eot(供ie使用) + woff(供其他现代浏览器使用)是最佳组合，如果要兼容更多老版本浏览器/移动端浏览器可以加上ttf或svg）**\n\n定义font-face语法：\n```css\n@font-face {\n      font-family: <YourWebFontName自定义的字体名>;\n      src: <source> [<format>][,<source> [<format>]]*;\n      [font-weight: <weight>];\n      [font-style: <style>];\n}\n\n/*source：字体文件路径*/\n/*format：字体文件格式 eg. ttf,otf,woff,eot,svg...*/\n\n/*示例*/\n   @font-face {\n\tfont-family: 'YourWebFontName';\n\tsrc: url('YourWebFontName.eot'); /* IE9兼容模式 */\n\tsrc: url('YourWebFontName.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n             url('YourWebFontName.woff') format('woff'), /* 现代浏览器 */\n             url('YourWebFontName.ttf')  format('truetype'), /* Safari, Android, iOS */\n             url('YourWebFontName.svg#YourWebFontName') format('svg'); /* 老版本 iOS */\n   }\n```\n\n\n### 总结\n1. UI最好就用最安全的几种通用字体 \n2. 如果想用不通用的字体\n    - 要么：提供备选字体\n    - 要么：提供字体文件(eot+woff+[svg/ttf])，且要考虑选择字体源文件体积较小的字体","source":"_posts/web_fonts.md","raw":"---\ntitle: 前端向UI指南-WEB中的字体\ncategories:\n    - 02 CSS # 一级分类\ntags:\ndate: 2020-02-02\ndescription: UI小姐姐动不动就丢给你奇奇怪怪的字体和各种尺寸的图标？快把这些文章丢改她看\ntoc: 1\ntop: 0\n---\n\n# WEB中的字体\n\n### 前言\n```bash\n某天，隔壁新来的漂亮UI小妹妹又优雅的丢给你一个压缩包，你满心欢喜的解压\n\n才发现又是新页面的需求\n\n然后你摸了摸光亮的脑门，捋了捋稀疏的鬓角，吭哧吭哧开始画页面...\n\n咦？pingfangsc medium,pingfangsc bold,pingfangsc light...??\n(同理可换成 sans serif，microsoft yahei)\n\n常用windows的你傻傻分不清楚小妹妹选定的mac字体\n\n这是同一个字体吗？font-weight还要写吗？不写的话win上显示就不一样了呀...\n\n于是你只能再打开小妹妹的聊天面板，码下一大段话“不同系统默认字体不一样...巴拉巴拉...web安全字体...备选字体集...字体文件包”\n\n然后在你的小本本上，画上第1025个圈圈，记录并预测下，到底还要跟多少UI做好字体交易...\n\n虽然你会为跟小妹妹进行了一次深入性的技术沟通 而心情大好，但是\n\n终将有一天，你的耐心会消耗殆尽，然后把这篇文章，丢到部门UI群\n\n从那以后，UI小妹妹们...\n\n...\n\n给你授予了“最矫情的技术没有之一”的称号 并 丢了更多pingfangsc给你🐶\n\n```\n\n### WEB 安全字体\n不同操作系统内置的字体是不同的，甚至差异很大，例如：\n![OS字体差异图](http://www.scarsu.com/images/gitbook/web_font01.png)\n\nwin7和mac下，只有十种字体重合，Windows XP中甚至没有其中的Palatino 和Trebuchet MS字体.....\n\n因此为了兼容性考虑，最安全的字体有：\n- Arial\n- Courier New\n- Georgia\n- Times New Roman\n- Verdana\n- ...\n- 随着操作系统的发展更新，这个数据也不是最准确的，可选的可能比上面五个多一些，请以实际测试为准\n\n### 备选字体组合\n\n当不确定网页用户电脑上是否有某种字体时，可以使用字体组合，提供备选的字体：\n\n```css\nfont-family:'Times New Roman', Times, serif\n```\n\n备选的意思可以参考备胎，就是：\n\n当浏览器在系统中找不到第一种字体时，会自动去使用第二种，依次类推...\n\n\n### 自定义字体\n\n如果对某种不通用字体有刚需，可以使用自定义字体。\n\n1. UI需要提供字体的woff和eot格式源文件（需要考虑文件太大会影响网页加载）\n2. 前端需要在css中自定义@font-face（不用担心浏览器兼容性）\n\n至于为什么是woff和eot：\n```\nTureTpe(.ttf)格式:\n .ttf字体是Windows和Mac系统的最常见的字体，是一种RAW格式，不为网站优化\n\nOpenType(.otf)格式：\n.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能\n\nWeb Open Font Format(.woff)格式：\n.woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离\n\nEmbedded Open Type(.eot)格式：\n.eot字体是IE专用字体，可以从TrueType创建此格式字体\n\nSVG(.svg)格式：\n.svg字体是基于SVG字体渲染的一种格式\n\n这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。\n```\n\n不同浏览器对不同字体文件格式的兼容性也不同：\n\n![OS字体文件兼容性图](http://www.scarsu.com/images/gitbook/web_font02.png)\n\n**总结来说：eot(供ie使用) + woff(供其他现代浏览器使用)是最佳组合，如果要兼容更多老版本浏览器/移动端浏览器可以加上ttf或svg）**\n\n定义font-face语法：\n```css\n@font-face {\n      font-family: <YourWebFontName自定义的字体名>;\n      src: <source> [<format>][,<source> [<format>]]*;\n      [font-weight: <weight>];\n      [font-style: <style>];\n}\n\n/*source：字体文件路径*/\n/*format：字体文件格式 eg. ttf,otf,woff,eot,svg...*/\n\n/*示例*/\n   @font-face {\n\tfont-family: 'YourWebFontName';\n\tsrc: url('YourWebFontName.eot'); /* IE9兼容模式 */\n\tsrc: url('YourWebFontName.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n             url('YourWebFontName.woff') format('woff'), /* 现代浏览器 */\n             url('YourWebFontName.ttf')  format('truetype'), /* Safari, Android, iOS */\n             url('YourWebFontName.svg#YourWebFontName') format('svg'); /* 老版本 iOS */\n   }\n```\n\n\n### 总结\n1. UI最好就用最安全的几种通用字体 \n2. 如果想用不通用的字体\n    - 要么：提供备选字体\n    - 要么：提供字体文件(eot+woff+[svg/ttf])，且要考虑选择字体源文件体积较小的字体","slug":"web_fonts","published":1,"updated":"2020-04-18T00:49:45.088Z","_id":"ck94a9app002o07s6oxpnyozu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"WEB中的字体\"><a href=\"#WEB中的字体\" class=\"headerlink\" title=\"WEB中的字体\"></a>WEB中的字体</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某天，隔壁新来的漂亮UI小妹妹又优雅的丢给你一个压缩包，你满心欢喜的解压</span><br><span class=\"line\"></span><br><span class=\"line\">才发现又是新页面的需求</span><br><span class=\"line\"></span><br><span class=\"line\">然后你摸了摸光亮的脑门，捋了捋稀疏的鬓角，吭哧吭哧开始画页面...</span><br><span class=\"line\"></span><br><span class=\"line\">咦？pingfangsc medium,pingfangsc bold,pingfangsc light...??</span><br><span class=\"line\">(同理可换成 sans serif，microsoft yahei)</span><br><span class=\"line\"></span><br><span class=\"line\">常用windows的你傻傻分不清楚小妹妹选定的mac字体</span><br><span class=\"line\"></span><br><span class=\"line\">这是同一个字体吗？font-weight还要写吗？不写的话win上显示就不一样了呀...</span><br><span class=\"line\"></span><br><span class=\"line\">于是你只能再打开小妹妹的聊天面板，码下一大段话“不同系统默认字体不一样...巴拉巴拉...web安全字体...备选字体集...字体文件包”</span><br><span class=\"line\"></span><br><span class=\"line\">然后在你的小本本上，画上第1025个圈圈，记录并预测下，到底还要跟多少UI做好字体交易...</span><br><span class=\"line\"></span><br><span class=\"line\">虽然你会为跟小妹妹进行了一次深入性的技术沟通 而心情大好，但是</span><br><span class=\"line\"></span><br><span class=\"line\">终将有一天，你的耐心会消耗殆尽，然后把这篇文章，丢到部门UI群</span><br><span class=\"line\"></span><br><span class=\"line\">从那以后，UI小妹妹们...</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">给你授予了“最矫情的技术没有之一”的称号 并 丢了更多pingfangsc给你🐶</span><br></pre></td></tr></table></figure>\n<h3 id=\"WEB-安全字体\"><a href=\"#WEB-安全字体\" class=\"headerlink\" title=\"WEB 安全字体\"></a>WEB 安全字体</h3><p>不同操作系统内置的字体是不同的，甚至差异很大，例如：<br><img src=\"http://www.scarsu.com/images/gitbook/web_font01.png\" alt=\"OS字体差异图\"></p>\n<p>win7和mac下，只有十种字体重合，Windows XP中甚至没有其中的Palatino 和Trebuchet MS字体…..</p>\n<p>因此为了兼容性考虑，最安全的字体有：</p>\n<ul>\n<li>Arial</li>\n<li>Courier New</li>\n<li>Georgia</li>\n<li>Times New Roman</li>\n<li>Verdana</li>\n<li>…</li>\n<li>随着操作系统的发展更新，这个数据也不是最准确的，可选的可能比上面五个多一些，请以实际测试为准</li>\n</ul>\n<h3 id=\"备选字体组合\"><a href=\"#备选字体组合\" class=\"headerlink\" title=\"备选字体组合\"></a>备选字体组合</h3><p>当不确定网页用户电脑上是否有某种字体时，可以使用字体组合，提供备选的字体：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font-family:'Times New Roman', Times, serif</span><br></pre></td></tr></table></figure>\n<p>备选的意思可以参考备胎，就是：</p>\n<p>当浏览器在系统中找不到第一种字体时，会自动去使用第二种，依次类推…</p>\n<h3 id=\"自定义字体\"><a href=\"#自定义字体\" class=\"headerlink\" title=\"自定义字体\"></a>自定义字体</h3><p>如果对某种不通用字体有刚需，可以使用自定义字体。</p>\n<ol>\n<li>UI需要提供字体的woff和eot格式源文件（需要考虑文件太大会影响网页加载）</li>\n<li>前端需要在css中自定义@font-face（不用担心浏览器兼容性）</li>\n</ol>\n<p>至于为什么是woff和eot：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TureTpe(.ttf)格式:</span><br><span class=\"line\"> .ttf字体是Windows和Mac系统的最常见的字体，是一种RAW格式，不为网站优化</span><br><span class=\"line\"></span><br><span class=\"line\">OpenType(.otf)格式：</span><br><span class=\"line\">.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能</span><br><span class=\"line\"></span><br><span class=\"line\">Web Open Font Format(.woff)格式：</span><br><span class=\"line\">.woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离</span><br><span class=\"line\"></span><br><span class=\"line\">Embedded Open Type(.eot)格式：</span><br><span class=\"line\">.eot字体是IE专用字体，可以从TrueType创建此格式字体</span><br><span class=\"line\"></span><br><span class=\"line\">SVG(.svg)格式：</span><br><span class=\"line\">.svg字体是基于SVG字体渲染的一种格式</span><br><span class=\"line\"></span><br><span class=\"line\">这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。</span><br></pre></td></tr></table></figure></p>\n<p>不同浏览器对不同字体文件格式的兼容性也不同：</p>\n<p><img src=\"http://www.scarsu.com/images/gitbook/web_font02.png\" alt=\"OS字体文件兼容性图\"></p>\n<p><strong>总结来说：eot(供ie使用) + woff(供其他现代浏览器使用)是最佳组合，如果要兼容更多老版本浏览器/移动端浏览器可以加上ttf或svg）</strong></p>\n<p>定义font-face语法：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-family</span>: &lt;YourWebFontName自定义的字体名&gt;;</span><br><span class=\"line\">      <span class=\"attribute\">src</span>: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;</span><br><span class=\"line\">      [font-weight: &lt;weight&gt;];</span><br><span class=\"line\">      <span class=\"selector-attr\">[font-style: &lt;style&gt;]</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*source：字体文件路径*/</span></span><br><span class=\"line\"><span class=\"comment\">/*format：字体文件格式 eg. ttf,otf,woff,eot,svg...*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*示例*/</span></span><br><span class=\"line\">   <span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'YourWebFontName'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot'</span>); <span class=\"comment\">/* IE9兼容模式 */</span></span><br><span class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"comment\">/* 现代浏览器 */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.ttf'</span>)  <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"comment\">/* Safari, Android, iOS */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.svg#YourWebFontName'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); <span class=\"comment\">/* 老版本 iOS */</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>UI最好就用最安全的几种通用字体 </li>\n<li>如果想用不通用的字体<ul>\n<li>要么：提供备选字体</li>\n<li>要么：提供字体文件(eot+woff+[svg/ttf])，且要考虑选择字体源文件体积较小的字体</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"WEB中的字体\"><a href=\"#WEB中的字体\" class=\"headerlink\" title=\"WEB中的字体\"></a>WEB中的字体</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某天，隔壁新来的漂亮UI小妹妹又优雅的丢给你一个压缩包，你满心欢喜的解压</span><br><span class=\"line\"></span><br><span class=\"line\">才发现又是新页面的需求</span><br><span class=\"line\"></span><br><span class=\"line\">然后你摸了摸光亮的脑门，捋了捋稀疏的鬓角，吭哧吭哧开始画页面...</span><br><span class=\"line\"></span><br><span class=\"line\">咦？pingfangsc medium,pingfangsc bold,pingfangsc light...??</span><br><span class=\"line\">(同理可换成 sans serif，microsoft yahei)</span><br><span class=\"line\"></span><br><span class=\"line\">常用windows的你傻傻分不清楚小妹妹选定的mac字体</span><br><span class=\"line\"></span><br><span class=\"line\">这是同一个字体吗？font-weight还要写吗？不写的话win上显示就不一样了呀...</span><br><span class=\"line\"></span><br><span class=\"line\">于是你只能再打开小妹妹的聊天面板，码下一大段话“不同系统默认字体不一样...巴拉巴拉...web安全字体...备选字体集...字体文件包”</span><br><span class=\"line\"></span><br><span class=\"line\">然后在你的小本本上，画上第1025个圈圈，记录并预测下，到底还要跟多少UI做好字体交易...</span><br><span class=\"line\"></span><br><span class=\"line\">虽然你会为跟小妹妹进行了一次深入性的技术沟通 而心情大好，但是</span><br><span class=\"line\"></span><br><span class=\"line\">终将有一天，你的耐心会消耗殆尽，然后把这篇文章，丢到部门UI群</span><br><span class=\"line\"></span><br><span class=\"line\">从那以后，UI小妹妹们...</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">给你授予了“最矫情的技术没有之一”的称号 并 丢了更多pingfangsc给你🐶</span><br></pre></td></tr></table></figure>\n<h3 id=\"WEB-安全字体\"><a href=\"#WEB-安全字体\" class=\"headerlink\" title=\"WEB 安全字体\"></a>WEB 安全字体</h3><p>不同操作系统内置的字体是不同的，甚至差异很大，例如：<br><img src=\"http://www.scarsu.com/images/gitbook/web_font01.png\" alt=\"OS字体差异图\"></p>\n<p>win7和mac下，只有十种字体重合，Windows XP中甚至没有其中的Palatino 和Trebuchet MS字体…..</p>\n<p>因此为了兼容性考虑，最安全的字体有：</p>\n<ul>\n<li>Arial</li>\n<li>Courier New</li>\n<li>Georgia</li>\n<li>Times New Roman</li>\n<li>Verdana</li>\n<li>…</li>\n<li>随着操作系统的发展更新，这个数据也不是最准确的，可选的可能比上面五个多一些，请以实际测试为准</li>\n</ul>\n<h3 id=\"备选字体组合\"><a href=\"#备选字体组合\" class=\"headerlink\" title=\"备选字体组合\"></a>备选字体组合</h3><p>当不确定网页用户电脑上是否有某种字体时，可以使用字体组合，提供备选的字体：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font-family:'Times New Roman', Times, serif</span><br></pre></td></tr></table></figure>\n<p>备选的意思可以参考备胎，就是：</p>\n<p>当浏览器在系统中找不到第一种字体时，会自动去使用第二种，依次类推…</p>\n<h3 id=\"自定义字体\"><a href=\"#自定义字体\" class=\"headerlink\" title=\"自定义字体\"></a>自定义字体</h3><p>如果对某种不通用字体有刚需，可以使用自定义字体。</p>\n<ol>\n<li>UI需要提供字体的woff和eot格式源文件（需要考虑文件太大会影响网页加载）</li>\n<li>前端需要在css中自定义@font-face（不用担心浏览器兼容性）</li>\n</ol>\n<p>至于为什么是woff和eot：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TureTpe(.ttf)格式:</span><br><span class=\"line\"> .ttf字体是Windows和Mac系统的最常见的字体，是一种RAW格式，不为网站优化</span><br><span class=\"line\"></span><br><span class=\"line\">OpenType(.otf)格式：</span><br><span class=\"line\">.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能</span><br><span class=\"line\"></span><br><span class=\"line\">Web Open Font Format(.woff)格式：</span><br><span class=\"line\">.woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离</span><br><span class=\"line\"></span><br><span class=\"line\">Embedded Open Type(.eot)格式：</span><br><span class=\"line\">.eot字体是IE专用字体，可以从TrueType创建此格式字体</span><br><span class=\"line\"></span><br><span class=\"line\">SVG(.svg)格式：</span><br><span class=\"line\">.svg字体是基于SVG字体渲染的一种格式</span><br><span class=\"line\"></span><br><span class=\"line\">这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。</span><br></pre></td></tr></table></figure></p>\n<p>不同浏览器对不同字体文件格式的兼容性也不同：</p>\n<p><img src=\"http://www.scarsu.com/images/gitbook/web_font02.png\" alt=\"OS字体文件兼容性图\"></p>\n<p><strong>总结来说：eot(供ie使用) + woff(供其他现代浏览器使用)是最佳组合，如果要兼容更多老版本浏览器/移动端浏览器可以加上ttf或svg）</strong></p>\n<p>定义font-face语法：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-family</span>: &lt;YourWebFontName自定义的字体名&gt;;</span><br><span class=\"line\">      <span class=\"attribute\">src</span>: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;</span><br><span class=\"line\">      [font-weight: &lt;weight&gt;];</span><br><span class=\"line\">      <span class=\"selector-attr\">[font-style: &lt;style&gt;]</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*source：字体文件路径*/</span></span><br><span class=\"line\"><span class=\"comment\">/*format：字体文件格式 eg. ttf,otf,woff,eot,svg...*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*示例*/</span></span><br><span class=\"line\">   <span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'YourWebFontName'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot'</span>); <span class=\"comment\">/* IE9兼容模式 */</span></span><br><span class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"comment\">/* 现代浏览器 */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.ttf'</span>)  <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"comment\">/* Safari, Android, iOS */</span></span><br><span class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.svg#YourWebFontName'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); <span class=\"comment\">/* 老版本 iOS */</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>UI最好就用最安全的几种通用字体 </li>\n<li>如果想用不通用的字体<ul>\n<li>要么：提供备选字体</li>\n<li>要么：提供字体文件(eot+woff+[svg/ttf])，且要考虑选择字体源文件体积较小的字体</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Devtools 老司机养成 - 第四篇Sources源文件面板","date":"2020-03-14T16:00:00.000Z","description":"chrome重要的sources面板，可以做IDE？文件变更，覆盖调试...","toc":1,"top":0,"_content":"\n## 概览\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n![0](https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png)\n\n## 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54db0062099787.gif)\n\n## Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/07/29/5d3e5579edff848268.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/07/29/5d3e558950aa668631.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n## Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n## BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d52054637081.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif)\n\n## Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有sources面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n## Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n## Local Overrides\n\n-   用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n-   只能指定一个目录\n-   断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新\n\n## Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n## Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n","source":"_posts/devtools_04_sources.md","raw":"---\ntitle: Devtools 老司机养成 - 第四篇Sources源文件面板\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-03-15\ndescription: chrome重要的sources面板，可以做IDE？文件变更，覆盖调试...\ntoc: 1\ntop: 0\n---\n\n## 概览\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n![0](https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png)\n\n## 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54db0062099787.gif)\n\n## Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/07/29/5d3e5579edff848268.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/07/29/5d3e558950aa668631.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n## Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n## BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d52054637081.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif)\n\n## Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有sources面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n## Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n## Local Overrides\n\n-   用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n-   只能指定一个目录\n-   断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新\n\n## Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n## Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n","slug":"devtools_04_sources","published":1,"updated":"2020-04-18T00:49:44.937Z","_id":"ck94a9b9s003407s673zaw61u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png\" alt=\"0\"></p>\n<h2 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h2><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54db0062099787.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h2><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5579edff848268.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e558950aa668631.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h2 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h2><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h2><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d52054637081.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h2><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有sources面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h2><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h2 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h2><ul>\n<li>用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n<li>只能指定一个目录</li>\n<li>断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新</li>\n</ul>\n<h2 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h2><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h2 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h2><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png\" alt=\"0\"></p>\n<h2 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h2><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54db0062099787.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h2><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5579edff848268.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e558950aa668631.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h2 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h2><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h2><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d52054637081.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h2><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有sources面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h2><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h2 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h2><ul>\n<li>用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n<li>只能指定一个目录</li>\n<li>断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新</li>\n</ul>\n<h2 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h2><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h2 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h2><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第五篇- Network 面板","date":"2020-03-21T16:00:00.000Z","description":"chrome最重要之二的Network面板，给后端小哥甩锅？实锤都在这里...","toc":1,"top":0,"_content":"\n## 概览\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n## 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n## 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   讲请求复制为 Fetch 代码 -> `Copy As Fetch`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n## Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n## Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n## 相关附注\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n","source":"_posts/devtools_05_network.md","raw":"---\ntitle: Devtools 老司机养成 - 第五篇- Network 面板\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-03-22\ndescription: chrome最重要之二的Network面板，给后端小哥甩锅？实锤都在这里...\ntoc: 1\ntop: 0\n---\n\n## 概览\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n## 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n## 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   讲请求复制为 Fetch 代码 -> `Copy As Fetch`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n## Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n## Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n## 相关附注\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n","slug":"devtools_05_network","published":1,"updated":"2020-04-18T00:49:44.937Z","_id":"ck94a9b9t003507s6dwsd77jn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h2 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h2><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h2 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h2><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h2 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h2><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>讲请求复制为 Fetch 代码 -&gt; <code>Copy As Fetch</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h2 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h2><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h2 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h2 id=\"相关附注\"><a href=\"#相关附注\" class=\"headerlink\" title=\"相关附注\"></a>相关附注</h2><h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h2 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h2><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h2 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h2><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h2 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h2><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>讲请求复制为 Fetch 代码 -&gt; <code>Copy As Fetch</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h2 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h2><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h2 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h2 id=\"相关附注\"><a href=\"#相关附注\" class=\"headerlink\" title=\"相关附注\"></a>相关附注</h2><h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n"},{"title":"Devtools 入门","date":"2020-02-15T16:00:00.000Z","description":"Devtools新手请看这篇，入门大全～","toc":1,"top":0,"_content":"# \n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://doc.scarsu.com/devtools/devtools_01_intro.html)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   参考 ：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)；\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/06/03/5cf4a9da59be527769.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/06/03/5cf4aa13906d615289.png)\n\n在 DOM 树中可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/06/13/5d01e076e584425630.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/06/03/5cf4aa879865e17312.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/06/03/5cf4aac95398455074.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/06/03/5cf4aadf0381221831.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/06/03/5cf4aae17ead896661.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abca96ac072660.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/06/03/5cf4abfcc126341109.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### Main\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n","source":"_posts/devtools_rookie_intro.md","raw":"---\ntitle: Devtools 入门\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-02-16\ndescription: Devtools新手请看这篇，入门大全～\ntoc: 1\ntop: 0\n---\n# \n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://doc.scarsu.com/devtools/devtools_01_intro.html)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   参考 ：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)；\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/06/03/5cf4a9da59be527769.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/06/03/5cf4aa13906d615289.png)\n\n在 DOM 树中可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/06/13/5d01e076e584425630.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/06/03/5cf4aa879865e17312.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/06/03/5cf4aac95398455074.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/06/03/5cf4aadf0381221831.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/06/03/5cf4aae17ead896661.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abca96ac072660.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/06/03/5cf4abfcc126341109.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### Main\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n","slug":"devtools_rookie_intro","published":1,"updated":"2020-04-18T00:49:44.953Z","_id":"ck94a9bcu003807s6c3x94c4z","comments":1,"layout":"post","photos":[],"link":"","content":"<p># </p>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://doc.scarsu.com/devtools/devtools_01_intro.html\" target=\"_blank\" rel=\"noopener\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>参考 ：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\">；</p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4a9da59be527769.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa13906d615289.png\" alt=\"0\"></p>\n<p>在 DOM 树中可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/13/5d01e076e584425630.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa879865e17312.png\" alt=\"0\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aac95398455074.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/06/03/5cf4aadf0381221831.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae17ead896661.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abca96ac072660.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4abfcc126341109.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p># </p>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://doc.scarsu.com/devtools/devtools_01_intro.html\" target=\"_blank\" rel=\"noopener\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>参考 ：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\">；</p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4a9da59be527769.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa13906d615289.png\" alt=\"0\"></p>\n<p>在 DOM 树中可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/13/5d01e076e584425630.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa879865e17312.png\" alt=\"0\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aac95398455074.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/06/03/5cf4aadf0381221831.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae17ead896661.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abca96ac072660.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4abfcc126341109.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n"},{"title":"JavaScript开发者应懂的33个概念","date":"2019-06-30T16:00:00.000Z","description":"基本都是面试考点了","toc":1,"top":0,"_content":"\n## 简介\n[原文链接](https://github.com/stephentian/33-js-concepts)\n> 本篇文章是参照 @leonardomso 创立，英文版项目地址在[这里](https://github.com/leonardomso/33-js-concepts)。\n\n---\n\n## 目录\n\n1. **[调用堆栈](#1-调用堆栈)**\n2. **[原始类型](#2-原始类型)**\n3. **[值类型和引用类型](#3-值类型和引用类型)**\n4. **[隐式, 显式, 名义和鸭子类型](#4-隐式-显式-名义和鸭子类型)**\n5. **[== 与 ===, typeof 与 instanceof](#5--vs--typeof-vs-instanceof)**\n6. **[this, call, apply 和 bind](#6-this-call-apply-和-bind)**\n7. **[函数作用域, 块级作用域和词法作用域](#7-函数作用域-块级作用域和词法作用域)**\n8. **[闭包](#8-闭包)**\n9. **[map, reduce, filter 等高阶函数](#9-map-reduce-filter-等高阶函数)**\n10. **[表达式和语句](#10-表达式和语句)**\n11. **[变量提升](#11-变量提升)**\n12. **[Promise](#12-promise)**\n13. **[立即执行函数, 模块化, 命名空间](#13-立即执行函数-模块化-命名空间)**\n14. **[递归](#14-递归)**\n15. **[算法](#15-算法)**\n16. **[数据结构](#16-数据结构)**\n17. **[消息队列和事件循环](#17-消息队列和事件循环)**\n18. **[setTimeout, setInterval 和 requestAnimationFrame](#18-settimeout-setinterval-和-requestanimationframe)**\n19. **[继承, 多态和代码复用](#19-继承-多态和代码复用)**\n20. **[按位操作符, 类数组对象和类型化数组](#20-按位操作符-类数组对象和类型化数组)**\n21. **[DOM 树和渲染过程](#21-dom-树和渲染过程)**\n22. **[new 与构造函数, instanceof 与实例](#22-new-与构造函数-instanceof-与实例)**\n23. **[原型继承与原型链](#23-原型继承与原型链)**\n24. **[Object.create 和 Object.assign](#24-objectcreate-和-objectassign)**\n25. **[工厂函数和类](#25-工厂函数和类)**\n26. **[设计模式](#26-设计模式)**\n27. **[Memoization](#27-memoization)**\n28. **[纯函数, 函数副作用和状态变化](#28-纯函数-函数副作用和状态变化)**\n29. **[耗性能操作和时间复杂度](#29-耗性能操作和时间复杂度)**\n30. **[JavaScript 引擎](#30-javascript-引擎)**\n31. **[二进制, 十进制, 十六进制, 科学记数法](#31-二进制-十六进制-十进制-科学记数法)**\n32. **[偏函数, 柯里化, Compose 和 Pipe](#32-偏函数-柯里化-compose-和-pipe)**\n33. **[代码整洁之道](#33-代码整洁之道)**\n\n---\n\n## 1. 调用堆栈\n\n### 文章\n\n- :book: [Call Stack — MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- :book: [[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金](https://juejin.im/post/5a05b4576fb9a04519690d42)\n- :book: [[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金](https://juejin.im/post/5ba32171f265da0ab719a6d7)\n- :book: [这一次，彻底弄懂 JavaScript 执行机制 —— 掘金](https://juejin.im/post/59e85eebf265da430d571f89)\n- :book: [解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国](https://www.oschina.net/translate/how-does-javascript-actually-work-part-1)\n- :book: [Tasks, microtasks, queues and schedules —— Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n- :book: [Tasks, microtasks, queues and schedules（译） —— 掘金](https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff)\n\n### 视频\n\n- :tv: [What is the event loop anyway? —— 腾讯视频(英文字幕)](https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser)\n- :tv: [Understanding The JavaScript Call Stack, Event Queue, Event Table, & Event Loop —— Bilibili](https://www.bilibili.com/video/av33824933/)\n- :tv: [JS 中的变量提升、堆栈内存及闭包详解 —— Acfun](http://www.acfun.cn/v/ac4495641)\n- :tv: [事件循环模型 —— PHP 中文网](http://www.php.cn/code/21194.html)\n- :tv: [Javascript: the Call Stack explained — Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n- :tv: [The JS Call Stack Explained In 9 Minutes — Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n- :tv: [JavaScript Execution Stack — Codecademy](https://www.youtube.com/watch?v=jT0USJeNFEA)\n- :tv: [What is the Call Stack? — Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n- :tv: [The Call Stack — Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n- :tv: [Understanding JavaScript Execution — Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n- :tv: [Call Stack & Event Loop — movies com](https://www.youtube.com/watch?v=mk0lu9MKBto)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 2. 原始类型\n\n### 文章\n\n- :book: [原始数据 —— MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)\n- :book: [[译]JavaScript 是怎样编码数字的 —— SegmentFault](https://segmentfault.com/a/1190000017090272)\n- :book: [每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜](https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/)\n- :book: [JavaScript 标准参考教程(基本语法之数值) —— 阮一峰](https://wangdoc.com/javascript/types/number.html)\n- :book: [The Secret Life of JavaScript Primitives —— Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n\n### 视频\n\n- :tv: [javascript 六种数据类型 —— 慕课网](https://www.imooc.com/video/5674)\n- :tv: [javascript 视频教程(数据类型) —— PHP 中文网](http://www.php.cn/code/5808.html)\n- :tv: [JavaScript Reference vs Primitive Types — Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- :tv: [JavaScript Primitive Types — Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n- :tv: [Javascript Primitive and Reference Types — Baljeet Singh](https://www.youtube.com/watch?v=F7YbhKbpFic)\n- :tv: [Value Types and Reference Types in JavaScript — Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n- :tv: [JavaScript Primitive Data Types — Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n- :tv: [Everything you never wanted to know about JavaScript numbers — Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 3. 值类型和引用类型\n\n### 文章\n\n- :book: [ECMAScript 引用类型 —— W3school](http://www.w3school.com.cn/js/pro_js_referencetypes.asp)\n- :book: [js 中的值类型和引用类型的区别 —— 博客园](https://www.cnblogs.com/leiting/p/8081413.html)\n- :book: [JavaScript 的值传递和引用传递 —— FunDebug](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n- :book: [Primitive Types & Reference Types in JavaScript —— Bran van der Meer](https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm)\n- :book: [JavaScript: Passing by Value or by Reference —— CSDN](https://blog.csdn.net/xiaojia_boke/article/details/54906509)\n- :book: [js 值引用和值复制 —— SegmentFault](https://segmentfault.com/a/1190000015411195)\n- :book: [js- 引用和复制(传值和传址) —— CSDN](https://blog.csdn.net/zzzaquarius/article/details/4902235)\n\n### 视频\n\n- :tv: [Javascript Pass by Value vs Pass by Reference — techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n- :tv: [JavaScript Value vs Reference Types — Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 4. 隐式, 显式, 名义和鸭子类型\n\n### 文章\n\n- :book: [ECMAScript 类型转换 —— W3school](http://www.w3school.com.cn/js/pro_js_typeconversion.asp)\n- :book: [JavaScript 的怪癖 1：隐式类型转换 —— justjavac](http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html)\n- :book: [JavaScript 运算符规则与隐式类型转换详解 —— 掘金](https://juejin.im/post/59ad2585f265da246a20e026)\n- :book: [聊一聊 JS 中的隐式类型转换 —— SegmentFault](https://segmentfault.com/a/1190000004482388)\n- :book: [有趣的 JavaScript 隐式类型转换 —— 博客园](https://www.cnblogs.com/yugege/p/5277883.html)\n- :book: [JavaScript 显式类型转换与隐式类型转换 —— CSDN](https://blog.csdn.net/yangjvn/article/details/48284163)\n- :book: [你不知道的 JavaScript（中卷）强制类型转换 —— 简书](https://www.jianshu.com/p/777a89b4ed9a)\n- :book: [你懂 JavaScript 嗎？#8 強制轉型 —— cythilya](https://ithelp.ithome.com.tw/articles/10201512)\n- :book: [动态类型语言和鸭子类型 —— 曾探](http://book.51cto.com/art/201505/475153.htm)\n- :book: [Nominal & Structural Typing —— flow](https://flow.org/en/docs/lang/nominal-structural/)\n- :book: [What exactly is Type Coercion in Javascript? —— stackoverflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n- :book: [You Don't Know JS: Types & Grammar —— github](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch4.md)\n\n### 视频\n\n- :tv: [javascript 隐式转换 —— 慕课网](https://www.imooc.com/video/5675)\n- :tv: [Javascript 基础加强-类型转换 —— 黑马程序员](http://www.le.com/ptv/vplay/27767009.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n## 5. == vs ===, typeof vs instanceof\n\n### 文章\n\n- :book: [JavaScript 中的相等性判断 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- :book: [js 中 == 和 === 的区别 —— 掘金](https://juejin.im/entry/584918612f301e005716add6)\n- :book: [== vs === in Javascript —— CSDN](https://blog.csdn.net/w97531/article/details/82255225)\n- :book: [深入理解 javascript 之 typeof 和 instanceof —— CSDN](https://blog.csdn.net/mevicky/article/details/50353881)\n- :book: [JavaScript 的 typeof 的用途 —— justjavac](http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html)\n- :book: [一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金](https://juejin.im/post/58358606570c35005e4142bd)\n- :book: [浅谈 instanceof 和 typeof 的实现原理 —— 掘金](https://juejin.im/post/5b0b9b9051882515773ae714)\n- :book: [typeof 和 instanceOf 的区别](https://segmentfault.com/a/1190000000730982)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 6. this, call, apply 和 bind\n\n### 文章\n\n- :book: [Javascript 的 this 用法 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n- :book: [学会 JS 的 this 这一篇就够了，根本不用记 —— 简书](https://www.jianshu.com/p/6b4333e78bf5)\n- :book: [[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n- :book: [this、apply、call、bind —— 掘金](https://juejin.im/post/59bfe84351882531b730bac2)\n- :book: [使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园](https://www.cnblogs.com/tingyu-blog/p/6212392.html)\n- :book: [call、apply 和 bind 的原生实现 —— github](https://github.com/Abiel1024/blog/issues/16)\n\n### 视频\n\n- :tv: [JavaScript 关于 this 关键字解释 —— 爱奇艺](https://www.iqiyi.com/w_19rr1augsd.html)\n- :tv: [JS 关于作用域闭包和 this 的综合面试题 —— 百度视频](http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed)\n- :tv: [js 面向对象闭包数组 12.函数中的 this —— 乐视视频](http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s)\n- :tv: [1.3.10-this 指向及 this 应用 —— 乐视视频](http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s)\n- :tv: [珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂](https://study.163.com/course/introduction/590005.htm)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 7. 函数作用域, 块级作用域和词法作用域\n\n### 文章\n\n- :book: [变量作用域与解构赋值 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault](https://segmentfault.com/a/1190000006671020)\n- :book: [JavaScript 深入之词法作用域和动态作用域 —— 掘金](https://juejin.im/entry/58e70077b123db15eb88dc7e)\n- :book: [深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金](https://juejin.im/post/5afb0ae56fb9a07aa2138425)\n- :book: [What is lexical scope? —— stackoverflow](https://stackoverflow.com/questions/1047454/what-is-lexical-scope)\n- :book: [You Don't Know JS: Scope & Closures —— Kyle Simpson](https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch2.md)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 8. 闭包\n\n### 文章\n\n- :book: [闭包 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- :book: [ECMAScript 闭包（closure）—— w3school](http://www.w3school.com.cn/js/pro_js_functions_closures.asp)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [闭包 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000)\n- :book: [一次性搞懂 JavaScript 闭包 —— 简书](https://www.jianshu.com/p/796e903754f1)\n- :book: [JavaScript 闭包 —— SegmentFault](https://segmentfault.com/a/1190000006875662)\n- :book: [js 匿名自执行函数中闭包的高级使用 —— 掘金](https://juejin.im/entry/5800eb7da22b9d005b36156e)\n- :book: [高效使用 JavaScript 闭包 —— 掘金](https://juejin.im/entry/59df405251882551bf7e58c6)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JavaScript 闭包和闭包面试题 —— 爱奇艺](http://www.iqiyi.com/w_19rr1amael.html)\n- :tv: [js 面向对象闭包数组 11.闭包 —— 乐视](http://www.le.com/ptv/vplay/27478410.html)\n- :tv: [白贺翔\\_函数(闭包) —— 乐视](http://www.le.com/ptv/vplay/30505852.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 9. map, reduce, filter 等高阶函数\n\n### 文章\n\n- :book: [高阶函数 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000)\n- :book: [ES5 中新增的 Array 方法详细说明 —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/)\n- :book: [一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金](https://juejin.im/post/5835808067f3560065ed4ab2)\n- :book: [Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault](https://segmentfault.com/a/1190000012127329)\n- :book: [JavaScript 函数式编程（三） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/15)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 10. 表达式和语句\n\n### 文章\n\n- :book: [js 表达式与语句 —— 博客园](https://www.cnblogs.com/xianshenglu/p/8386918.html)\n- :book: [JS 表达式和语句的区别 —— SegmentFault](https://segmentfault.com/q/1010000004102804)\n- :book: [JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN](https://blog.csdn.net/mett_smith/article/details/78761247)\n- :book: [重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault](https://segmentfault.com/a/1190000004565693)\n- :book: [Expressions versus statements in JavaScript —— Dr. Axel](http://2ality.com/2012/09/expressions-vs-statements.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 11. 变量提升\n\n### 文章\n\n- :book: [JavaScript 变量提升 —— 菜鸟教程](http://www.runoob.com/js/js-hoisting.html)\n- :book: [ES6 变量作用域与提升：变量的生命周期详解 —— 掘金](https://juejin.im/post/59905bea6fb9a03c34192c51)\n- :book: [[翻译] JavaScript Scoping and Hoisting —— SegmentFault](https://segmentfault.com/a/1190000004345355#articleHeader5)\n- :book: [JavaScript Scoping and Hoisting —— Ben Cherry](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 12. Promise\n\n### 文章\n\n- :book: [使用 promises —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n- :book: [Promise —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- :book: [Promise — 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n- :book: [JavaScript Promise：去而复返 —— 司徒正美](https://www.cnblogs.com/rubylouvre/p/3495286.html)\n- :book: [(上面的原文)JavaScript Promise：简介 —— Web Fundamentals](https://developers.google.com/web/fundamentals/primers/promises#_1)\n- :book: [1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac](https://segmentfault.com/a/1190000011813934)\n- :book: [JavaScript Promise 迷你书（中文版）](https://juejin.im/entry/56499ae160b2d1404c4f8834)\n- :book: [JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园](https://www.cnblogs.com/yunfeifei/p/4453690.html)\n\n### 视频\n\n- :tv: [Promise 入门 —— 慕课网](https://www.imooc.com/learn/949)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 13. 立即执行函数, 模块化, 命名空间\n\n### 文章\n\n- :book: [Javascript 模块化编程（一）：模块的写法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n- :book: [javascript 模块化编程-详解立即执行函数表达式 —— 简书](https://www.jianshu.com/p/4dbf4a4c8ebb)\n- :book: [Javascript 的匿名函数与自执行 —— 掘金](https://juejin.im/entry/57fee360a22b9d005b1d9ae3)\n- :book: [前端模块化——技术选型 —— SegmentFault](https://segmentfault.com/a/1190000006966358)\n- :book: [谈谈 Js 前端模块化规范 —— SegmentFault](https://segmentfault.com/a/1190000015991869#articleHeader8)\n- :book: [函数声明与函数表达式的区别 —— 伯乐在线](http://web.jobbole.com/87534/)\n\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 14. 递归\n\n### 文章\n\n- :book: [求解释 js 递归 —— SegmentFault](https://segmentfault.com/q/1010000003942347)\n- :book: [JavaScript 中的递归 —— 掘金](https://juejin.im/post/5948c0d8fe88c2006a939e2a)\n- :book: [递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c1d91d6fb9a00a53275f79)\n- :book: [递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c87fb46fb9a00a437b1a2e)\n- :book: [尾调用和尾递归 —— 掘金](https://juejin.im/post/5acdd7486fb9a028ca53547c)\n- :book: [几个经典递归问题用 js 实现 —— CSDN](https://blog.csdn.net/qianqianstd/article/details/75807462)\n- :book: [递归函数的几个例子 —— CSDN](https://blog.csdn.net/x_i_xw/article/details/72026868)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 15. 算法\n\n### 文章\n\n- :book: [十大经典排序算法总结（JavaScript 描述） —— 掘金](https://juejin.im/post/57dcd394a22b9d00610c5ec8)\n- :book: [在 JavaScript 中学习数据结构与算法 —— 掘金](https://juejin.im/post/594dfe795188250d725a220a#comment)\n- :book: [JS 中可能用得到的全部的排序算法 —— 掘金](https://juejin.im/post/58c9d5fb1b69e6006b686bce)\n- :book: [JS 家的排序算法 —— 简书](https://www.jianshu.com/p/1b4068ccd505)\n- :book: [前端常见算法的 JS 实现 —— SegmentFault](https://segmentfault.com/a/1190000008593715)\n- :book: [前端面试中的常见的算法问题 ——蒲小花的博客](https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/)\n\n### 视频\n\n- :tv: [Javascript 实现二叉树算法 —— 慕课网](https://www.imooc.com/learn/888)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 16. 数据结构\n\n### 文章\n\n- :book: [来我们浅谈一下 js 的数据结构 —— 简书](https://www.jianshu.com/p/5e0e8d183102)\n- :book: [JavaScript 中的算法与数据结构 —— 简书](https://www.jianshu.com/nb/16835496)\n- :book: [学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客](http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html)\n- :book: [js 中基础数据结构数组去重问题 —— 掘金](https://juejin.im/entry/586effe0da2f600053d85a9a)\n\n### 视频\n\n- :tv: :tv: [JavaScript 数据结构-运算符 —— 乐视](http://www.le.com/ptv/vplay/27606964.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 17. 消息队列和事件循环\n\n### 文章\n\n- :book: [并发模型与事件循环 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n- :book: [JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n- :book: [深入理解 JavaScript 事件循环 —— 博客园](https://www.cnblogs.com/dong-xu/p/7000163.html)\n- :book: [深入浅出 Javascript 事件循环机制 —— 知乎](https://zhuanlan.zhihu.com/p/26229293)\n- :book: [JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault](https://segmentfault.com/a/1190000014940904#articleHeader7)\n- :book: [JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault](https://segmentfault.com/a/1190000004322358)\n- :book: [从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金](https://juejin.im/post/5a6547d0f265da3e283a1df7)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 18. setTimeout, setInterval 和 requestAnimationFrame\n\n### 文章\n\n- :book: [Window setTimeout() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-settimeout.html)\n- :book: [Window setInterval() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-setinterval.html)\n- :book: [关于 setTimeout —— 掘金](https://juejin.im/post/5aa4c47af265da239866e236)\n- :book: [你不知道的 Javascript：有趣的 setTimeout —— 掘金](https://juejin.im/post/5a77f8ce5188257a6d635d76)\n- :book: [原来你是这样的 setTimeout —— 掘金](https://juejin.im/entry/5861ebf01b69e6006ce61d38)\n- :book: [setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault](https://segmentfault.com/q/1010000005989491)\n- book: [window.requestAnimationFrame —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n- :book: [requestAnimationFrame 知多少？ —— 博客园](http://www.cnblogs.com/onepixel/p/7078617.html)\n- :book: [CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/)\n- :book: [「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault](https://segmentfault.com/a/1190000014661035)\n- :book: [翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault](https://segmentfault.com/a/1190000000386368)\n- :book: [阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault](https://segmentfault.com/q/1010000013909430)\n\n### 视频\n\n- :tv: [setTimeout 和 setInterval —— 优酷](http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 19. 继承, 多态和代码复用\n\n### 文章\n\n- :book: [JS 面向对象编程之：封装、继承、多态 —— 博客园](https://www.cnblogs.com/Leo_wl/p/5734794.html)\n- :book: [Javascript 的继承与多态 —— 简书](https://www.jianshu.com/p/5cb692658704)\n- :book: [js:面向对象编程，带你认识封装、继承和多态 —— 掘金](https://juejin.im/post/59396c96fe88c2006afc2707)\n- :book: [JavaScript 中的“多继承” —— 掘金](https://zhuanlan.zhihu.com/p/34693209)\n- :book: [代码复用模式 —— github](https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown)\n- :book: [深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔](http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html)\n- :book: [深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔](https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 20. 按位操作符, 类数组对象和类型化数组\n\n### 文章\n\n- :book: [按位操作符 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)\n- :book: [类数组对象 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays)\n- :book: [类型化数组 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n- :book: [JavaScript ArrayBuffer 浅析 —— 博客园](https://www.cnblogs.com/gradolabs/p/4762134.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 21. DOM 树和渲染过程\n\n### 文章\n\n- :book: [如何创建一个 DOM 树 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree)\n- :book: [HTML DOM 节点 —— W3school](http://www.w3school.com.cn/htmldom/dom_nodes.asp)\n- :book: [DOM 概述 —— 阮一峰](http://javascript.ruanyifeng.com/dom/node.html)\n- :book: [《JavaScript 闯关记》之 DOM（上）—— 掘金](https://juejin.im/post/583cbbfa61ff4b006ccc41fe)\n- :book: [《JavaScript 闯关记》之 DOM（下）—— 掘金](https://juejin.im/post/583cbc4961ff4b006ccc44fb)\n- :book: [掌握 DOM 操作 —— 掘金](https://juejin.im/entry/58314efd8ac2470061bb30fd)\n- :book: [操作 DOM —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000)\n- :book: [原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金](https://juejin.im/post/59c60691518825396f4f71a1)\n\n### 视频\n\n- :tv: [DOM 探索之基础详解篇 —— 慕课网](https://www.imooc.com/learn/488)\n- :tv: [DOM 事件探秘 —— 慕课网](https://www.imooc.com/learn/138)\n- :tv: [jQuery 基础(二)DOM 篇 —— 慕课网](https://www.imooc.com/learn/530)\n- :tv: [JS 操作 DOM 对象属性和方法 —— 爱奇艺](http://www.iqiyi.com/w_19rr19s08l.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 22. new 与构造函数, instanceof 与实例\n\n### 文章\n\n- :book: [构造函数与 new 命令 —— 阮一峰](http://javascript.ruanyifeng.com/oop/basic.html)\n- :book: [Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n- :book: [完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN](https://blog.csdn.net/SpicyBoiledFish/article/details/71123162)\n- :book: [JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网](http://www.php.cn/js-tutorial-376246.html)\n- :book: [构造函数、实例、原型、原型链之间的关系 —— CSDN](https://blog.csdn.net/yin_991/article/details/80954453)\n- :book: [深入理解 JS—instanceof 和原型链 —— CSDN](https://blog.csdn.net/cecilia620/article/details/71158048)\n- :book: [前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书](https://www.jianshu.com/p/15ac7393bc1f)\n- :book: [js 用 new 实例化对象与直接调用的 this 的区别 —— 简书](https://www.jianshu.com/p/60ffc4831bff)\n- :book: [JavaScript 并非所有的东西都是对象 —— justjavac](http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html)\n- :book: [JavaScript instanceof 运算符深入剖析 —— IBM](https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/)\n\n### 视频\n\n- :tv: [改良版的构造函数 —— 乐视](http://www.le.com/ptv/vplay/27766889.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 23. 原型继承与原型链\n\n### 文章\n\n- :book: [继承与原型链 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n- :book: [构造函数、原型与原型链 —— github](https://github.com/bigdots/blog/issues/1)\n- :book: [原型及原型链 —— github(1269 Star)](https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype)\n- :book: [理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault](https://segmentfault.com/a/1190000004282206)\n- :book: [JavaScript：继承和原型链(译) —— justjavac](http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html)\n- :book: [三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园](http://www.cnblogs.com/shuiyi/p/5305435.html)\n- :book: [一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN](https://blog.csdn.net/the__apollo/article/details/76774698)\n- :book: [JS 高级--原型链(一看就懂，但 18 岁以下请绕道) —— CSDN](https://blog.csdn.net/xiaotao_css/article/details/72782416)\n- :book: [原型继承 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n- :book: [JS 原型链与继承别再被问倒了 —— 掘金](https://juejin.im/post/58f94c9bb123db411953691b)\n- :book: [征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金](https://juejin.im/entry/5885db221b69e600592253e7)\n- :book: [JavaScript 深入之从原型到原型链 —— 冴羽](https://github.com/mqyqingfeng/Blog/issues/2)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JS 高级-07-原型链继承 —— 乐视](http://www.le.com/ptv/vplay/27552753.html)\n- :tv: [JS 原型对象和原型链简介 —— 腾讯视频](https://v.qq.com/x/page/b0511nwa7d3.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 24. Object.create 和 Object.assign\n\n### 文章\n\n- :book: [Object.create —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n- :book: [Object.assign —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n- :book: [Object.create vs Object.assign —— 慕课网手记](https://www.imooc.com/article/17591)\n- :book: [JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN](https://blog.csdn.net/DeepLies/article/details/52915143)\n- :book: [es6 中 object.create()和 object.assign() —— 风信子博客](http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/)\n- :book: [Object-Assign-Deep —— github](https://github.com/saikojosh/Object-Assign-Deep)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 25. 工厂函数和类\n\n### 文章\n\n- :book: [类 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes)\n- :book: [类和实例 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000)\n- :book: [Javascript 定义类（class）的三种方法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\n- :book: [【译】ES6 的工厂函数 —— 掘金](https://juejin.im/post/59c8c8756fb9a00a681ae5bd)\n- :book: [JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金](https://juejin.im/entry/587992c961ff4b0065edf1ff)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 26. 设计模式\n\n### 文章\n\n- :book: [JavaScript 设计模式 —— 掘金](https://juejin.im/post/59df4f74f265da430f311909)\n- :book: [学用 JavaScript 设计模式 —— 极客学院](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)\n- :book: [[面试专题]JS 设计模式 —— SegmentFault](https://segmentfault.com/a/1190000010914032)\n- :book: [JavaScript Patterns 中译本 —— github](https://github.com/lxj/javascript.patterns)\n\n### 视频\n\n- :tv: [HTML5 课程大纲 2-11JS 设计模式](https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 27. Memoization\n\n### 文章\n\n- :book: [JavaScript Memoization —— 司徒正美](https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html)\n- :book: [memoization 提升递归效率 —— 博客园](https://www.cnblogs.com/yingshuizy/p/4517102.html)\n- :book: [如何提升 JavaScript 的递归效率 —— 51CTO](http://developer.51cto.com/art/201010/231513.htm)\n- :book: [JavaScript 高级技巧 Memoization —— SegmentFaut](https://segmentfault.com/a/1190000016703106)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 28. 纯函数, 函数副作用和状态变化\n\n### 文章\n\n- :book: [纯函数(Pure Function) —— React.js 小书](http://huziketang.mangojuice.top/books/react/lesson32)\n- :book: [JavaScript Functional Programming：纯函数 —— 宁皓网](https://ninghao.net/blog/4634)\n- :book: [js 函数的副作用分析 —— 脚本之家](https://www.jb51.net/article/28079.htm)\n- :book: [如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金](https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com)\n- :book: [原生 JavaScript 实现 state 状态管理系统 —— 博客园](http://www.cnblogs.com/zhangycun/p/9403335.html)\n- :book: [JavaScript 函数式编程 —— @BuptStEve](https://github.com/BuptStEve/blog/issues/10)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 29. 耗性能操作和时间复杂度\n\n### 文章\n\n- :book: [时间复杂度 O(log n) 意味着什么？ —— 掘金](https://juejin.im/entry/593f56528d6d810058a355f4)\n- :book: [算法的时间复杂度和空间复杂度 —— 掘金](https://juejin.im/entry/5a49f7d36fb9a0450a67b269)\n- :book: [算法（一）时间复杂度 —— 掘金](https://juejin.im/post/58d15f1044d90400691834d4)\n- :book: [Big O Search Algorithms in JavaScript —— Bradley Braithwaite](http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n- :book: [Time Complexity Analysis in JavaScript — Jennifer Bland](https://www.jenniferbland.com/time-complexity-analysis-in-javascript/)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 30. JavaScript 引擎\n\n### 文章\n\n- :book: [javascript 引擎 —— 百度百科](https://baike.baidu.com/item/javascript引擎/5356108)\n- :book: [V8(JavaScript 引擎) —— 百度百科](https://baike.baidu.com/item/V8/6178125)\n- :book: [图解搞懂 JavaScript 引擎 Event Loop —— 掘金](https://juejin.im/post/5a6309f76fb9a01cab2858b1)3\n- :book: [V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac](https://segmentfault.com/a/1190000010819020)\n- :book: [10 分钟理解 JS 引擎的执行机制 —— SegmentFaut](https://segmentfault.com/a/1190000012806637)\n- :book: [V8 javascript 引擎 —— 博客园](https://www.cnblogs.com/weirdoQi/p/6609811.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 31. 二进制, 十六进制, 十进制, 科学记数法\n\n### 文章\n\n- :book: [二、八、十、十六进制转换(图解篇) —— 博客园](http://www.cnblogs.com/gaizai/p/4233780.html)\n- :book: [JavaScript 读写二进制数据 —— 掘金](https://juejin.im/post/5b93dadaf265da0a857a58a3)\n\n### 视频\n\n- :tv: [二进制、十进制、十六进制互相转化很难吗？ —— 百度视频](http://baishi.baidu.com/watch/7873060963471478456.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 32. 偏函数, 柯里化, Compose 和 Pipe\n\n### 文章\n\n- :book: [Javascript 函数式编程之偏函数 —— CSDN](https://blog.csdn.net/qq_42129063/article/details/81874314)\n- :book: [JavaScript 专题之偏函数 —— SegmentFault](https://segmentfault.com/a/1190000010686144)\n- :book: [柯里化和偏函数有什么区别？ —— SegmentFault](https://segmentfault.com/q/1010000008626058)\n- :book: [Javascript 偏函数与柯里化 —— CSDN](https://blog.csdn.net/neweastsun/article/details/75947785)\n- :book: [柯里化(curry) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html)\n- :book: [代码组合(compose) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n- :book: [关于 javascript 函数式编程中 compose 的实现 —— SegmentFault](https://segmentfault.com/a/1190000008394749)\n- :book: [实现 compose 的五种思路 —— SegmentFault](https://segmentfault.com/a/1190000011447164)\n- :book: [JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault](https://segmentfault.com/a/1190000015102804)\n- :book: [JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金](https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment)\n- :book: [JavaScript 函数式编程（二） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/11)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 33. 代码整洁之道\n\n### 文章\n\n- :book: [[译] JavaScript 代码整洁之道 —— 边城](https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html)\n- :book: [Javascript 编程风格 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n- :book: [重构 - 代码整洁之道 —— 掘金](https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9)\n- :book: [让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金](https://juejin.im/post/5a7d71836fb9a063435ecf51)\n- :book: [Web 前端：11 个让你代码整洁的原则 —— 伯乐在线](http://blog.jobbole.com/23617/)\n- :book: [Clean Code concepts adapted for JavaScript —— ryanmcdermott](https://github.com/ryanmcdermott/clean-code-javascript)\n\n<br>\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n","source":"_posts/33_js_concepts.md","raw":"---\ntitle: JavaScript开发者应懂的33个概念\ncategories:\n    - 03 JavaScript # 一级分类\ntags:\ndate: 2019-07-01\ndescription: 基本都是面试考点了\ntoc: 1\ntop: 0\n---\n\n## 简介\n[原文链接](https://github.com/stephentian/33-js-concepts)\n> 本篇文章是参照 @leonardomso 创立，英文版项目地址在[这里](https://github.com/leonardomso/33-js-concepts)。\n\n---\n\n## 目录\n\n1. **[调用堆栈](#1-调用堆栈)**\n2. **[原始类型](#2-原始类型)**\n3. **[值类型和引用类型](#3-值类型和引用类型)**\n4. **[隐式, 显式, 名义和鸭子类型](#4-隐式-显式-名义和鸭子类型)**\n5. **[== 与 ===, typeof 与 instanceof](#5--vs--typeof-vs-instanceof)**\n6. **[this, call, apply 和 bind](#6-this-call-apply-和-bind)**\n7. **[函数作用域, 块级作用域和词法作用域](#7-函数作用域-块级作用域和词法作用域)**\n8. **[闭包](#8-闭包)**\n9. **[map, reduce, filter 等高阶函数](#9-map-reduce-filter-等高阶函数)**\n10. **[表达式和语句](#10-表达式和语句)**\n11. **[变量提升](#11-变量提升)**\n12. **[Promise](#12-promise)**\n13. **[立即执行函数, 模块化, 命名空间](#13-立即执行函数-模块化-命名空间)**\n14. **[递归](#14-递归)**\n15. **[算法](#15-算法)**\n16. **[数据结构](#16-数据结构)**\n17. **[消息队列和事件循环](#17-消息队列和事件循环)**\n18. **[setTimeout, setInterval 和 requestAnimationFrame](#18-settimeout-setinterval-和-requestanimationframe)**\n19. **[继承, 多态和代码复用](#19-继承-多态和代码复用)**\n20. **[按位操作符, 类数组对象和类型化数组](#20-按位操作符-类数组对象和类型化数组)**\n21. **[DOM 树和渲染过程](#21-dom-树和渲染过程)**\n22. **[new 与构造函数, instanceof 与实例](#22-new-与构造函数-instanceof-与实例)**\n23. **[原型继承与原型链](#23-原型继承与原型链)**\n24. **[Object.create 和 Object.assign](#24-objectcreate-和-objectassign)**\n25. **[工厂函数和类](#25-工厂函数和类)**\n26. **[设计模式](#26-设计模式)**\n27. **[Memoization](#27-memoization)**\n28. **[纯函数, 函数副作用和状态变化](#28-纯函数-函数副作用和状态变化)**\n29. **[耗性能操作和时间复杂度](#29-耗性能操作和时间复杂度)**\n30. **[JavaScript 引擎](#30-javascript-引擎)**\n31. **[二进制, 十进制, 十六进制, 科学记数法](#31-二进制-十六进制-十进制-科学记数法)**\n32. **[偏函数, 柯里化, Compose 和 Pipe](#32-偏函数-柯里化-compose-和-pipe)**\n33. **[代码整洁之道](#33-代码整洁之道)**\n\n---\n\n## 1. 调用堆栈\n\n### 文章\n\n- :book: [Call Stack — MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- :book: [[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金](https://juejin.im/post/5a05b4576fb9a04519690d42)\n- :book: [[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金](https://juejin.im/post/5ba32171f265da0ab719a6d7)\n- :book: [这一次，彻底弄懂 JavaScript 执行机制 —— 掘金](https://juejin.im/post/59e85eebf265da430d571f89)\n- :book: [解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国](https://www.oschina.net/translate/how-does-javascript-actually-work-part-1)\n- :book: [Tasks, microtasks, queues and schedules —— Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n- :book: [Tasks, microtasks, queues and schedules（译） —— 掘金](https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff)\n\n### 视频\n\n- :tv: [What is the event loop anyway? —— 腾讯视频(英文字幕)](https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser)\n- :tv: [Understanding The JavaScript Call Stack, Event Queue, Event Table, & Event Loop —— Bilibili](https://www.bilibili.com/video/av33824933/)\n- :tv: [JS 中的变量提升、堆栈内存及闭包详解 —— Acfun](http://www.acfun.cn/v/ac4495641)\n- :tv: [事件循环模型 —— PHP 中文网](http://www.php.cn/code/21194.html)\n- :tv: [Javascript: the Call Stack explained — Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n- :tv: [The JS Call Stack Explained In 9 Minutes — Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n- :tv: [JavaScript Execution Stack — Codecademy](https://www.youtube.com/watch?v=jT0USJeNFEA)\n- :tv: [What is the Call Stack? — Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n- :tv: [The Call Stack — Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n- :tv: [Understanding JavaScript Execution — Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n- :tv: [Call Stack & Event Loop — movies com](https://www.youtube.com/watch?v=mk0lu9MKBto)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 2. 原始类型\n\n### 文章\n\n- :book: [原始数据 —— MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)\n- :book: [[译]JavaScript 是怎样编码数字的 —— SegmentFault](https://segmentfault.com/a/1190000017090272)\n- :book: [每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜](https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/)\n- :book: [JavaScript 标准参考教程(基本语法之数值) —— 阮一峰](https://wangdoc.com/javascript/types/number.html)\n- :book: [The Secret Life of JavaScript Primitives —— Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n\n### 视频\n\n- :tv: [javascript 六种数据类型 —— 慕课网](https://www.imooc.com/video/5674)\n- :tv: [javascript 视频教程(数据类型) —— PHP 中文网](http://www.php.cn/code/5808.html)\n- :tv: [JavaScript Reference vs Primitive Types — Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- :tv: [JavaScript Primitive Types — Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n- :tv: [Javascript Primitive and Reference Types — Baljeet Singh](https://www.youtube.com/watch?v=F7YbhKbpFic)\n- :tv: [Value Types and Reference Types in JavaScript — Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n- :tv: [JavaScript Primitive Data Types — Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n- :tv: [Everything you never wanted to know about JavaScript numbers — Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 3. 值类型和引用类型\n\n### 文章\n\n- :book: [ECMAScript 引用类型 —— W3school](http://www.w3school.com.cn/js/pro_js_referencetypes.asp)\n- :book: [js 中的值类型和引用类型的区别 —— 博客园](https://www.cnblogs.com/leiting/p/8081413.html)\n- :book: [JavaScript 的值传递和引用传递 —— FunDebug](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n- :book: [Primitive Types & Reference Types in JavaScript —— Bran van der Meer](https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm)\n- :book: [JavaScript: Passing by Value or by Reference —— CSDN](https://blog.csdn.net/xiaojia_boke/article/details/54906509)\n- :book: [js 值引用和值复制 —— SegmentFault](https://segmentfault.com/a/1190000015411195)\n- :book: [js- 引用和复制(传值和传址) —— CSDN](https://blog.csdn.net/zzzaquarius/article/details/4902235)\n\n### 视频\n\n- :tv: [Javascript Pass by Value vs Pass by Reference — techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n- :tv: [JavaScript Value vs Reference Types — Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 4. 隐式, 显式, 名义和鸭子类型\n\n### 文章\n\n- :book: [ECMAScript 类型转换 —— W3school](http://www.w3school.com.cn/js/pro_js_typeconversion.asp)\n- :book: [JavaScript 的怪癖 1：隐式类型转换 —— justjavac](http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html)\n- :book: [JavaScript 运算符规则与隐式类型转换详解 —— 掘金](https://juejin.im/post/59ad2585f265da246a20e026)\n- :book: [聊一聊 JS 中的隐式类型转换 —— SegmentFault](https://segmentfault.com/a/1190000004482388)\n- :book: [有趣的 JavaScript 隐式类型转换 —— 博客园](https://www.cnblogs.com/yugege/p/5277883.html)\n- :book: [JavaScript 显式类型转换与隐式类型转换 —— CSDN](https://blog.csdn.net/yangjvn/article/details/48284163)\n- :book: [你不知道的 JavaScript（中卷）强制类型转换 —— 简书](https://www.jianshu.com/p/777a89b4ed9a)\n- :book: [你懂 JavaScript 嗎？#8 強制轉型 —— cythilya](https://ithelp.ithome.com.tw/articles/10201512)\n- :book: [动态类型语言和鸭子类型 —— 曾探](http://book.51cto.com/art/201505/475153.htm)\n- :book: [Nominal & Structural Typing —— flow](https://flow.org/en/docs/lang/nominal-structural/)\n- :book: [What exactly is Type Coercion in Javascript? —— stackoverflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n- :book: [You Don't Know JS: Types & Grammar —— github](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch4.md)\n\n### 视频\n\n- :tv: [javascript 隐式转换 —— 慕课网](https://www.imooc.com/video/5675)\n- :tv: [Javascript 基础加强-类型转换 —— 黑马程序员](http://www.le.com/ptv/vplay/27767009.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n## 5. == vs ===, typeof vs instanceof\n\n### 文章\n\n- :book: [JavaScript 中的相等性判断 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- :book: [js 中 == 和 === 的区别 —— 掘金](https://juejin.im/entry/584918612f301e005716add6)\n- :book: [== vs === in Javascript —— CSDN](https://blog.csdn.net/w97531/article/details/82255225)\n- :book: [深入理解 javascript 之 typeof 和 instanceof —— CSDN](https://blog.csdn.net/mevicky/article/details/50353881)\n- :book: [JavaScript 的 typeof 的用途 —— justjavac](http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html)\n- :book: [一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金](https://juejin.im/post/58358606570c35005e4142bd)\n- :book: [浅谈 instanceof 和 typeof 的实现原理 —— 掘金](https://juejin.im/post/5b0b9b9051882515773ae714)\n- :book: [typeof 和 instanceOf 的区别](https://segmentfault.com/a/1190000000730982)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 6. this, call, apply 和 bind\n\n### 文章\n\n- :book: [Javascript 的 this 用法 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n- :book: [学会 JS 的 this 这一篇就够了，根本不用记 —— 简书](https://www.jianshu.com/p/6b4333e78bf5)\n- :book: [[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n- :book: [this、apply、call、bind —— 掘金](https://juejin.im/post/59bfe84351882531b730bac2)\n- :book: [使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园](https://www.cnblogs.com/tingyu-blog/p/6212392.html)\n- :book: [call、apply 和 bind 的原生实现 —— github](https://github.com/Abiel1024/blog/issues/16)\n\n### 视频\n\n- :tv: [JavaScript 关于 this 关键字解释 —— 爱奇艺](https://www.iqiyi.com/w_19rr1augsd.html)\n- :tv: [JS 关于作用域闭包和 this 的综合面试题 —— 百度视频](http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed)\n- :tv: [js 面向对象闭包数组 12.函数中的 this —— 乐视视频](http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s)\n- :tv: [1.3.10-this 指向及 this 应用 —— 乐视视频](http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s)\n- :tv: [珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂](https://study.163.com/course/introduction/590005.htm)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 7. 函数作用域, 块级作用域和词法作用域\n\n### 文章\n\n- :book: [变量作用域与解构赋值 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault](https://segmentfault.com/a/1190000006671020)\n- :book: [JavaScript 深入之词法作用域和动态作用域 —— 掘金](https://juejin.im/entry/58e70077b123db15eb88dc7e)\n- :book: [深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金](https://juejin.im/post/5afb0ae56fb9a07aa2138425)\n- :book: [What is lexical scope? —— stackoverflow](https://stackoverflow.com/questions/1047454/what-is-lexical-scope)\n- :book: [You Don't Know JS: Scope & Closures —— Kyle Simpson](https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch2.md)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 8. 闭包\n\n### 文章\n\n- :book: [闭包 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- :book: [ECMAScript 闭包（closure）—— w3school](http://www.w3school.com.cn/js/pro_js_functions_closures.asp)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [闭包 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000)\n- :book: [一次性搞懂 JavaScript 闭包 —— 简书](https://www.jianshu.com/p/796e903754f1)\n- :book: [JavaScript 闭包 —— SegmentFault](https://segmentfault.com/a/1190000006875662)\n- :book: [js 匿名自执行函数中闭包的高级使用 —— 掘金](https://juejin.im/entry/5800eb7da22b9d005b36156e)\n- :book: [高效使用 JavaScript 闭包 —— 掘金](https://juejin.im/entry/59df405251882551bf7e58c6)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JavaScript 闭包和闭包面试题 —— 爱奇艺](http://www.iqiyi.com/w_19rr1amael.html)\n- :tv: [js 面向对象闭包数组 11.闭包 —— 乐视](http://www.le.com/ptv/vplay/27478410.html)\n- :tv: [白贺翔\\_函数(闭包) —— 乐视](http://www.le.com/ptv/vplay/30505852.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 9. map, reduce, filter 等高阶函数\n\n### 文章\n\n- :book: [高阶函数 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000)\n- :book: [ES5 中新增的 Array 方法详细说明 —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/)\n- :book: [一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金](https://juejin.im/post/5835808067f3560065ed4ab2)\n- :book: [Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault](https://segmentfault.com/a/1190000012127329)\n- :book: [JavaScript 函数式编程（三） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/15)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 10. 表达式和语句\n\n### 文章\n\n- :book: [js 表达式与语句 —— 博客园](https://www.cnblogs.com/xianshenglu/p/8386918.html)\n- :book: [JS 表达式和语句的区别 —— SegmentFault](https://segmentfault.com/q/1010000004102804)\n- :book: [JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN](https://blog.csdn.net/mett_smith/article/details/78761247)\n- :book: [重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault](https://segmentfault.com/a/1190000004565693)\n- :book: [Expressions versus statements in JavaScript —— Dr. Axel](http://2ality.com/2012/09/expressions-vs-statements.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 11. 变量提升\n\n### 文章\n\n- :book: [JavaScript 变量提升 —— 菜鸟教程](http://www.runoob.com/js/js-hoisting.html)\n- :book: [ES6 变量作用域与提升：变量的生命周期详解 —— 掘金](https://juejin.im/post/59905bea6fb9a03c34192c51)\n- :book: [[翻译] JavaScript Scoping and Hoisting —— SegmentFault](https://segmentfault.com/a/1190000004345355#articleHeader5)\n- :book: [JavaScript Scoping and Hoisting —— Ben Cherry](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 12. Promise\n\n### 文章\n\n- :book: [使用 promises —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n- :book: [Promise —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- :book: [Promise — 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n- :book: [JavaScript Promise：去而复返 —— 司徒正美](https://www.cnblogs.com/rubylouvre/p/3495286.html)\n- :book: [(上面的原文)JavaScript Promise：简介 —— Web Fundamentals](https://developers.google.com/web/fundamentals/primers/promises#_1)\n- :book: [1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac](https://segmentfault.com/a/1190000011813934)\n- :book: [JavaScript Promise 迷你书（中文版）](https://juejin.im/entry/56499ae160b2d1404c4f8834)\n- :book: [JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园](https://www.cnblogs.com/yunfeifei/p/4453690.html)\n\n### 视频\n\n- :tv: [Promise 入门 —— 慕课网](https://www.imooc.com/learn/949)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 13. 立即执行函数, 模块化, 命名空间\n\n### 文章\n\n- :book: [Javascript 模块化编程（一）：模块的写法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n- :book: [javascript 模块化编程-详解立即执行函数表达式 —— 简书](https://www.jianshu.com/p/4dbf4a4c8ebb)\n- :book: [Javascript 的匿名函数与自执行 —— 掘金](https://juejin.im/entry/57fee360a22b9d005b1d9ae3)\n- :book: [前端模块化——技术选型 —— SegmentFault](https://segmentfault.com/a/1190000006966358)\n- :book: [谈谈 Js 前端模块化规范 —— SegmentFault](https://segmentfault.com/a/1190000015991869#articleHeader8)\n- :book: [函数声明与函数表达式的区别 —— 伯乐在线](http://web.jobbole.com/87534/)\n\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 14. 递归\n\n### 文章\n\n- :book: [求解释 js 递归 —— SegmentFault](https://segmentfault.com/q/1010000003942347)\n- :book: [JavaScript 中的递归 —— 掘金](https://juejin.im/post/5948c0d8fe88c2006a939e2a)\n- :book: [递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c1d91d6fb9a00a53275f79)\n- :book: [递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c87fb46fb9a00a437b1a2e)\n- :book: [尾调用和尾递归 —— 掘金](https://juejin.im/post/5acdd7486fb9a028ca53547c)\n- :book: [几个经典递归问题用 js 实现 —— CSDN](https://blog.csdn.net/qianqianstd/article/details/75807462)\n- :book: [递归函数的几个例子 —— CSDN](https://blog.csdn.net/x_i_xw/article/details/72026868)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 15. 算法\n\n### 文章\n\n- :book: [十大经典排序算法总结（JavaScript 描述） —— 掘金](https://juejin.im/post/57dcd394a22b9d00610c5ec8)\n- :book: [在 JavaScript 中学习数据结构与算法 —— 掘金](https://juejin.im/post/594dfe795188250d725a220a#comment)\n- :book: [JS 中可能用得到的全部的排序算法 —— 掘金](https://juejin.im/post/58c9d5fb1b69e6006b686bce)\n- :book: [JS 家的排序算法 —— 简书](https://www.jianshu.com/p/1b4068ccd505)\n- :book: [前端常见算法的 JS 实现 —— SegmentFault](https://segmentfault.com/a/1190000008593715)\n- :book: [前端面试中的常见的算法问题 ——蒲小花的博客](https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/)\n\n### 视频\n\n- :tv: [Javascript 实现二叉树算法 —— 慕课网](https://www.imooc.com/learn/888)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 16. 数据结构\n\n### 文章\n\n- :book: [来我们浅谈一下 js 的数据结构 —— 简书](https://www.jianshu.com/p/5e0e8d183102)\n- :book: [JavaScript 中的算法与数据结构 —— 简书](https://www.jianshu.com/nb/16835496)\n- :book: [学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客](http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html)\n- :book: [js 中基础数据结构数组去重问题 —— 掘金](https://juejin.im/entry/586effe0da2f600053d85a9a)\n\n### 视频\n\n- :tv: :tv: [JavaScript 数据结构-运算符 —— 乐视](http://www.le.com/ptv/vplay/27606964.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 17. 消息队列和事件循环\n\n### 文章\n\n- :book: [并发模型与事件循环 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n- :book: [JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n- :book: [深入理解 JavaScript 事件循环 —— 博客园](https://www.cnblogs.com/dong-xu/p/7000163.html)\n- :book: [深入浅出 Javascript 事件循环机制 —— 知乎](https://zhuanlan.zhihu.com/p/26229293)\n- :book: [JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault](https://segmentfault.com/a/1190000014940904#articleHeader7)\n- :book: [JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault](https://segmentfault.com/a/1190000004322358)\n- :book: [从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金](https://juejin.im/post/5a6547d0f265da3e283a1df7)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 18. setTimeout, setInterval 和 requestAnimationFrame\n\n### 文章\n\n- :book: [Window setTimeout() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-settimeout.html)\n- :book: [Window setInterval() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-setinterval.html)\n- :book: [关于 setTimeout —— 掘金](https://juejin.im/post/5aa4c47af265da239866e236)\n- :book: [你不知道的 Javascript：有趣的 setTimeout —— 掘金](https://juejin.im/post/5a77f8ce5188257a6d635d76)\n- :book: [原来你是这样的 setTimeout —— 掘金](https://juejin.im/entry/5861ebf01b69e6006ce61d38)\n- :book: [setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault](https://segmentfault.com/q/1010000005989491)\n- book: [window.requestAnimationFrame —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n- :book: [requestAnimationFrame 知多少？ —— 博客园](http://www.cnblogs.com/onepixel/p/7078617.html)\n- :book: [CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/)\n- :book: [「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault](https://segmentfault.com/a/1190000014661035)\n- :book: [翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault](https://segmentfault.com/a/1190000000386368)\n- :book: [阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault](https://segmentfault.com/q/1010000013909430)\n\n### 视频\n\n- :tv: [setTimeout 和 setInterval —— 优酷](http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 19. 继承, 多态和代码复用\n\n### 文章\n\n- :book: [JS 面向对象编程之：封装、继承、多态 —— 博客园](https://www.cnblogs.com/Leo_wl/p/5734794.html)\n- :book: [Javascript 的继承与多态 —— 简书](https://www.jianshu.com/p/5cb692658704)\n- :book: [js:面向对象编程，带你认识封装、继承和多态 —— 掘金](https://juejin.im/post/59396c96fe88c2006afc2707)\n- :book: [JavaScript 中的“多继承” —— 掘金](https://zhuanlan.zhihu.com/p/34693209)\n- :book: [代码复用模式 —— github](https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown)\n- :book: [深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔](http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html)\n- :book: [深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔](https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 20. 按位操作符, 类数组对象和类型化数组\n\n### 文章\n\n- :book: [按位操作符 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)\n- :book: [类数组对象 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays)\n- :book: [类型化数组 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n- :book: [JavaScript ArrayBuffer 浅析 —— 博客园](https://www.cnblogs.com/gradolabs/p/4762134.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 21. DOM 树和渲染过程\n\n### 文章\n\n- :book: [如何创建一个 DOM 树 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree)\n- :book: [HTML DOM 节点 —— W3school](http://www.w3school.com.cn/htmldom/dom_nodes.asp)\n- :book: [DOM 概述 —— 阮一峰](http://javascript.ruanyifeng.com/dom/node.html)\n- :book: [《JavaScript 闯关记》之 DOM（上）—— 掘金](https://juejin.im/post/583cbbfa61ff4b006ccc41fe)\n- :book: [《JavaScript 闯关记》之 DOM（下）—— 掘金](https://juejin.im/post/583cbc4961ff4b006ccc44fb)\n- :book: [掌握 DOM 操作 —— 掘金](https://juejin.im/entry/58314efd8ac2470061bb30fd)\n- :book: [操作 DOM —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000)\n- :book: [原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金](https://juejin.im/post/59c60691518825396f4f71a1)\n\n### 视频\n\n- :tv: [DOM 探索之基础详解篇 —— 慕课网](https://www.imooc.com/learn/488)\n- :tv: [DOM 事件探秘 —— 慕课网](https://www.imooc.com/learn/138)\n- :tv: [jQuery 基础(二)DOM 篇 —— 慕课网](https://www.imooc.com/learn/530)\n- :tv: [JS 操作 DOM 对象属性和方法 —— 爱奇艺](http://www.iqiyi.com/w_19rr19s08l.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 22. new 与构造函数, instanceof 与实例\n\n### 文章\n\n- :book: [构造函数与 new 命令 —— 阮一峰](http://javascript.ruanyifeng.com/oop/basic.html)\n- :book: [Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n- :book: [完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN](https://blog.csdn.net/SpicyBoiledFish/article/details/71123162)\n- :book: [JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网](http://www.php.cn/js-tutorial-376246.html)\n- :book: [构造函数、实例、原型、原型链之间的关系 —— CSDN](https://blog.csdn.net/yin_991/article/details/80954453)\n- :book: [深入理解 JS—instanceof 和原型链 —— CSDN](https://blog.csdn.net/cecilia620/article/details/71158048)\n- :book: [前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书](https://www.jianshu.com/p/15ac7393bc1f)\n- :book: [js 用 new 实例化对象与直接调用的 this 的区别 —— 简书](https://www.jianshu.com/p/60ffc4831bff)\n- :book: [JavaScript 并非所有的东西都是对象 —— justjavac](http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html)\n- :book: [JavaScript instanceof 运算符深入剖析 —— IBM](https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/)\n\n### 视频\n\n- :tv: [改良版的构造函数 —— 乐视](http://www.le.com/ptv/vplay/27766889.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 23. 原型继承与原型链\n\n### 文章\n\n- :book: [继承与原型链 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n- :book: [构造函数、原型与原型链 —— github](https://github.com/bigdots/blog/issues/1)\n- :book: [原型及原型链 —— github(1269 Star)](https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype)\n- :book: [理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault](https://segmentfault.com/a/1190000004282206)\n- :book: [JavaScript：继承和原型链(译) —— justjavac](http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html)\n- :book: [三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园](http://www.cnblogs.com/shuiyi/p/5305435.html)\n- :book: [一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN](https://blog.csdn.net/the__apollo/article/details/76774698)\n- :book: [JS 高级--原型链(一看就懂，但 18 岁以下请绕道) —— CSDN](https://blog.csdn.net/xiaotao_css/article/details/72782416)\n- :book: [原型继承 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n- :book: [JS 原型链与继承别再被问倒了 —— 掘金](https://juejin.im/post/58f94c9bb123db411953691b)\n- :book: [征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金](https://juejin.im/entry/5885db221b69e600592253e7)\n- :book: [JavaScript 深入之从原型到原型链 —— 冴羽](https://github.com/mqyqingfeng/Blog/issues/2)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JS 高级-07-原型链继承 —— 乐视](http://www.le.com/ptv/vplay/27552753.html)\n- :tv: [JS 原型对象和原型链简介 —— 腾讯视频](https://v.qq.com/x/page/b0511nwa7d3.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 24. Object.create 和 Object.assign\n\n### 文章\n\n- :book: [Object.create —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n- :book: [Object.assign —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n- :book: [Object.create vs Object.assign —— 慕课网手记](https://www.imooc.com/article/17591)\n- :book: [JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN](https://blog.csdn.net/DeepLies/article/details/52915143)\n- :book: [es6 中 object.create()和 object.assign() —— 风信子博客](http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/)\n- :book: [Object-Assign-Deep —— github](https://github.com/saikojosh/Object-Assign-Deep)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 25. 工厂函数和类\n\n### 文章\n\n- :book: [类 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes)\n- :book: [类和实例 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000)\n- :book: [Javascript 定义类（class）的三种方法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\n- :book: [【译】ES6 的工厂函数 —— 掘金](https://juejin.im/post/59c8c8756fb9a00a681ae5bd)\n- :book: [JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金](https://juejin.im/entry/587992c961ff4b0065edf1ff)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 26. 设计模式\n\n### 文章\n\n- :book: [JavaScript 设计模式 —— 掘金](https://juejin.im/post/59df4f74f265da430f311909)\n- :book: [学用 JavaScript 设计模式 —— 极客学院](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)\n- :book: [[面试专题]JS 设计模式 —— SegmentFault](https://segmentfault.com/a/1190000010914032)\n- :book: [JavaScript Patterns 中译本 —— github](https://github.com/lxj/javascript.patterns)\n\n### 视频\n\n- :tv: [HTML5 课程大纲 2-11JS 设计模式](https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 27. Memoization\n\n### 文章\n\n- :book: [JavaScript Memoization —— 司徒正美](https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html)\n- :book: [memoization 提升递归效率 —— 博客园](https://www.cnblogs.com/yingshuizy/p/4517102.html)\n- :book: [如何提升 JavaScript 的递归效率 —— 51CTO](http://developer.51cto.com/art/201010/231513.htm)\n- :book: [JavaScript 高级技巧 Memoization —— SegmentFaut](https://segmentfault.com/a/1190000016703106)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 28. 纯函数, 函数副作用和状态变化\n\n### 文章\n\n- :book: [纯函数(Pure Function) —— React.js 小书](http://huziketang.mangojuice.top/books/react/lesson32)\n- :book: [JavaScript Functional Programming：纯函数 —— 宁皓网](https://ninghao.net/blog/4634)\n- :book: [js 函数的副作用分析 —— 脚本之家](https://www.jb51.net/article/28079.htm)\n- :book: [如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金](https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com)\n- :book: [原生 JavaScript 实现 state 状态管理系统 —— 博客园](http://www.cnblogs.com/zhangycun/p/9403335.html)\n- :book: [JavaScript 函数式编程 —— @BuptStEve](https://github.com/BuptStEve/blog/issues/10)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 29. 耗性能操作和时间复杂度\n\n### 文章\n\n- :book: [时间复杂度 O(log n) 意味着什么？ —— 掘金](https://juejin.im/entry/593f56528d6d810058a355f4)\n- :book: [算法的时间复杂度和空间复杂度 —— 掘金](https://juejin.im/entry/5a49f7d36fb9a0450a67b269)\n- :book: [算法（一）时间复杂度 —— 掘金](https://juejin.im/post/58d15f1044d90400691834d4)\n- :book: [Big O Search Algorithms in JavaScript —— Bradley Braithwaite](http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n- :book: [Time Complexity Analysis in JavaScript — Jennifer Bland](https://www.jenniferbland.com/time-complexity-analysis-in-javascript/)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 30. JavaScript 引擎\n\n### 文章\n\n- :book: [javascript 引擎 —— 百度百科](https://baike.baidu.com/item/javascript引擎/5356108)\n- :book: [V8(JavaScript 引擎) —— 百度百科](https://baike.baidu.com/item/V8/6178125)\n- :book: [图解搞懂 JavaScript 引擎 Event Loop —— 掘金](https://juejin.im/post/5a6309f76fb9a01cab2858b1)3\n- :book: [V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac](https://segmentfault.com/a/1190000010819020)\n- :book: [10 分钟理解 JS 引擎的执行机制 —— SegmentFaut](https://segmentfault.com/a/1190000012806637)\n- :book: [V8 javascript 引擎 —— 博客园](https://www.cnblogs.com/weirdoQi/p/6609811.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 31. 二进制, 十六进制, 十进制, 科学记数法\n\n### 文章\n\n- :book: [二、八、十、十六进制转换(图解篇) —— 博客园](http://www.cnblogs.com/gaizai/p/4233780.html)\n- :book: [JavaScript 读写二进制数据 —— 掘金](https://juejin.im/post/5b93dadaf265da0a857a58a3)\n\n### 视频\n\n- :tv: [二进制、十进制、十六进制互相转化很难吗？ —— 百度视频](http://baishi.baidu.com/watch/7873060963471478456.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 32. 偏函数, 柯里化, Compose 和 Pipe\n\n### 文章\n\n- :book: [Javascript 函数式编程之偏函数 —— CSDN](https://blog.csdn.net/qq_42129063/article/details/81874314)\n- :book: [JavaScript 专题之偏函数 —— SegmentFault](https://segmentfault.com/a/1190000010686144)\n- :book: [柯里化和偏函数有什么区别？ —— SegmentFault](https://segmentfault.com/q/1010000008626058)\n- :book: [Javascript 偏函数与柯里化 —— CSDN](https://blog.csdn.net/neweastsun/article/details/75947785)\n- :book: [柯里化(curry) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html)\n- :book: [代码组合(compose) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n- :book: [关于 javascript 函数式编程中 compose 的实现 —— SegmentFault](https://segmentfault.com/a/1190000008394749)\n- :book: [实现 compose 的五种思路 —— SegmentFault](https://segmentfault.com/a/1190000011447164)\n- :book: [JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault](https://segmentfault.com/a/1190000015102804)\n- :book: [JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金](https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment)\n- :book: [JavaScript 函数式编程（二） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/11)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 33. 代码整洁之道\n\n### 文章\n\n- :book: [[译] JavaScript 代码整洁之道 —— 边城](https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html)\n- :book: [Javascript 编程风格 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n- :book: [重构 - 代码整洁之道 —— 掘金](https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9)\n- :book: [让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金](https://juejin.im/post/5a7d71836fb9a063435ecf51)\n- :book: [Web 前端：11 个让你代码整洁的原则 —— 伯乐在线](http://blog.jobbole.com/23617/)\n- :book: [Clean Code concepts adapted for JavaScript —— ryanmcdermott](https://github.com/ryanmcdermott/clean-code-javascript)\n\n<br>\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n","slug":"33_js_concepts","published":1,"updated":"2020-04-08T00:43:01.111Z","_id":"ck94a9bcy003a07s613nqevyi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<blockquote>\n<p>本篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong><a href=\"#1-调用堆栈\">调用堆栈</a></strong></li>\n<li><strong><a href=\"#2-原始类型\">原始类型</a></strong></li>\n<li><strong><a href=\"#3-值类型和引用类型\">值类型和引用类型</a></strong></li>\n<li><strong><a href=\"#4-隐式-显式-名义和鸭子类型\">隐式, 显式, 名义和鸭子类型</a></strong></li>\n<li><strong><a href=\"#5--vs--typeof-vs-instanceof\">== 与 ===, typeof 与 instanceof</a></strong></li>\n<li><strong><a href=\"#6-this-call-apply-和-bind\">this, call, apply 和 bind</a></strong></li>\n<li><strong><a href=\"#7-函数作用域-块级作用域和词法作用域\">函数作用域, 块级作用域和词法作用域</a></strong></li>\n<li><strong><a href=\"#8-闭包\">闭包</a></strong></li>\n<li><strong><a href=\"#9-map-reduce-filter-等高阶函数\">map, reduce, filter 等高阶函数</a></strong></li>\n<li><strong><a href=\"#10-表达式和语句\">表达式和语句</a></strong></li>\n<li><strong><a href=\"#11-变量提升\">变量提升</a></strong></li>\n<li><strong><a href=\"#12-promise\">Promise</a></strong></li>\n<li><strong><a href=\"#13-立即执行函数-模块化-命名空间\">立即执行函数, 模块化, 命名空间</a></strong></li>\n<li><strong><a href=\"#14-递归\">递归</a></strong></li>\n<li><strong><a href=\"#15-算法\">算法</a></strong></li>\n<li><strong><a href=\"#16-数据结构\">数据结构</a></strong></li>\n<li><strong><a href=\"#17-消息队列和事件循环\">消息队列和事件循环</a></strong></li>\n<li><strong><a href=\"#18-settimeout-setinterval-和-requestanimationframe\">setTimeout, setInterval 和 requestAnimationFrame</a></strong></li>\n<li><strong><a href=\"#19-继承-多态和代码复用\">继承, 多态和代码复用</a></strong></li>\n<li><strong><a href=\"#20-按位操作符-类数组对象和类型化数组\">按位操作符, 类数组对象和类型化数组</a></strong></li>\n<li><strong><a href=\"#21-dom-树和渲染过程\">DOM 树和渲染过程</a></strong></li>\n<li><strong><a href=\"#22-new-与构造函数-instanceof-与实例\">new 与构造函数, instanceof 与实例</a></strong></li>\n<li><strong><a href=\"#23-原型继承与原型链\">原型继承与原型链</a></strong></li>\n<li><strong><a href=\"#24-objectcreate-和-objectassign\">Object.create 和 Object.assign</a></strong></li>\n<li><strong><a href=\"#25-工厂函数和类\">工厂函数和类</a></strong></li>\n<li><strong><a href=\"#26-设计模式\">设计模式</a></strong></li>\n<li><strong><a href=\"#27-memoization\">Memoization</a></strong></li>\n<li><strong><a href=\"#28-纯函数-函数副作用和状态变化\">纯函数, 函数副作用和状态变化</a></strong></li>\n<li><strong><a href=\"#29-耗性能操作和时间复杂度\">耗性能操作和时间复杂度</a></strong></li>\n<li><strong><a href=\"#30-javascript-引擎\">JavaScript 引擎</a></strong></li>\n<li><strong><a href=\"#31-二进制-十六进制-十进制-科学记数法\">二进制, 十进制, 十六进制, 科学记数法</a></strong></li>\n<li><strong><a href=\"#32-偏函数-柯里化-compose-和-pipe\">偏函数, 柯里化, Compose 和 Pipe</a></strong></li>\n<li><strong><a href=\"#33-代码整洁之道\">代码整洁之道</a></strong></li>\n</ol>\n<hr>\n<h2 id=\"1-调用堆栈\"><a href=\"#1-调用堆栈\" class=\"headerlink\" title=\"1. 调用堆栈\"></a>1. 调用堆栈</h2><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">Call Stack — MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\" target=\"_blank\" rel=\"noopener\">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.oschina.net/translate/how-does-javascript-actually-work-part-1\" target=\"_blank\" rel=\"noopener\">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li>\n<li>:book: <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules（译） —— 掘金</a></li>\n</ul>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser\" target=\"_blank\" rel=\"noopener\">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li>\n<li>:tv: <a href=\"https://www.bilibili.com/video/av33824933/\" target=\"_blank\" rel=\"noopener\">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li>\n<li>:tv: <a href=\"http://www.acfun.cn/v/ac4495641\" target=\"_blank\" rel=\"noopener\">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/21194.html\" target=\"_blank\" rel=\"noopener\">事件循环模型 —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w6QGEiQceOM\" target=\"_blank\" rel=\"noopener\">Javascript: the Call Stack explained — Coding Blocks India</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=W8AeMrVtFLY\" target=\"_blank\" rel=\"noopener\">The JS Call Stack Explained In 9 Minutes — Colt Steele</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=jT0USJeNFEA\" target=\"_blank\" rel=\"noopener\">JavaScript Execution Stack — Codecademy</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w7QWQlkLY_s\" target=\"_blank\" rel=\"noopener\">What is the Call Stack? — Eric Traub</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Q2sFmqvpBe0\" target=\"_blank\" rel=\"noopener\">The Call Stack — Kevin Drumm</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Execution — Codesmith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=mk0lu9MKBto\" target=\"_blank\" rel=\"noopener\">Call Stack &amp; Event Loop — movies com</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"2-原始类型\"><a href=\"#2-原始类型\" class=\"headerlink\" title=\"2. 原始类型\"></a>2. 原始类型</h2><h3 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\" target=\"_blank\" rel=\"noopener\">原始数据 —— MDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000017090272\" target=\"_blank\" rel=\"noopener\">[译]JavaScript 是怎样编码数字的 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/\" target=\"_blank\" rel=\"noopener\">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li>\n<li>:book: <a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li>\n<li>:book: <a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\" target=\"_blank\" rel=\"noopener\">The Secret Life of JavaScript Primitives —— Angus Croll</a></li>\n</ul>\n<h3 id=\"视频-1\"><a href=\"#视频-1\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5674\" target=\"_blank\" rel=\"noopener\">javascript 六种数据类型 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/5808.html\" target=\"_blank\" rel=\"noopener\">javascript 视频教程(数据类型) —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=9ooYYRLdg_g\" target=\"_blank\" rel=\"noopener\">JavaScript Reference vs Primitive Types — Academind</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=HsbWQsSCE5Y\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Types — Simon Sez IT</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=F7YbhKbpFic\" target=\"_blank\" rel=\"noopener\">Javascript Primitive and Reference Types — Baljeet Singh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=e-_mDyqm2oU\" target=\"_blank\" rel=\"noopener\">Value Types and Reference Types in JavaScript — Programming with Mosh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=qw3j0A3DIzQ\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Data Types — Avelx</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=MqHDDtVYJRI\" target=\"_blank\" rel=\"noopener\">Everything you never wanted to know about JavaScript numbers — Bartek Szopka</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"3-值类型和引用类型\"><a href=\"#3-值类型和引用类型\" class=\"headerlink\" title=\"3. 值类型和引用类型\"></a>3. 值类型和引用类型</h2><h3 id=\"文章-2\"><a href=\"#文章-2\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_referencetypes.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 引用类型 —— W3school</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/leiting/p/8081413.html\" target=\"_blank\" rel=\"noopener\">js 中的值类型和引用类型的区别 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" target=\"_blank\" rel=\"noopener\">JavaScript 的值传递和引用传递 —— FunDebug</a></li>\n<li>:book: <a href=\"https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm\" target=\"_blank\" rel=\"noopener\">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaojia_boke/article/details/54906509\" target=\"_blank\" rel=\"noopener\">JavaScript: Passing by Value or by Reference —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015411195\" target=\"_blank\" rel=\"noopener\">js 值引用和值复制 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/zzzaquarius/article/details/4902235\" target=\"_blank\" rel=\"noopener\">js- 引用和复制(传值和传址) —— CSDN</a></li>\n</ul>\n<h3 id=\"视频-2\"><a href=\"#视频-2\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=E-dAnFdq8k8\" target=\"_blank\" rel=\"noopener\">Javascript Pass by Value vs Pass by Reference — techsith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=fD0t_DKREbE\" target=\"_blank\" rel=\"noopener\">JavaScript Value vs Reference Types — Programming with Mosh</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"4-隐式-显式-名义和鸭子类型\"><a href=\"#4-隐式-显式-名义和鸭子类型\" class=\"headerlink\" title=\"4. 隐式, 显式, 名义和鸭子类型\"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id=\"文章-3\"><a href=\"#文章-3\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_typeconversion.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 类型转换 —— W3school</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59ad2585f265da246a20e026\" target=\"_blank\" rel=\"noopener\">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004482388\" target=\"_blank\" rel=\"noopener\">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yugege/p/5277883.html\" target=\"_blank\" rel=\"noopener\">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yangjvn/article/details/48284163\" target=\"_blank\" rel=\"noopener\">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/777a89b4ed9a\" target=\"_blank\" rel=\"noopener\">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li>\n<li>:book: <a href=\"https://ithelp.ithome.com.tw/articles/10201512\" target=\"_blank\" rel=\"noopener\">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li>\n<li>:book: <a href=\"http://book.51cto.com/art/201505/475153.htm\" target=\"_blank\" rel=\"noopener\">动态类型语言和鸭子类型 —— 曾探</a></li>\n<li>:book: <a href=\"https://flow.org/en/docs/lang/nominal-structural/\" target=\"_blank\" rel=\"noopener\">Nominal &amp; Structural Typing —— flow</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript\" target=\"_blank\" rel=\"noopener\">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Types &amp; Grammar —— github</a></li>\n</ul>\n<h3 id=\"视频-3\"><a href=\"#视频-3\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5675\" target=\"_blank\" rel=\"noopener\">javascript 隐式转换 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27767009.html\" target=\"_blank\" rel=\"noopener\">Javascript 基础加强-类型转换 —— 黑马程序员</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n<h2 id=\"5-vs-typeof-vs-instanceof\"><a href=\"#5-vs-typeof-vs-instanceof\" class=\"headerlink\" title=\"5. == vs ===, typeof vs instanceof\"></a>5. == vs ===, typeof vs instanceof</h2><h3 id=\"文章-4\"><a href=\"#文章-4\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">JavaScript 中的相等性判断 —— MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/584918612f301e005716add6\" target=\"_blank\" rel=\"noopener\">js 中 == 和 === 的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/w97531/article/details/82255225\" target=\"_blank\" rel=\"noopener\">== vs === in Javascript —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mevicky/article/details/50353881\" target=\"_blank\" rel=\"noopener\">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的 typeof 的用途 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58358606570c35005e4142bd\" target=\"_blank\" rel=\"noopener\">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b0b9b9051882515773ae714\" target=\"_blank\" rel=\"noopener\">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000730982\" target=\"_blank\" rel=\"noopener\">typeof 和 instanceOf 的区别</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"6-this-call-apply-和-bind\"><a href=\"#6-this-call-apply-和-bind\" class=\"headerlink\" title=\"6. this, call, apply 和 bind\"></a>6. this, call, apply 和 bind</h2><h3 id=\"文章-5\"><a href=\"#文章-5\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript 的 this 用法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/6b4333e78bf5\" target=\"_blank\" rel=\"noopener\">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">this、apply、call、bind —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/tingyu-blog/p/6212392.html\" target=\"_blank\" rel=\"noopener\">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/Abiel1024/blog/issues/16\" target=\"_blank\" rel=\"noopener\">call、apply 和 bind 的原生实现 —— github</a></li>\n</ul>\n<h3 id=\"视频-4\"><a href=\"#视频-4\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.iqiyi.com/w_19rr1augsd.html\" target=\"_blank\" rel=\"noopener\">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed\" target=\"_blank\" rel=\"noopener\">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li>\n<li>:tv: <a href=\"https://study.163.com/course/introduction/590005.htm\" target=\"_blank\" rel=\"noopener\">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"7-函数作用域-块级作用域和词法作用域\"><a href=\"#7-函数作用域-块级作用域和词法作用域\" class=\"headerlink\" title=\"7. 函数作用域, 块级作用域和词法作用域\"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id=\"文章-6\"><a href=\"#文章-6\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000\" target=\"_blank\" rel=\"noopener\">变量作用域与解构赋值 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006671020\" target=\"_blank\" rel=\"noopener\">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58e70077b123db15eb88dc7e\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5afb0ae56fb9a07aa2138425\" target=\"_blank\" rel=\"noopener\">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/1047454/what-is-lexical-scope\" target=\"_blank\" rel=\"noopener\">What is lexical scope? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8. 闭包\"></a>8. 闭包</h2><h3 id=\"文章-7\"><a href=\"#文章-7\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_functions_closures.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 闭包（closure）—— w3school</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/796e903754f1\" target=\"_blank\" rel=\"noopener\">一次性搞懂 JavaScript 闭包 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006875662\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5800eb7da22b9d005b36156e\" target=\"_blank\" rel=\"noopener\">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/59df405251882551bf7e58c6\" target=\"_blank\" rel=\"noopener\">高效使用 JavaScript 闭包 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-5\"><a href=\"#视频-5\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr1amael.html\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478410.html\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 11.闭包 —— 乐视</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/30505852.html\" target=\"_blank\" rel=\"noopener\">白贺翔_函数(闭包) —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"9-map-reduce-filter-等高阶函数\"><a href=\"#9-map-reduce-filter-等高阶函数\" class=\"headerlink\" title=\"9. map, reduce, filter 等高阶函数\"></a>9. map, reduce, filter 等高阶函数</h2><h3 id=\"文章-8\"><a href=\"#文章-8\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000\" target=\"_blank\" rel=\"noopener\">高阶函数 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5835808067f3560065ed4ab2\" target=\"_blank\" rel=\"noopener\">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012127329\" target=\"_blank\" rel=\"noopener\">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/15\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（三） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"10-表达式和语句\"><a href=\"#10-表达式和语句\" class=\"headerlink\" title=\"10. 表达式和语句\"></a>10. 表达式和语句</h2><h3 id=\"文章-9\"><a href=\"#文章-9\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/xianshenglu/p/8386918.html\" target=\"_blank\" rel=\"noopener\">js 表达式与语句 —— 博客园</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000004102804\" target=\"_blank\" rel=\"noopener\">JS 表达式和语句的区别 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mett_smith/article/details/78761247\" target=\"_blank\" rel=\"noopener\">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004565693\" target=\"_blank\" rel=\"noopener\">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://2ality.com/2012/09/expressions-vs-statements.html\" target=\"_blank\" rel=\"noopener\">Expressions versus statements in JavaScript —— Dr. Axel</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"11-变量提升\"><a href=\"#11-变量提升\" class=\"headerlink\" title=\"11. 变量提升\"></a>11. 变量提升</h2><h3 id=\"文章-10\"><a href=\"#文章-10\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/js/js-hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript 变量提升 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59905bea6fb9a03c34192c51\" target=\"_blank\" rel=\"noopener\">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004345355#articleHeader5\" target=\"_blank\" rel=\"noopener\">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li>\n<li>:book: <a href=\"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript Scoping and Hoisting —— Ben Cherry</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"12-Promise\"><a href=\"#12-Promise\" class=\"headerlink\" title=\"12. Promise\"></a>12. Promise</h2><h3 id=\"文章-11\"><a href=\"#文章-11\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">使用 promises —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\" target=\"_blank\" rel=\"noopener\">Promise — 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/p/3495286.html\" target=\"_blank\" rel=\"noopener\">JavaScript Promise：去而复返 —— 司徒正美</a></li>\n<li>:book: <a href=\"https://developers.google.com/web/fundamentals/primers/promises#_1\" target=\"_blank\" rel=\"noopener\">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011813934\" target=\"_blank\" rel=\"noopener\">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/56499ae160b2d1404c4f8834\" target=\"_blank\" rel=\"noopener\">JavaScript Promise 迷你书（中文版）</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yunfeifei/p/4453690.html\" target=\"_blank\" rel=\"noopener\">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li>\n</ul>\n<h3 id=\"视频-6\"><a href=\"#视频-6\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise 入门 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"13-立即执行函数-模块化-命名空间\"><a href=\"#13-立即执行函数-模块化-命名空间\" class=\"headerlink\" title=\"13. 立即执行函数, 模块化, 命名空间\"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id=\"文章-12\"><a href=\"#文章-12\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/4dbf4a4c8ebb\" target=\"_blank\" rel=\"noopener\">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/57fee360a22b9d005b1d9ae3\" target=\"_blank\" rel=\"noopener\">Javascript 的匿名函数与自执行 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006966358\" target=\"_blank\" rel=\"noopener\">前端模块化——技术选型 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015991869#articleHeader8\" target=\"_blank\" rel=\"noopener\">谈谈 Js 前端模块化规范 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://web.jobbole.com/87534/\" target=\"_blank\" rel=\"noopener\">函数声明与函数表达式的区别 —— 伯乐在线</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"14-递归\"><a href=\"#14-递归\" class=\"headerlink\" title=\"14. 递归\"></a>14. 递归</h2><h3 id=\"文章-13\"><a href=\"#文章-13\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000003942347\" target=\"_blank\" rel=\"noopener\">求解释 js 递归 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5948c0d8fe88c2006a939e2a\" target=\"_blank\" rel=\"noopener\">JavaScript 中的递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c1d91d6fb9a00a53275f79\" target=\"_blank\" rel=\"noopener\">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c87fb46fb9a00a437b1a2e\" target=\"_blank\" rel=\"noopener\">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5acdd7486fb9a028ca53547c\" target=\"_blank\" rel=\"noopener\">尾调用和尾递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/qianqianstd/article/details/75807462\" target=\"_blank\" rel=\"noopener\">几个经典递归问题用 js 实现 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/x_i_xw/article/details/72026868\" target=\"_blank\" rel=\"noopener\">递归函数的几个例子 —— CSDN</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"15-算法\"><a href=\"#15-算法\" class=\"headerlink\" title=\"15. 算法\"></a>15. 算法</h2><h3 id=\"文章-14\"><a href=\"#文章-14\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述） —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/594dfe795188250d725a220a#comment\" target=\"_blank\" rel=\"noopener\">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58c9d5fb1b69e6006b686bce\" target=\"_blank\" rel=\"noopener\">JS 中可能用得到的全部的排序算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/1b4068ccd505\" target=\"_blank\" rel=\"noopener\">JS 家的排序算法 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008593715\" target=\"_blank\" rel=\"noopener\">前端常见算法的 JS 实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/\" target=\"_blank\" rel=\"noopener\">前端面试中的常见的算法问题 ——蒲小花的博客</a></li>\n</ul>\n<h3 id=\"视频-7\"><a href=\"#视频-7\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/888\" target=\"_blank\" rel=\"noopener\">Javascript 实现二叉树算法 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"16-数据结构\"><a href=\"#16-数据结构\" class=\"headerlink\" title=\"16. 数据结构\"></a>16. 数据结构</h2><h3 id=\"文章-15\"><a href=\"#文章-15\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.jianshu.com/p/5e0e8d183102\" target=\"_blank\" rel=\"noopener\">来我们浅谈一下 js 的数据结构 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/nb/16835496\" target=\"_blank\" rel=\"noopener\">JavaScript 中的算法与数据结构 —— 简书</a></li>\n<li>:book: <a href=\"http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html\" target=\"_blank\" rel=\"noopener\">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/586effe0da2f600053d85a9a\" target=\"_blank\" rel=\"noopener\">js 中基础数据结构数组去重问题 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-8\"><a href=\"#视频-8\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: :tv: <a href=\"http://www.le.com/ptv/vplay/27606964.html\" target=\"_blank\" rel=\"noopener\">JavaScript 数据结构-运算符 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"17-消息队列和事件循环\"><a href=\"#17-消息队列和事件循环\" class=\"headerlink\" title=\"17. 消息队列和事件循环\"></a>17. 消息队列和事件循环</h2><h3 id=\"文章-16\"><a href=\"#文章-16\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">并发模型与事件循环 —— MDN</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/dong-xu/p/7000163.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 事件循环 —— 博客园</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"noopener\">深入浅出 Javascript 事件循环机制 —— 知乎</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014940904#articleHeader7\" target=\"_blank\" rel=\"noopener\">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"noopener\">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"18-setTimeout-setInterval-和-requestAnimationFrame\"><a href=\"#18-setTimeout-setInterval-和-requestAnimationFrame\" class=\"headerlink\" title=\"18. setTimeout, setInterval 和 requestAnimationFrame\"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id=\"文章-17\"><a href=\"#文章-17\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-settimeout.html\" target=\"_blank\" rel=\"noopener\">Window setTimeout() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-setinterval.html\" target=\"_blank\" rel=\"noopener\">Window setInterval() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5aa4c47af265da239866e236\" target=\"_blank\" rel=\"noopener\">关于 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a77f8ce5188257a6d635d76\" target=\"_blank\" rel=\"noopener\">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5861ebf01b69e6006ce61d38\" target=\"_blank\" rel=\"noopener\">原来你是这样的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000005989491\" target=\"_blank\" rel=\"noopener\">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li>\n<li>book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">window.requestAnimationFrame —— MDN</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/onepixel/p/7078617.html\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame 知多少？ —— 博客园</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014661035\" target=\"_blank\" rel=\"noopener\">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000386368\" target=\"_blank\" rel=\"noopener\">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000013909430\" target=\"_blank\" rel=\"noopener\">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li>\n</ul>\n<h3 id=\"视频-9\"><a href=\"#视频-9\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html\" target=\"_blank\" rel=\"noopener\">setTimeout 和 setInterval —— 优酷</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"19-继承-多态和代码复用\"><a href=\"#19-继承-多态和代码复用\" class=\"headerlink\" title=\"19. 继承, 多态和代码复用\"></a>19. 继承, 多态和代码复用</h2><h3 id=\"文章-18\"><a href=\"#文章-18\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/Leo_wl/p/5734794.html\" target=\"_blank\" rel=\"noopener\">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/5cb692658704\" target=\"_blank\" rel=\"noopener\">Javascript 的继承与多态 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59396c96fe88c2006afc2707\" target=\"_blank\" rel=\"noopener\">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/34693209\" target=\"_blank\" rel=\"noopener\">JavaScript 中的“多继承” —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown\" target=\"_blank\" rel=\"noopener\">代码复用模式 —— github</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"20-按位操作符-类数组对象和类型化数组\"><a href=\"#20-按位操作符-类数组对象和类型化数组\" class=\"headerlink\" title=\"20. 按位操作符, 类数组对象和类型化数组\"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id=\"文章-19\"><a href=\"#文章-19\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">按位操作符 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays\" target=\"_blank\" rel=\"noopener\">类数组对象 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" target=\"_blank\" rel=\"noopener\">类型化数组 —— MDN</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/gradolabs/p/4762134.html\" target=\"_blank\" rel=\"noopener\">JavaScript ArrayBuffer 浅析 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"21-DOM-树和渲染过程\"><a href=\"#21-DOM-树和渲染过程\" class=\"headerlink\" title=\"21. DOM 树和渲染过程\"></a>21. DOM 树和渲染过程</h2><h3 id=\"文章-20\"><a href=\"#文章-20\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree\" target=\"_blank\" rel=\"noopener\">如何创建一个 DOM 树 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/htmldom/dom_nodes.asp\" target=\"_blank\" rel=\"noopener\">HTML DOM 节点 —— W3school</a></li>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/dom/node.html\" target=\"_blank\" rel=\"noopener\">DOM 概述 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbbfa61ff4b006ccc41fe\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbc4961ff4b006ccc44fb\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58314efd8ac2470061bb30fd\" target=\"_blank\" rel=\"noopener\">掌握 DOM 操作 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000\" target=\"_blank\" rel=\"noopener\">操作 DOM —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c60691518825396f4f71a1\" target=\"_blank\" rel=\"noopener\">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-10\"><a href=\"#视频-10\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/488\" target=\"_blank\" rel=\"noopener\">DOM 探索之基础详解篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/138\" target=\"_blank\" rel=\"noopener\">DOM 事件探秘 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/530\" target=\"_blank\" rel=\"noopener\">jQuery 基础(二)DOM 篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr19s08l.html\" target=\"_blank\" rel=\"noopener\">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"22-new-与构造函数-instanceof-与实例\"><a href=\"#22-new-与构造函数-instanceof-与实例\" class=\"headerlink\" title=\"22. new 与构造函数, instanceof 与实例\"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id=\"文章-21\"><a href=\"#文章-21\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/oop/basic.html\" target=\"_blank\" rel=\"noopener\">构造函数与 new 命令 —— 阮一峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/SpicyBoiledFish/article/details/71123162\" target=\"_blank\" rel=\"noopener\">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li>\n<li>:book: <a href=\"http://www.php.cn/js-tutorial-376246.html\" target=\"_blank\" rel=\"noopener\">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yin_991/article/details/80954453\" target=\"_blank\" rel=\"noopener\">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/cecilia620/article/details/71158048\" target=\"_blank\" rel=\"noopener\">深入理解 JS—instanceof 和原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/60ffc4831bff\" target=\"_blank\" rel=\"noopener\">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html\" target=\"_blank\" rel=\"noopener\">JavaScript 并非所有的东西都是对象 —— justjavac</a></li>\n<li>:book: <a href=\"https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/\" target=\"_blank\" rel=\"noopener\">JavaScript instanceof 运算符深入剖析 —— IBM</a></li>\n</ul>\n<h3 id=\"视频-11\"><a href=\"#视频-11\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27766889.html\" target=\"_blank\" rel=\"noopener\">改良版的构造函数 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"23-原型继承与原型链\"><a href=\"#23-原型继承与原型链\" class=\"headerlink\" title=\"23. 原型继承与原型链\"></a>23. 原型继承与原型链</h2><h3 id=\"文章-22\"><a href=\"#文章-22\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链 —— MDN</a></li>\n<li>:book: <a href=\"https://github.com/bigdots/blog/issues/1\" target=\"_blank\" rel=\"noopener\">构造函数、原型与原型链 —— github</a></li>\n<li>:book: <a href=\"https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype\" target=\"_blank\" rel=\"noopener\">原型及原型链 —— github(1269 Star)</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004282206\" target=\"_blank\" rel=\"noopener\">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html\" target=\"_blank\" rel=\"noopener\">JavaScript：继承和原型链(译) —— justjavac</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"noopener\">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/the__apollo/article/details/76774698\" target=\"_blank\" rel=\"noopener\">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaotao_css/article/details/72782416\" target=\"_blank\" rel=\"noopener\">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">原型继承 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58f94c9bb123db411953691b\" target=\"_blank\" rel=\"noopener\">JS 原型链与继承别再被问倒了 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5885db221b69e600592253e7\" target=\"_blank\" rel=\"noopener\">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之从原型到原型链 —— 冴羽</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-12\"><a href=\"#视频-12\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27552753.html\" target=\"_blank\" rel=\"noopener\">JS 高级-07-原型链继承 —— 乐视</a></li>\n<li>:tv: <a href=\"https://v.qq.com/x/page/b0511nwa7d3.html\" target=\"_blank\" rel=\"noopener\">JS 原型对象和原型链简介 —— 腾讯视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"24-Object-create-和-Object-assign\"><a href=\"#24-Object-create-和-Object-assign\" class=\"headerlink\" title=\"24. Object.create 和 Object.assign\"></a>24. Object.create 和 Object.assign</h2><h3 id=\"文章-23\"><a href=\"#文章-23\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">Object.create —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\">Object.assign —— MDN</a></li>\n<li>:book: <a href=\"https://www.imooc.com/article/17591\" target=\"_blank\" rel=\"noopener\">Object.create vs Object.assign —— 慕课网手记</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/DeepLies/article/details/52915143\" target=\"_blank\" rel=\"noopener\">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li>\n<li>:book: <a href=\"http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/\" target=\"_blank\" rel=\"noopener\">es6 中 object.create()和 object.assign() —— 风信子博客</a></li>\n<li>:book: <a href=\"https://github.com/saikojosh/Object-Assign-Deep\" target=\"_blank\" rel=\"noopener\">Object-Assign-Deep —— github</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"25-工厂函数和类\"><a href=\"#25-工厂函数和类\" class=\"headerlink\" title=\"25. 工厂函数和类\"></a>25. 工厂函数和类</h2><h3 id=\"文章-24\"><a href=\"#文章-24\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">类 —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000\" target=\"_blank\" rel=\"noopener\">类和实例 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c8c8756fb9a00a681ae5bd\" target=\"_blank\" rel=\"noopener\">【译】ES6 的工厂函数 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/587992c961ff4b0065edf1ff\" target=\"_blank\" rel=\"noopener\">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"26-设计模式\"><a href=\"#26-设计模式\" class=\"headerlink\" title=\"26. 设计模式\"></a>26. 设计模式</h2><h3 id=\"文章-25\"><a href=\"#文章-25\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式 —— 掘金</a></li>\n<li>:book: <a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式 —— 极客学院</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010914032\" target=\"_blank\" rel=\"noopener\">[面试专题]JS 设计模式 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/lxj/javascript.patterns\" target=\"_blank\" rel=\"noopener\">JavaScript Patterns 中译本 —— github</a></li>\n</ul>\n<h3 id=\"视频-13\"><a href=\"#视频-13\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html\" target=\"_blank\" rel=\"noopener\">HTML5 课程大纲 2-11JS 设计模式</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"27-Memoization\"><a href=\"#27-Memoization\" class=\"headerlink\" title=\"27. Memoization\"></a>27. Memoization</h2><h3 id=\"文章-26\"><a href=\"#文章-26\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html\" target=\"_blank\" rel=\"noopener\">JavaScript Memoization —— 司徒正美</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yingshuizy/p/4517102.html\" target=\"_blank\" rel=\"noopener\">memoization 提升递归效率 —— 博客园</a></li>\n<li>:book: <a href=\"http://developer.51cto.com/art/201010/231513.htm\" target=\"_blank\" rel=\"noopener\">如何提升 JavaScript 的递归效率 —— 51CTO</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000016703106\" target=\"_blank\" rel=\"noopener\">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"28-纯函数-函数副作用和状态变化\"><a href=\"#28-纯函数-函数副作用和状态变化\" class=\"headerlink\" title=\"28. 纯函数, 函数副作用和状态变化\"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id=\"文章-27\"><a href=\"#文章-27\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://huziketang.mangojuice.top/books/react/lesson32\" target=\"_blank\" rel=\"noopener\">纯函数(Pure Function) —— React.js 小书</a></li>\n<li>:book: <a href=\"https://ninghao.net/blog/4634\" target=\"_blank\" rel=\"noopener\">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li>\n<li>:book: <a href=\"https://www.jb51.net/article/28079.htm\" target=\"_blank\" rel=\"noopener\">js 函数的副作用分析 —— 脚本之家</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com\" target=\"_blank\" rel=\"noopener\">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/zhangycun/p/9403335.html\" target=\"_blank\" rel=\"noopener\">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/10\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程 —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"29-耗性能操作和时间复杂度\"><a href=\"#29-耗性能操作和时间复杂度\" class=\"headerlink\" title=\"29. 耗性能操作和时间复杂度\"></a>29. 耗性能操作和时间复杂度</h2><h3 id=\"文章-28\"><a href=\"#文章-28\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/entry/593f56528d6d810058a355f4\" target=\"_blank\" rel=\"noopener\">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5a49f7d36fb9a0450a67b269\" target=\"_blank\" rel=\"noopener\">算法的时间复杂度和空间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58d15f1044d90400691834d4\" target=\"_blank\" rel=\"noopener\">算法（一）时间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li>\n<li>:book: <a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"noopener\">Time Complexity Analysis in JavaScript — Jennifer Bland</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"30-JavaScript-引擎\"><a href=\"#30-JavaScript-引擎\" class=\"headerlink\" title=\"30. JavaScript 引擎\"></a>30. JavaScript 引擎</h2><h3 id=\"文章-29\"><a href=\"#文章-29\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://baike.baidu.com/item/javascript引擎/5356108\" target=\"_blank\" rel=\"noopener\">javascript 引擎 —— 百度百科</a></li>\n<li>:book: <a href=\"https://baike.baidu.com/item/V8/6178125\" target=\"_blank\" rel=\"noopener\">V8(JavaScript 引擎) —— 百度百科</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6309f76fb9a01cab2858b1\" target=\"_blank\" rel=\"noopener\">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010819020\" target=\"_blank\" rel=\"noopener\">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012806637\" target=\"_blank\" rel=\"noopener\">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/weirdoQi/p/6609811.html\" target=\"_blank\" rel=\"noopener\">V8 javascript 引擎 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"31-二进制-十六进制-十进制-科学记数法\"><a href=\"#31-二进制-十六进制-十进制-科学记数法\" class=\"headerlink\" title=\"31. 二进制, 十六进制, 十进制, 科学记数法\"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id=\"文章-30\"><a href=\"#文章-30\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.cnblogs.com/gaizai/p/4233780.html\" target=\"_blank\" rel=\"noopener\">二、八、十、十六进制转换(图解篇) —— 博客园</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b93dadaf265da0a857a58a3\" target=\"_blank\" rel=\"noopener\">JavaScript 读写二进制数据 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-14\"><a href=\"#视频-14\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://baishi.baidu.com/watch/7873060963471478456.html\" target=\"_blank\" rel=\"noopener\">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"32-偏函数-柯里化-Compose-和-Pipe\"><a href=\"#32-偏函数-柯里化-Compose-和-Pipe\" class=\"headerlink\" title=\"32. 偏函数, 柯里化, Compose 和 Pipe\"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id=\"文章-31\"><a href=\"#文章-31\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://blog.csdn.net/qq_42129063/article/details/81874314\" target=\"_blank\" rel=\"noopener\">Javascript 函数式编程之偏函数 —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010686144\" target=\"_blank\" rel=\"noopener\">JavaScript 专题之偏函数 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000008626058\" target=\"_blank\" rel=\"noopener\">柯里化和偏函数有什么区别？ —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/neweastsun/article/details/75947785\" target=\"_blank\" rel=\"noopener\">Javascript 偏函数与柯里化 —— CSDN</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html\" target=\"_blank\" rel=\"noopener\">柯里化(curry) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合(compose) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008394749\" target=\"_blank\" rel=\"noopener\">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011447164\" target=\"_blank\" rel=\"noopener\">实现 compose 的五种思路 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015102804\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment\" target=\"_blank\" rel=\"noopener\">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/11\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（二） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"33-代码整洁之道\"><a href=\"#33-代码整洁之道\" class=\"headerlink\" title=\"33. 代码整洁之道\"></a>33. 代码整洁之道</h2><h3 id=\"文章-32\"><a href=\"#文章-32\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 代码整洁之道 —— 边城</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">Javascript 编程风格 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9\" target=\"_blank\" rel=\"noopener\">重构 - 代码整洁之道 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a7d71836fb9a063435ecf51\" target=\"_blank\" rel=\"noopener\">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li>\n<li>:book: <a href=\"http://blog.jobbole.com/23617/\" target=\"_blank\" rel=\"noopener\">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li>\n<li>:book: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">Clean Code concepts adapted for JavaScript —— ryanmcdermott</a></li>\n</ul>\n<p><br></p>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<blockquote>\n<p>本篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong><a href=\"#1-调用堆栈\">调用堆栈</a></strong></li>\n<li><strong><a href=\"#2-原始类型\">原始类型</a></strong></li>\n<li><strong><a href=\"#3-值类型和引用类型\">值类型和引用类型</a></strong></li>\n<li><strong><a href=\"#4-隐式-显式-名义和鸭子类型\">隐式, 显式, 名义和鸭子类型</a></strong></li>\n<li><strong><a href=\"#5--vs--typeof-vs-instanceof\">== 与 ===, typeof 与 instanceof</a></strong></li>\n<li><strong><a href=\"#6-this-call-apply-和-bind\">this, call, apply 和 bind</a></strong></li>\n<li><strong><a href=\"#7-函数作用域-块级作用域和词法作用域\">函数作用域, 块级作用域和词法作用域</a></strong></li>\n<li><strong><a href=\"#8-闭包\">闭包</a></strong></li>\n<li><strong><a href=\"#9-map-reduce-filter-等高阶函数\">map, reduce, filter 等高阶函数</a></strong></li>\n<li><strong><a href=\"#10-表达式和语句\">表达式和语句</a></strong></li>\n<li><strong><a href=\"#11-变量提升\">变量提升</a></strong></li>\n<li><strong><a href=\"#12-promise\">Promise</a></strong></li>\n<li><strong><a href=\"#13-立即执行函数-模块化-命名空间\">立即执行函数, 模块化, 命名空间</a></strong></li>\n<li><strong><a href=\"#14-递归\">递归</a></strong></li>\n<li><strong><a href=\"#15-算法\">算法</a></strong></li>\n<li><strong><a href=\"#16-数据结构\">数据结构</a></strong></li>\n<li><strong><a href=\"#17-消息队列和事件循环\">消息队列和事件循环</a></strong></li>\n<li><strong><a href=\"#18-settimeout-setinterval-和-requestanimationframe\">setTimeout, setInterval 和 requestAnimationFrame</a></strong></li>\n<li><strong><a href=\"#19-继承-多态和代码复用\">继承, 多态和代码复用</a></strong></li>\n<li><strong><a href=\"#20-按位操作符-类数组对象和类型化数组\">按位操作符, 类数组对象和类型化数组</a></strong></li>\n<li><strong><a href=\"#21-dom-树和渲染过程\">DOM 树和渲染过程</a></strong></li>\n<li><strong><a href=\"#22-new-与构造函数-instanceof-与实例\">new 与构造函数, instanceof 与实例</a></strong></li>\n<li><strong><a href=\"#23-原型继承与原型链\">原型继承与原型链</a></strong></li>\n<li><strong><a href=\"#24-objectcreate-和-objectassign\">Object.create 和 Object.assign</a></strong></li>\n<li><strong><a href=\"#25-工厂函数和类\">工厂函数和类</a></strong></li>\n<li><strong><a href=\"#26-设计模式\">设计模式</a></strong></li>\n<li><strong><a href=\"#27-memoization\">Memoization</a></strong></li>\n<li><strong><a href=\"#28-纯函数-函数副作用和状态变化\">纯函数, 函数副作用和状态变化</a></strong></li>\n<li><strong><a href=\"#29-耗性能操作和时间复杂度\">耗性能操作和时间复杂度</a></strong></li>\n<li><strong><a href=\"#30-javascript-引擎\">JavaScript 引擎</a></strong></li>\n<li><strong><a href=\"#31-二进制-十六进制-十进制-科学记数法\">二进制, 十进制, 十六进制, 科学记数法</a></strong></li>\n<li><strong><a href=\"#32-偏函数-柯里化-compose-和-pipe\">偏函数, 柯里化, Compose 和 Pipe</a></strong></li>\n<li><strong><a href=\"#33-代码整洁之道\">代码整洁之道</a></strong></li>\n</ol>\n<hr>\n<h2 id=\"1-调用堆栈\"><a href=\"#1-调用堆栈\" class=\"headerlink\" title=\"1. 调用堆栈\"></a>1. 调用堆栈</h2><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">Call Stack — MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\" target=\"_blank\" rel=\"noopener\">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.oschina.net/translate/how-does-javascript-actually-work-part-1\" target=\"_blank\" rel=\"noopener\">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li>\n<li>:book: <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules（译） —— 掘金</a></li>\n</ul>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser\" target=\"_blank\" rel=\"noopener\">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li>\n<li>:tv: <a href=\"https://www.bilibili.com/video/av33824933/\" target=\"_blank\" rel=\"noopener\">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li>\n<li>:tv: <a href=\"http://www.acfun.cn/v/ac4495641\" target=\"_blank\" rel=\"noopener\">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/21194.html\" target=\"_blank\" rel=\"noopener\">事件循环模型 —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w6QGEiQceOM\" target=\"_blank\" rel=\"noopener\">Javascript: the Call Stack explained — Coding Blocks India</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=W8AeMrVtFLY\" target=\"_blank\" rel=\"noopener\">The JS Call Stack Explained In 9 Minutes — Colt Steele</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=jT0USJeNFEA\" target=\"_blank\" rel=\"noopener\">JavaScript Execution Stack — Codecademy</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w7QWQlkLY_s\" target=\"_blank\" rel=\"noopener\">What is the Call Stack? — Eric Traub</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Q2sFmqvpBe0\" target=\"_blank\" rel=\"noopener\">The Call Stack — Kevin Drumm</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Execution — Codesmith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=mk0lu9MKBto\" target=\"_blank\" rel=\"noopener\">Call Stack &amp; Event Loop — movies com</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"2-原始类型\"><a href=\"#2-原始类型\" class=\"headerlink\" title=\"2. 原始类型\"></a>2. 原始类型</h2><h3 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\" target=\"_blank\" rel=\"noopener\">原始数据 —— MDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000017090272\" target=\"_blank\" rel=\"noopener\">[译]JavaScript 是怎样编码数字的 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/\" target=\"_blank\" rel=\"noopener\">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li>\n<li>:book: <a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li>\n<li>:book: <a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\" target=\"_blank\" rel=\"noopener\">The Secret Life of JavaScript Primitives —— Angus Croll</a></li>\n</ul>\n<h3 id=\"视频-1\"><a href=\"#视频-1\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5674\" target=\"_blank\" rel=\"noopener\">javascript 六种数据类型 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/5808.html\" target=\"_blank\" rel=\"noopener\">javascript 视频教程(数据类型) —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=9ooYYRLdg_g\" target=\"_blank\" rel=\"noopener\">JavaScript Reference vs Primitive Types — Academind</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=HsbWQsSCE5Y\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Types — Simon Sez IT</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=F7YbhKbpFic\" target=\"_blank\" rel=\"noopener\">Javascript Primitive and Reference Types — Baljeet Singh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=e-_mDyqm2oU\" target=\"_blank\" rel=\"noopener\">Value Types and Reference Types in JavaScript — Programming with Mosh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=qw3j0A3DIzQ\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Data Types — Avelx</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=MqHDDtVYJRI\" target=\"_blank\" rel=\"noopener\">Everything you never wanted to know about JavaScript numbers — Bartek Szopka</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"3-值类型和引用类型\"><a href=\"#3-值类型和引用类型\" class=\"headerlink\" title=\"3. 值类型和引用类型\"></a>3. 值类型和引用类型</h2><h3 id=\"文章-2\"><a href=\"#文章-2\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_referencetypes.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 引用类型 —— W3school</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/leiting/p/8081413.html\" target=\"_blank\" rel=\"noopener\">js 中的值类型和引用类型的区别 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" target=\"_blank\" rel=\"noopener\">JavaScript 的值传递和引用传递 —— FunDebug</a></li>\n<li>:book: <a href=\"https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm\" target=\"_blank\" rel=\"noopener\">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaojia_boke/article/details/54906509\" target=\"_blank\" rel=\"noopener\">JavaScript: Passing by Value or by Reference —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015411195\" target=\"_blank\" rel=\"noopener\">js 值引用和值复制 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/zzzaquarius/article/details/4902235\" target=\"_blank\" rel=\"noopener\">js- 引用和复制(传值和传址) —— CSDN</a></li>\n</ul>\n<h3 id=\"视频-2\"><a href=\"#视频-2\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=E-dAnFdq8k8\" target=\"_blank\" rel=\"noopener\">Javascript Pass by Value vs Pass by Reference — techsith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=fD0t_DKREbE\" target=\"_blank\" rel=\"noopener\">JavaScript Value vs Reference Types — Programming with Mosh</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"4-隐式-显式-名义和鸭子类型\"><a href=\"#4-隐式-显式-名义和鸭子类型\" class=\"headerlink\" title=\"4. 隐式, 显式, 名义和鸭子类型\"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id=\"文章-3\"><a href=\"#文章-3\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_typeconversion.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 类型转换 —— W3school</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59ad2585f265da246a20e026\" target=\"_blank\" rel=\"noopener\">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004482388\" target=\"_blank\" rel=\"noopener\">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yugege/p/5277883.html\" target=\"_blank\" rel=\"noopener\">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yangjvn/article/details/48284163\" target=\"_blank\" rel=\"noopener\">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/777a89b4ed9a\" target=\"_blank\" rel=\"noopener\">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li>\n<li>:book: <a href=\"https://ithelp.ithome.com.tw/articles/10201512\" target=\"_blank\" rel=\"noopener\">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li>\n<li>:book: <a href=\"http://book.51cto.com/art/201505/475153.htm\" target=\"_blank\" rel=\"noopener\">动态类型语言和鸭子类型 —— 曾探</a></li>\n<li>:book: <a href=\"https://flow.org/en/docs/lang/nominal-structural/\" target=\"_blank\" rel=\"noopener\">Nominal &amp; Structural Typing —— flow</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript\" target=\"_blank\" rel=\"noopener\">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Types &amp; Grammar —— github</a></li>\n</ul>\n<h3 id=\"视频-3\"><a href=\"#视频-3\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5675\" target=\"_blank\" rel=\"noopener\">javascript 隐式转换 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27767009.html\" target=\"_blank\" rel=\"noopener\">Javascript 基础加强-类型转换 —— 黑马程序员</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n<h2 id=\"5-vs-typeof-vs-instanceof\"><a href=\"#5-vs-typeof-vs-instanceof\" class=\"headerlink\" title=\"5. == vs ===, typeof vs instanceof\"></a>5. == vs ===, typeof vs instanceof</h2><h3 id=\"文章-4\"><a href=\"#文章-4\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">JavaScript 中的相等性判断 —— MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/584918612f301e005716add6\" target=\"_blank\" rel=\"noopener\">js 中 == 和 === 的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/w97531/article/details/82255225\" target=\"_blank\" rel=\"noopener\">== vs === in Javascript —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mevicky/article/details/50353881\" target=\"_blank\" rel=\"noopener\">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的 typeof 的用途 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58358606570c35005e4142bd\" target=\"_blank\" rel=\"noopener\">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b0b9b9051882515773ae714\" target=\"_blank\" rel=\"noopener\">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000730982\" target=\"_blank\" rel=\"noopener\">typeof 和 instanceOf 的区别</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"6-this-call-apply-和-bind\"><a href=\"#6-this-call-apply-和-bind\" class=\"headerlink\" title=\"6. this, call, apply 和 bind\"></a>6. this, call, apply 和 bind</h2><h3 id=\"文章-5\"><a href=\"#文章-5\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript 的 this 用法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/6b4333e78bf5\" target=\"_blank\" rel=\"noopener\">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">this、apply、call、bind —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/tingyu-blog/p/6212392.html\" target=\"_blank\" rel=\"noopener\">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/Abiel1024/blog/issues/16\" target=\"_blank\" rel=\"noopener\">call、apply 和 bind 的原生实现 —— github</a></li>\n</ul>\n<h3 id=\"视频-4\"><a href=\"#视频-4\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.iqiyi.com/w_19rr1augsd.html\" target=\"_blank\" rel=\"noopener\">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed\" target=\"_blank\" rel=\"noopener\">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li>\n<li>:tv: <a href=\"https://study.163.com/course/introduction/590005.htm\" target=\"_blank\" rel=\"noopener\">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"7-函数作用域-块级作用域和词法作用域\"><a href=\"#7-函数作用域-块级作用域和词法作用域\" class=\"headerlink\" title=\"7. 函数作用域, 块级作用域和词法作用域\"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id=\"文章-6\"><a href=\"#文章-6\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000\" target=\"_blank\" rel=\"noopener\">变量作用域与解构赋值 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006671020\" target=\"_blank\" rel=\"noopener\">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58e70077b123db15eb88dc7e\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5afb0ae56fb9a07aa2138425\" target=\"_blank\" rel=\"noopener\">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/1047454/what-is-lexical-scope\" target=\"_blank\" rel=\"noopener\">What is lexical scope? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8. 闭包\"></a>8. 闭包</h2><h3 id=\"文章-7\"><a href=\"#文章-7\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_functions_closures.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 闭包（closure）—— w3school</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/796e903754f1\" target=\"_blank\" rel=\"noopener\">一次性搞懂 JavaScript 闭包 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006875662\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5800eb7da22b9d005b36156e\" target=\"_blank\" rel=\"noopener\">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/59df405251882551bf7e58c6\" target=\"_blank\" rel=\"noopener\">高效使用 JavaScript 闭包 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-5\"><a href=\"#视频-5\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr1amael.html\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478410.html\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 11.闭包 —— 乐视</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/30505852.html\" target=\"_blank\" rel=\"noopener\">白贺翔_函数(闭包) —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"9-map-reduce-filter-等高阶函数\"><a href=\"#9-map-reduce-filter-等高阶函数\" class=\"headerlink\" title=\"9. map, reduce, filter 等高阶函数\"></a>9. map, reduce, filter 等高阶函数</h2><h3 id=\"文章-8\"><a href=\"#文章-8\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000\" target=\"_blank\" rel=\"noopener\">高阶函数 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5835808067f3560065ed4ab2\" target=\"_blank\" rel=\"noopener\">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012127329\" target=\"_blank\" rel=\"noopener\">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/15\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（三） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"10-表达式和语句\"><a href=\"#10-表达式和语句\" class=\"headerlink\" title=\"10. 表达式和语句\"></a>10. 表达式和语句</h2><h3 id=\"文章-9\"><a href=\"#文章-9\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/xianshenglu/p/8386918.html\" target=\"_blank\" rel=\"noopener\">js 表达式与语句 —— 博客园</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000004102804\" target=\"_blank\" rel=\"noopener\">JS 表达式和语句的区别 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mett_smith/article/details/78761247\" target=\"_blank\" rel=\"noopener\">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004565693\" target=\"_blank\" rel=\"noopener\">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://2ality.com/2012/09/expressions-vs-statements.html\" target=\"_blank\" rel=\"noopener\">Expressions versus statements in JavaScript —— Dr. Axel</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"11-变量提升\"><a href=\"#11-变量提升\" class=\"headerlink\" title=\"11. 变量提升\"></a>11. 变量提升</h2><h3 id=\"文章-10\"><a href=\"#文章-10\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/js/js-hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript 变量提升 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59905bea6fb9a03c34192c51\" target=\"_blank\" rel=\"noopener\">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004345355#articleHeader5\" target=\"_blank\" rel=\"noopener\">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li>\n<li>:book: <a href=\"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript Scoping and Hoisting —— Ben Cherry</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"12-Promise\"><a href=\"#12-Promise\" class=\"headerlink\" title=\"12. Promise\"></a>12. Promise</h2><h3 id=\"文章-11\"><a href=\"#文章-11\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">使用 promises —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\" target=\"_blank\" rel=\"noopener\">Promise — 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/p/3495286.html\" target=\"_blank\" rel=\"noopener\">JavaScript Promise：去而复返 —— 司徒正美</a></li>\n<li>:book: <a href=\"https://developers.google.com/web/fundamentals/primers/promises#_1\" target=\"_blank\" rel=\"noopener\">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011813934\" target=\"_blank\" rel=\"noopener\">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/56499ae160b2d1404c4f8834\" target=\"_blank\" rel=\"noopener\">JavaScript Promise 迷你书（中文版）</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yunfeifei/p/4453690.html\" target=\"_blank\" rel=\"noopener\">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li>\n</ul>\n<h3 id=\"视频-6\"><a href=\"#视频-6\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise 入门 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"13-立即执行函数-模块化-命名空间\"><a href=\"#13-立即执行函数-模块化-命名空间\" class=\"headerlink\" title=\"13. 立即执行函数, 模块化, 命名空间\"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id=\"文章-12\"><a href=\"#文章-12\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/4dbf4a4c8ebb\" target=\"_blank\" rel=\"noopener\">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/57fee360a22b9d005b1d9ae3\" target=\"_blank\" rel=\"noopener\">Javascript 的匿名函数与自执行 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006966358\" target=\"_blank\" rel=\"noopener\">前端模块化——技术选型 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015991869#articleHeader8\" target=\"_blank\" rel=\"noopener\">谈谈 Js 前端模块化规范 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://web.jobbole.com/87534/\" target=\"_blank\" rel=\"noopener\">函数声明与函数表达式的区别 —— 伯乐在线</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"14-递归\"><a href=\"#14-递归\" class=\"headerlink\" title=\"14. 递归\"></a>14. 递归</h2><h3 id=\"文章-13\"><a href=\"#文章-13\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000003942347\" target=\"_blank\" rel=\"noopener\">求解释 js 递归 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5948c0d8fe88c2006a939e2a\" target=\"_blank\" rel=\"noopener\">JavaScript 中的递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c1d91d6fb9a00a53275f79\" target=\"_blank\" rel=\"noopener\">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c87fb46fb9a00a437b1a2e\" target=\"_blank\" rel=\"noopener\">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5acdd7486fb9a028ca53547c\" target=\"_blank\" rel=\"noopener\">尾调用和尾递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/qianqianstd/article/details/75807462\" target=\"_blank\" rel=\"noopener\">几个经典递归问题用 js 实现 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/x_i_xw/article/details/72026868\" target=\"_blank\" rel=\"noopener\">递归函数的几个例子 —— CSDN</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"15-算法\"><a href=\"#15-算法\" class=\"headerlink\" title=\"15. 算法\"></a>15. 算法</h2><h3 id=\"文章-14\"><a href=\"#文章-14\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述） —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/594dfe795188250d725a220a#comment\" target=\"_blank\" rel=\"noopener\">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58c9d5fb1b69e6006b686bce\" target=\"_blank\" rel=\"noopener\">JS 中可能用得到的全部的排序算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/1b4068ccd505\" target=\"_blank\" rel=\"noopener\">JS 家的排序算法 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008593715\" target=\"_blank\" rel=\"noopener\">前端常见算法的 JS 实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/\" target=\"_blank\" rel=\"noopener\">前端面试中的常见的算法问题 ——蒲小花的博客</a></li>\n</ul>\n<h3 id=\"视频-7\"><a href=\"#视频-7\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/888\" target=\"_blank\" rel=\"noopener\">Javascript 实现二叉树算法 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"16-数据结构\"><a href=\"#16-数据结构\" class=\"headerlink\" title=\"16. 数据结构\"></a>16. 数据结构</h2><h3 id=\"文章-15\"><a href=\"#文章-15\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.jianshu.com/p/5e0e8d183102\" target=\"_blank\" rel=\"noopener\">来我们浅谈一下 js 的数据结构 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/nb/16835496\" target=\"_blank\" rel=\"noopener\">JavaScript 中的算法与数据结构 —— 简书</a></li>\n<li>:book: <a href=\"http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html\" target=\"_blank\" rel=\"noopener\">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/586effe0da2f600053d85a9a\" target=\"_blank\" rel=\"noopener\">js 中基础数据结构数组去重问题 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-8\"><a href=\"#视频-8\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: :tv: <a href=\"http://www.le.com/ptv/vplay/27606964.html\" target=\"_blank\" rel=\"noopener\">JavaScript 数据结构-运算符 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"17-消息队列和事件循环\"><a href=\"#17-消息队列和事件循环\" class=\"headerlink\" title=\"17. 消息队列和事件循环\"></a>17. 消息队列和事件循环</h2><h3 id=\"文章-16\"><a href=\"#文章-16\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">并发模型与事件循环 —— MDN</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/dong-xu/p/7000163.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 事件循环 —— 博客园</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"noopener\">深入浅出 Javascript 事件循环机制 —— 知乎</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014940904#articleHeader7\" target=\"_blank\" rel=\"noopener\">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"noopener\">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"18-setTimeout-setInterval-和-requestAnimationFrame\"><a href=\"#18-setTimeout-setInterval-和-requestAnimationFrame\" class=\"headerlink\" title=\"18. setTimeout, setInterval 和 requestAnimationFrame\"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id=\"文章-17\"><a href=\"#文章-17\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-settimeout.html\" target=\"_blank\" rel=\"noopener\">Window setTimeout() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-setinterval.html\" target=\"_blank\" rel=\"noopener\">Window setInterval() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5aa4c47af265da239866e236\" target=\"_blank\" rel=\"noopener\">关于 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a77f8ce5188257a6d635d76\" target=\"_blank\" rel=\"noopener\">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5861ebf01b69e6006ce61d38\" target=\"_blank\" rel=\"noopener\">原来你是这样的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000005989491\" target=\"_blank\" rel=\"noopener\">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li>\n<li>book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">window.requestAnimationFrame —— MDN</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/onepixel/p/7078617.html\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame 知多少？ —— 博客园</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014661035\" target=\"_blank\" rel=\"noopener\">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000386368\" target=\"_blank\" rel=\"noopener\">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000013909430\" target=\"_blank\" rel=\"noopener\">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li>\n</ul>\n<h3 id=\"视频-9\"><a href=\"#视频-9\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html\" target=\"_blank\" rel=\"noopener\">setTimeout 和 setInterval —— 优酷</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"19-继承-多态和代码复用\"><a href=\"#19-继承-多态和代码复用\" class=\"headerlink\" title=\"19. 继承, 多态和代码复用\"></a>19. 继承, 多态和代码复用</h2><h3 id=\"文章-18\"><a href=\"#文章-18\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/Leo_wl/p/5734794.html\" target=\"_blank\" rel=\"noopener\">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/5cb692658704\" target=\"_blank\" rel=\"noopener\">Javascript 的继承与多态 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59396c96fe88c2006afc2707\" target=\"_blank\" rel=\"noopener\">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/34693209\" target=\"_blank\" rel=\"noopener\">JavaScript 中的“多继承” —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown\" target=\"_blank\" rel=\"noopener\">代码复用模式 —— github</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"20-按位操作符-类数组对象和类型化数组\"><a href=\"#20-按位操作符-类数组对象和类型化数组\" class=\"headerlink\" title=\"20. 按位操作符, 类数组对象和类型化数组\"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id=\"文章-19\"><a href=\"#文章-19\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">按位操作符 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays\" target=\"_blank\" rel=\"noopener\">类数组对象 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" target=\"_blank\" rel=\"noopener\">类型化数组 —— MDN</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/gradolabs/p/4762134.html\" target=\"_blank\" rel=\"noopener\">JavaScript ArrayBuffer 浅析 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"21-DOM-树和渲染过程\"><a href=\"#21-DOM-树和渲染过程\" class=\"headerlink\" title=\"21. DOM 树和渲染过程\"></a>21. DOM 树和渲染过程</h2><h3 id=\"文章-20\"><a href=\"#文章-20\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree\" target=\"_blank\" rel=\"noopener\">如何创建一个 DOM 树 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/htmldom/dom_nodes.asp\" target=\"_blank\" rel=\"noopener\">HTML DOM 节点 —— W3school</a></li>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/dom/node.html\" target=\"_blank\" rel=\"noopener\">DOM 概述 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbbfa61ff4b006ccc41fe\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbc4961ff4b006ccc44fb\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58314efd8ac2470061bb30fd\" target=\"_blank\" rel=\"noopener\">掌握 DOM 操作 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000\" target=\"_blank\" rel=\"noopener\">操作 DOM —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c60691518825396f4f71a1\" target=\"_blank\" rel=\"noopener\">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-10\"><a href=\"#视频-10\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/488\" target=\"_blank\" rel=\"noopener\">DOM 探索之基础详解篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/138\" target=\"_blank\" rel=\"noopener\">DOM 事件探秘 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/530\" target=\"_blank\" rel=\"noopener\">jQuery 基础(二)DOM 篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr19s08l.html\" target=\"_blank\" rel=\"noopener\">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"22-new-与构造函数-instanceof-与实例\"><a href=\"#22-new-与构造函数-instanceof-与实例\" class=\"headerlink\" title=\"22. new 与构造函数, instanceof 与实例\"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id=\"文章-21\"><a href=\"#文章-21\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/oop/basic.html\" target=\"_blank\" rel=\"noopener\">构造函数与 new 命令 —— 阮一峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/SpicyBoiledFish/article/details/71123162\" target=\"_blank\" rel=\"noopener\">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li>\n<li>:book: <a href=\"http://www.php.cn/js-tutorial-376246.html\" target=\"_blank\" rel=\"noopener\">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yin_991/article/details/80954453\" target=\"_blank\" rel=\"noopener\">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/cecilia620/article/details/71158048\" target=\"_blank\" rel=\"noopener\">深入理解 JS—instanceof 和原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/60ffc4831bff\" target=\"_blank\" rel=\"noopener\">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html\" target=\"_blank\" rel=\"noopener\">JavaScript 并非所有的东西都是对象 —— justjavac</a></li>\n<li>:book: <a href=\"https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/\" target=\"_blank\" rel=\"noopener\">JavaScript instanceof 运算符深入剖析 —— IBM</a></li>\n</ul>\n<h3 id=\"视频-11\"><a href=\"#视频-11\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27766889.html\" target=\"_blank\" rel=\"noopener\">改良版的构造函数 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"23-原型继承与原型链\"><a href=\"#23-原型继承与原型链\" class=\"headerlink\" title=\"23. 原型继承与原型链\"></a>23. 原型继承与原型链</h2><h3 id=\"文章-22\"><a href=\"#文章-22\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链 —— MDN</a></li>\n<li>:book: <a href=\"https://github.com/bigdots/blog/issues/1\" target=\"_blank\" rel=\"noopener\">构造函数、原型与原型链 —— github</a></li>\n<li>:book: <a href=\"https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype\" target=\"_blank\" rel=\"noopener\">原型及原型链 —— github(1269 Star)</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004282206\" target=\"_blank\" rel=\"noopener\">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html\" target=\"_blank\" rel=\"noopener\">JavaScript：继承和原型链(译) —— justjavac</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"noopener\">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/the__apollo/article/details/76774698\" target=\"_blank\" rel=\"noopener\">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaotao_css/article/details/72782416\" target=\"_blank\" rel=\"noopener\">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">原型继承 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58f94c9bb123db411953691b\" target=\"_blank\" rel=\"noopener\">JS 原型链与继承别再被问倒了 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5885db221b69e600592253e7\" target=\"_blank\" rel=\"noopener\">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之从原型到原型链 —— 冴羽</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-12\"><a href=\"#视频-12\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27552753.html\" target=\"_blank\" rel=\"noopener\">JS 高级-07-原型链继承 —— 乐视</a></li>\n<li>:tv: <a href=\"https://v.qq.com/x/page/b0511nwa7d3.html\" target=\"_blank\" rel=\"noopener\">JS 原型对象和原型链简介 —— 腾讯视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"24-Object-create-和-Object-assign\"><a href=\"#24-Object-create-和-Object-assign\" class=\"headerlink\" title=\"24. Object.create 和 Object.assign\"></a>24. Object.create 和 Object.assign</h2><h3 id=\"文章-23\"><a href=\"#文章-23\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">Object.create —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\">Object.assign —— MDN</a></li>\n<li>:book: <a href=\"https://www.imooc.com/article/17591\" target=\"_blank\" rel=\"noopener\">Object.create vs Object.assign —— 慕课网手记</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/DeepLies/article/details/52915143\" target=\"_blank\" rel=\"noopener\">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li>\n<li>:book: <a href=\"http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/\" target=\"_blank\" rel=\"noopener\">es6 中 object.create()和 object.assign() —— 风信子博客</a></li>\n<li>:book: <a href=\"https://github.com/saikojosh/Object-Assign-Deep\" target=\"_blank\" rel=\"noopener\">Object-Assign-Deep —— github</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"25-工厂函数和类\"><a href=\"#25-工厂函数和类\" class=\"headerlink\" title=\"25. 工厂函数和类\"></a>25. 工厂函数和类</h2><h3 id=\"文章-24\"><a href=\"#文章-24\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">类 —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000\" target=\"_blank\" rel=\"noopener\">类和实例 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c8c8756fb9a00a681ae5bd\" target=\"_blank\" rel=\"noopener\">【译】ES6 的工厂函数 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/587992c961ff4b0065edf1ff\" target=\"_blank\" rel=\"noopener\">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"26-设计模式\"><a href=\"#26-设计模式\" class=\"headerlink\" title=\"26. 设计模式\"></a>26. 设计模式</h2><h3 id=\"文章-25\"><a href=\"#文章-25\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式 —— 掘金</a></li>\n<li>:book: <a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式 —— 极客学院</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010914032\" target=\"_blank\" rel=\"noopener\">[面试专题]JS 设计模式 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/lxj/javascript.patterns\" target=\"_blank\" rel=\"noopener\">JavaScript Patterns 中译本 —— github</a></li>\n</ul>\n<h3 id=\"视频-13\"><a href=\"#视频-13\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html\" target=\"_blank\" rel=\"noopener\">HTML5 课程大纲 2-11JS 设计模式</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"27-Memoization\"><a href=\"#27-Memoization\" class=\"headerlink\" title=\"27. Memoization\"></a>27. Memoization</h2><h3 id=\"文章-26\"><a href=\"#文章-26\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html\" target=\"_blank\" rel=\"noopener\">JavaScript Memoization —— 司徒正美</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yingshuizy/p/4517102.html\" target=\"_blank\" rel=\"noopener\">memoization 提升递归效率 —— 博客园</a></li>\n<li>:book: <a href=\"http://developer.51cto.com/art/201010/231513.htm\" target=\"_blank\" rel=\"noopener\">如何提升 JavaScript 的递归效率 —— 51CTO</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000016703106\" target=\"_blank\" rel=\"noopener\">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"28-纯函数-函数副作用和状态变化\"><a href=\"#28-纯函数-函数副作用和状态变化\" class=\"headerlink\" title=\"28. 纯函数, 函数副作用和状态变化\"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id=\"文章-27\"><a href=\"#文章-27\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://huziketang.mangojuice.top/books/react/lesson32\" target=\"_blank\" rel=\"noopener\">纯函数(Pure Function) —— React.js 小书</a></li>\n<li>:book: <a href=\"https://ninghao.net/blog/4634\" target=\"_blank\" rel=\"noopener\">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li>\n<li>:book: <a href=\"https://www.jb51.net/article/28079.htm\" target=\"_blank\" rel=\"noopener\">js 函数的副作用分析 —— 脚本之家</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com\" target=\"_blank\" rel=\"noopener\">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/zhangycun/p/9403335.html\" target=\"_blank\" rel=\"noopener\">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/10\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程 —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"29-耗性能操作和时间复杂度\"><a href=\"#29-耗性能操作和时间复杂度\" class=\"headerlink\" title=\"29. 耗性能操作和时间复杂度\"></a>29. 耗性能操作和时间复杂度</h2><h3 id=\"文章-28\"><a href=\"#文章-28\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/entry/593f56528d6d810058a355f4\" target=\"_blank\" rel=\"noopener\">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5a49f7d36fb9a0450a67b269\" target=\"_blank\" rel=\"noopener\">算法的时间复杂度和空间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58d15f1044d90400691834d4\" target=\"_blank\" rel=\"noopener\">算法（一）时间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li>\n<li>:book: <a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"noopener\">Time Complexity Analysis in JavaScript — Jennifer Bland</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"30-JavaScript-引擎\"><a href=\"#30-JavaScript-引擎\" class=\"headerlink\" title=\"30. JavaScript 引擎\"></a>30. JavaScript 引擎</h2><h3 id=\"文章-29\"><a href=\"#文章-29\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://baike.baidu.com/item/javascript引擎/5356108\" target=\"_blank\" rel=\"noopener\">javascript 引擎 —— 百度百科</a></li>\n<li>:book: <a href=\"https://baike.baidu.com/item/V8/6178125\" target=\"_blank\" rel=\"noopener\">V8(JavaScript 引擎) —— 百度百科</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6309f76fb9a01cab2858b1\" target=\"_blank\" rel=\"noopener\">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010819020\" target=\"_blank\" rel=\"noopener\">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012806637\" target=\"_blank\" rel=\"noopener\">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/weirdoQi/p/6609811.html\" target=\"_blank\" rel=\"noopener\">V8 javascript 引擎 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"31-二进制-十六进制-十进制-科学记数法\"><a href=\"#31-二进制-十六进制-十进制-科学记数法\" class=\"headerlink\" title=\"31. 二进制, 十六进制, 十进制, 科学记数法\"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id=\"文章-30\"><a href=\"#文章-30\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.cnblogs.com/gaizai/p/4233780.html\" target=\"_blank\" rel=\"noopener\">二、八、十、十六进制转换(图解篇) —— 博客园</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b93dadaf265da0a857a58a3\" target=\"_blank\" rel=\"noopener\">JavaScript 读写二进制数据 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-14\"><a href=\"#视频-14\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://baishi.baidu.com/watch/7873060963471478456.html\" target=\"_blank\" rel=\"noopener\">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"32-偏函数-柯里化-Compose-和-Pipe\"><a href=\"#32-偏函数-柯里化-Compose-和-Pipe\" class=\"headerlink\" title=\"32. 偏函数, 柯里化, Compose 和 Pipe\"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id=\"文章-31\"><a href=\"#文章-31\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://blog.csdn.net/qq_42129063/article/details/81874314\" target=\"_blank\" rel=\"noopener\">Javascript 函数式编程之偏函数 —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010686144\" target=\"_blank\" rel=\"noopener\">JavaScript 专题之偏函数 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000008626058\" target=\"_blank\" rel=\"noopener\">柯里化和偏函数有什么区别？ —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/neweastsun/article/details/75947785\" target=\"_blank\" rel=\"noopener\">Javascript 偏函数与柯里化 —— CSDN</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html\" target=\"_blank\" rel=\"noopener\">柯里化(curry) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合(compose) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008394749\" target=\"_blank\" rel=\"noopener\">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011447164\" target=\"_blank\" rel=\"noopener\">实现 compose 的五种思路 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015102804\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment\" target=\"_blank\" rel=\"noopener\">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/11\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（二） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"33-代码整洁之道\"><a href=\"#33-代码整洁之道\" class=\"headerlink\" title=\"33. 代码整洁之道\"></a>33. 代码整洁之道</h2><h3 id=\"文章-32\"><a href=\"#文章-32\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 代码整洁之道 —— 边城</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">Javascript 编程风格 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9\" target=\"_blank\" rel=\"noopener\">重构 - 代码整洁之道 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a7d71836fb9a063435ecf51\" target=\"_blank\" rel=\"noopener\">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li>\n<li>:book: <a href=\"http://blog.jobbole.com/23617/\" target=\"_blank\" rel=\"noopener\">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li>\n<li>:book: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">Clean Code concepts adapted for JavaScript —— ryanmcdermott</a></li>\n</ul>\n<p><br></p>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n"},{"title":"计算机相关 单词书📖","date":"2017-12-31T16:00:00.000Z","description":"CS ~ English","toc":0,"_content":"\n单词 | 释义\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\nunder the hood  | 底层\nspecify   |  指定\nget passed in  | 传入 \nsync/async | \nwhatnot | \nin good shape | （运行代码的时候祈祷的\nnest | \ngotchas  | 陷阱\nshortcut | \ninventory |  库存/牛\nneat   | 整齐利落\nscallfold   |  脚手架\nhandy  |  便利\nultimate   | 最终\nrewind  | 倒回\nisolation   |   隔离\nintefere |  妨碍 打扰\ncapture |  捕获\nraw |  原生的\nvanilla js   |    raw js：原生js\nnail  |   钉子 固定  （巩固知识）\nbuilt-in   |   内置的\nnewbies    |   新手\ntutorial    |    教程\nsane   |    合理的明智的\nmodular   |    模块化的\ncardio   |    有氧运动\nhard code   |    写死的代码\nreinstate   |    恢复\nverbose   |    冗余的\nupstream  |   （向上返回）\ndownstream  |   （向下传）\nCRUD acronym  |   \nmanually    |    手动\nDEPRECATED   |   启用\nbottleneck   |   瓶颈\naudit   |   审计\nmonitor   |   监控\nprofile   |   分析\nmemory leaks   |   内存泄漏\nemulate/simulation   |   仿真/模拟\nrefactor  |   重构\nparser   |   解析器\nanonymous   |   匿名\ndeactivated   |   停用\nstats  |    统计数据\noptimization   |   优化\nAST abstract syntax tree  |    抽象语法树\nmeg   |   兆\nthrashing   |   抖动\nidle   |   空闲\ntrigger  |    触发\nGC garbage collector  |   垃圾回收器\nsnapshot  |  快照\nshallow size  |   是指用于存储其本身的内存大小\nretained size  |   释放该对象后对象所占总内存该类的所有实例可支配的内存大小\nheap snapshot  |  堆快照\ncontainment |   容量\noverhead |   开销\ndistribution  |  分配\ntimeline  |  时间轴\ndelegate  |   转交\nprefix/postfix  |  前缀后缀\nAdaptor  |  适配器\nTL;DR  |   too long;dont/didnt read 精华/总结\nconjecture  | 猜测猜想\nThreshold  | 阈值","source":"_posts/cs_english.md","raw":"---\ntitle: 计算机相关 单词书📖\ncategories:\n    - 13 外语\ntags:\ndate: 2018-01-01\ndescription: CS ~ English\ntoc: 0\n---\n\n单词 | 释义\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\nunder the hood  | 底层\nspecify   |  指定\nget passed in  | 传入 \nsync/async | \nwhatnot | \nin good shape | （运行代码的时候祈祷的\nnest | \ngotchas  | 陷阱\nshortcut | \ninventory |  库存/牛\nneat   | 整齐利落\nscallfold   |  脚手架\nhandy  |  便利\nultimate   | 最终\nrewind  | 倒回\nisolation   |   隔离\nintefere |  妨碍 打扰\ncapture |  捕获\nraw |  原生的\nvanilla js   |    raw js：原生js\nnail  |   钉子 固定  （巩固知识）\nbuilt-in   |   内置的\nnewbies    |   新手\ntutorial    |    教程\nsane   |    合理的明智的\nmodular   |    模块化的\ncardio   |    有氧运动\nhard code   |    写死的代码\nreinstate   |    恢复\nverbose   |    冗余的\nupstream  |   （向上返回）\ndownstream  |   （向下传）\nCRUD acronym  |   \nmanually    |    手动\nDEPRECATED   |   启用\nbottleneck   |   瓶颈\naudit   |   审计\nmonitor   |   监控\nprofile   |   分析\nmemory leaks   |   内存泄漏\nemulate/simulation   |   仿真/模拟\nrefactor  |   重构\nparser   |   解析器\nanonymous   |   匿名\ndeactivated   |   停用\nstats  |    统计数据\noptimization   |   优化\nAST abstract syntax tree  |    抽象语法树\nmeg   |   兆\nthrashing   |   抖动\nidle   |   空闲\ntrigger  |    触发\nGC garbage collector  |   垃圾回收器\nsnapshot  |  快照\nshallow size  |   是指用于存储其本身的内存大小\nretained size  |   释放该对象后对象所占总内存该类的所有实例可支配的内存大小\nheap snapshot  |  堆快照\ncontainment |   容量\noverhead |   开销\ndistribution  |  分配\ntimeline  |  时间轴\ndelegate  |   转交\nprefix/postfix  |  前缀后缀\nAdaptor  |  适配器\nTL;DR  |   too long;dont/didnt read 精华/总结\nconjecture  | 猜测猜想\nThreshold  | 阈值","slug":"cs_english","published":1,"updated":"2020-04-29T06:24:21.749Z","_id":"ck94anlyi0000u2s6joms1287","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n<tr>\n<td>under the hood</td>\n<td>底层</td>\n</tr>\n<tr>\n<td>specify</td>\n<td>指定</td>\n</tr>\n<tr>\n<td>get passed in</td>\n<td>传入 </td>\n</tr>\n<tr>\n<td>sync/async</td>\n<td></td>\n</tr>\n<tr>\n<td>whatnot</td>\n<td></td>\n</tr>\n<tr>\n<td>in good shape</td>\n<td>（运行代码的时候祈祷的</td>\n</tr>\n<tr>\n<td>nest</td>\n<td></td>\n</tr>\n<tr>\n<td>gotchas</td>\n<td>陷阱</td>\n</tr>\n<tr>\n<td>shortcut</td>\n<td></td>\n</tr>\n<tr>\n<td>inventory</td>\n<td>库存/牛</td>\n</tr>\n<tr>\n<td>neat</td>\n<td>整齐利落</td>\n</tr>\n<tr>\n<td>scallfold</td>\n<td>脚手架</td>\n</tr>\n<tr>\n<td>handy</td>\n<td>便利</td>\n</tr>\n<tr>\n<td>ultimate</td>\n<td>最终</td>\n</tr>\n<tr>\n<td>rewind</td>\n<td>倒回</td>\n</tr>\n<tr>\n<td>isolation</td>\n<td>隔离</td>\n</tr>\n<tr>\n<td>intefere</td>\n<td>妨碍 打扰</td>\n</tr>\n<tr>\n<td>capture</td>\n<td>捕获</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>原生的</td>\n</tr>\n<tr>\n<td>vanilla js</td>\n<td>raw js：原生js</td>\n</tr>\n<tr>\n<td>nail</td>\n<td>钉子 固定  （巩固知识）</td>\n</tr>\n<tr>\n<td>built-in</td>\n<td>内置的</td>\n</tr>\n<tr>\n<td>newbies</td>\n<td>新手</td>\n</tr>\n<tr>\n<td>tutorial</td>\n<td>教程</td>\n</tr>\n<tr>\n<td>sane</td>\n<td>合理的明智的</td>\n</tr>\n<tr>\n<td>modular</td>\n<td>模块化的</td>\n</tr>\n<tr>\n<td>cardio</td>\n<td>有氧运动</td>\n</tr>\n<tr>\n<td>hard code</td>\n<td>写死的代码</td>\n</tr>\n<tr>\n<td>reinstate</td>\n<td>恢复</td>\n</tr>\n<tr>\n<td>verbose</td>\n<td>冗余的</td>\n</tr>\n<tr>\n<td>upstream</td>\n<td>（向上返回）</td>\n</tr>\n<tr>\n<td>downstream</td>\n<td>（向下传）</td>\n</tr>\n<tr>\n<td>CRUD acronym</td>\n<td></td>\n</tr>\n<tr>\n<td>manually</td>\n<td>手动</td>\n</tr>\n<tr>\n<td>DEPRECATED</td>\n<td>启用</td>\n</tr>\n<tr>\n<td>bottleneck</td>\n<td>瓶颈</td>\n</tr>\n<tr>\n<td>audit</td>\n<td>审计</td>\n</tr>\n<tr>\n<td>monitor</td>\n<td>监控</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>分析</td>\n</tr>\n<tr>\n<td>memory leaks</td>\n<td>内存泄漏</td>\n</tr>\n<tr>\n<td>emulate/simulation</td>\n<td>仿真/模拟</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>解析器</td>\n</tr>\n<tr>\n<td>anonymous</td>\n<td>匿名</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>停用</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>统计数据</td>\n</tr>\n<tr>\n<td>optimization</td>\n<td>优化</td>\n</tr>\n<tr>\n<td>AST abstract syntax tree</td>\n<td>抽象语法树</td>\n</tr>\n<tr>\n<td>meg</td>\n<td>兆</td>\n</tr>\n<tr>\n<td>thrashing</td>\n<td>抖动</td>\n</tr>\n<tr>\n<td>idle</td>\n<td>空闲</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发</td>\n</tr>\n<tr>\n<td>GC garbage collector</td>\n<td>垃圾回收器</td>\n</tr>\n<tr>\n<td>snapshot</td>\n<td>快照</td>\n</tr>\n<tr>\n<td>shallow size</td>\n<td>是指用于存储其本身的内存大小</td>\n</tr>\n<tr>\n<td>retained size</td>\n<td>释放该对象后对象所占总内存该类的所有实例可支配的内存大小</td>\n</tr>\n<tr>\n<td>heap snapshot</td>\n<td>堆快照</td>\n</tr>\n<tr>\n<td>containment</td>\n<td>容量</td>\n</tr>\n<tr>\n<td>overhead</td>\n<td>开销</td>\n</tr>\n<tr>\n<td>distribution</td>\n<td>分配</td>\n</tr>\n<tr>\n<td>timeline</td>\n<td>时间轴</td>\n</tr>\n<tr>\n<td>delegate</td>\n<td>转交</td>\n</tr>\n<tr>\n<td>prefix/postfix</td>\n<td>前缀后缀</td>\n</tr>\n<tr>\n<td>Adaptor</td>\n<td>适配器</td>\n</tr>\n<tr>\n<td>TL;DR</td>\n<td>too long;dont/didnt read 精华/总结</td>\n</tr>\n<tr>\n<td>conjecture</td>\n<td>猜测猜想</td>\n</tr>\n<tr>\n<td>Threshold</td>\n<td>阈值</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n<tr>\n<td>under the hood</td>\n<td>底层</td>\n</tr>\n<tr>\n<td>specify</td>\n<td>指定</td>\n</tr>\n<tr>\n<td>get passed in</td>\n<td>传入 </td>\n</tr>\n<tr>\n<td>sync/async</td>\n<td></td>\n</tr>\n<tr>\n<td>whatnot</td>\n<td></td>\n</tr>\n<tr>\n<td>in good shape</td>\n<td>（运行代码的时候祈祷的</td>\n</tr>\n<tr>\n<td>nest</td>\n<td></td>\n</tr>\n<tr>\n<td>gotchas</td>\n<td>陷阱</td>\n</tr>\n<tr>\n<td>shortcut</td>\n<td></td>\n</tr>\n<tr>\n<td>inventory</td>\n<td>库存/牛</td>\n</tr>\n<tr>\n<td>neat</td>\n<td>整齐利落</td>\n</tr>\n<tr>\n<td>scallfold</td>\n<td>脚手架</td>\n</tr>\n<tr>\n<td>handy</td>\n<td>便利</td>\n</tr>\n<tr>\n<td>ultimate</td>\n<td>最终</td>\n</tr>\n<tr>\n<td>rewind</td>\n<td>倒回</td>\n</tr>\n<tr>\n<td>isolation</td>\n<td>隔离</td>\n</tr>\n<tr>\n<td>intefere</td>\n<td>妨碍 打扰</td>\n</tr>\n<tr>\n<td>capture</td>\n<td>捕获</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>原生的</td>\n</tr>\n<tr>\n<td>vanilla js</td>\n<td>raw js：原生js</td>\n</tr>\n<tr>\n<td>nail</td>\n<td>钉子 固定  （巩固知识）</td>\n</tr>\n<tr>\n<td>built-in</td>\n<td>内置的</td>\n</tr>\n<tr>\n<td>newbies</td>\n<td>新手</td>\n</tr>\n<tr>\n<td>tutorial</td>\n<td>教程</td>\n</tr>\n<tr>\n<td>sane</td>\n<td>合理的明智的</td>\n</tr>\n<tr>\n<td>modular</td>\n<td>模块化的</td>\n</tr>\n<tr>\n<td>cardio</td>\n<td>有氧运动</td>\n</tr>\n<tr>\n<td>hard code</td>\n<td>写死的代码</td>\n</tr>\n<tr>\n<td>reinstate</td>\n<td>恢复</td>\n</tr>\n<tr>\n<td>verbose</td>\n<td>冗余的</td>\n</tr>\n<tr>\n<td>upstream</td>\n<td>（向上返回）</td>\n</tr>\n<tr>\n<td>downstream</td>\n<td>（向下传）</td>\n</tr>\n<tr>\n<td>CRUD acronym</td>\n<td></td>\n</tr>\n<tr>\n<td>manually</td>\n<td>手动</td>\n</tr>\n<tr>\n<td>DEPRECATED</td>\n<td>启用</td>\n</tr>\n<tr>\n<td>bottleneck</td>\n<td>瓶颈</td>\n</tr>\n<tr>\n<td>audit</td>\n<td>审计</td>\n</tr>\n<tr>\n<td>monitor</td>\n<td>监控</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>分析</td>\n</tr>\n<tr>\n<td>memory leaks</td>\n<td>内存泄漏</td>\n</tr>\n<tr>\n<td>emulate/simulation</td>\n<td>仿真/模拟</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>解析器</td>\n</tr>\n<tr>\n<td>anonymous</td>\n<td>匿名</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>停用</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>统计数据</td>\n</tr>\n<tr>\n<td>optimization</td>\n<td>优化</td>\n</tr>\n<tr>\n<td>AST abstract syntax tree</td>\n<td>抽象语法树</td>\n</tr>\n<tr>\n<td>meg</td>\n<td>兆</td>\n</tr>\n<tr>\n<td>thrashing</td>\n<td>抖动</td>\n</tr>\n<tr>\n<td>idle</td>\n<td>空闲</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发</td>\n</tr>\n<tr>\n<td>GC garbage collector</td>\n<td>垃圾回收器</td>\n</tr>\n<tr>\n<td>snapshot</td>\n<td>快照</td>\n</tr>\n<tr>\n<td>shallow size</td>\n<td>是指用于存储其本身的内存大小</td>\n</tr>\n<tr>\n<td>retained size</td>\n<td>释放该对象后对象所占总内存该类的所有实例可支配的内存大小</td>\n</tr>\n<tr>\n<td>heap snapshot</td>\n<td>堆快照</td>\n</tr>\n<tr>\n<td>containment</td>\n<td>容量</td>\n</tr>\n<tr>\n<td>overhead</td>\n<td>开销</td>\n</tr>\n<tr>\n<td>distribution</td>\n<td>分配</td>\n</tr>\n<tr>\n<td>timeline</td>\n<td>时间轴</td>\n</tr>\n<tr>\n<td>delegate</td>\n<td>转交</td>\n</tr>\n<tr>\n<td>prefix/postfix</td>\n<td>前缀后缀</td>\n</tr>\n<tr>\n<td>Adaptor</td>\n<td>适配器</td>\n</tr>\n<tr>\n<td>TL;DR</td>\n<td>too long;dont/didnt read 精华/总结</td>\n</tr>\n<tr>\n<td>conjecture</td>\n<td>猜测猜想</td>\n</tr>\n<tr>\n<td>Threshold</td>\n<td>阈值</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"一些前端常用工具库～","date":"2017-12-31T16:00:00.000Z","description":"分享一些用的顺手的前端效率工具～","toc":1,"_content":"#### http-server 本地快速静态资源服务器\n- npm 全局安装\n- 执行`hs`命令\n- 即可在terminal当前路径创建一个本地http静态资源服务器，方便调试\n\n#### nrm npm快速切换国内源\n- npm全局安装nrm\n- `nrm ls`命令列出当前可使用的国内npm源，eg. taobao\n- `nrm use xx`即可切换到某一源\n\n#### nvm 快速切换node版本\n- nvm官网安装\n- `nvm list`列出当前机器已经安装的node版本\n- `nvm install vxx`安装某一版本node\n- `nvm use`切换到某一版本node\n\n#### parcel 极简配置版**webpack**\n- npm全局安装parcel`npm i parcel-bundler -g`\n- `parcel setup/index.html`即可创建一个本地服务器,并构建打包当前html的依赖\n","source":"_posts/tools.md","raw":"---\ntitle: 一些前端常用工具库～\ncategories:\n    - 07 工具库 # 一级分类\ntags:\ndate: 2018-01-01\ndescription: 分享一些用的顺手的前端效率工具～\ntoc: 1\n---\n#### http-server 本地快速静态资源服务器\n- npm 全局安装\n- 执行`hs`命令\n- 即可在terminal当前路径创建一个本地http静态资源服务器，方便调试\n\n#### nrm npm快速切换国内源\n- npm全局安装nrm\n- `nrm ls`命令列出当前可使用的国内npm源，eg. taobao\n- `nrm use xx`即可切换到某一源\n\n#### nvm 快速切换node版本\n- nvm官网安装\n- `nvm list`列出当前机器已经安装的node版本\n- `nvm install vxx`安装某一版本node\n- `nvm use`切换到某一版本node\n\n#### parcel 极简配置版**webpack**\n- npm全局安装parcel`npm i parcel-bundler -g`\n- `parcel setup/index.html`即可创建一个本地服务器,并构建打包当前html的依赖\n","slug":"tools","published":1,"updated":"2020-04-18T00:49:45.062Z","_id":"ck94anlyu0001u2s6smgyds7v","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"http-server-本地快速静态资源服务器\"><a href=\"#http-server-本地快速静态资源服务器\" class=\"headerlink\" title=\"http-server 本地快速静态资源服务器\"></a>http-server 本地快速静态资源服务器</h4><ul>\n<li>npm 全局安装</li>\n<li>执行<code>hs</code>命令</li>\n<li>即可在terminal当前路径创建一个本地http静态资源服务器，方便调试</li>\n</ul>\n<h4 id=\"nrm-npm快速切换国内源\"><a href=\"#nrm-npm快速切换国内源\" class=\"headerlink\" title=\"nrm npm快速切换国内源\"></a>nrm npm快速切换国内源</h4><ul>\n<li>npm全局安装nrm</li>\n<li><code>nrm ls</code>命令列出当前可使用的国内npm源，eg. taobao</li>\n<li><code>nrm use xx</code>即可切换到某一源</li>\n</ul>\n<h4 id=\"nvm-快速切换node版本\"><a href=\"#nvm-快速切换node版本\" class=\"headerlink\" title=\"nvm 快速切换node版本\"></a>nvm 快速切换node版本</h4><ul>\n<li>nvm官网安装</li>\n<li><code>nvm list</code>列出当前机器已经安装的node版本</li>\n<li><code>nvm install vxx</code>安装某一版本node</li>\n<li><code>nvm use</code>切换到某一版本node</li>\n</ul>\n<h4 id=\"parcel-极简配置版webpack\"><a href=\"#parcel-极简配置版webpack\" class=\"headerlink\" title=\"parcel 极简配置版webpack\"></a>parcel 极简配置版<strong>webpack</strong></h4><ul>\n<li>npm全局安装parcel<code>npm i parcel-bundler -g</code></li>\n<li><code>parcel setup/index.html</code>即可创建一个本地服务器,并构建打包当前html的依赖</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"http-server-本地快速静态资源服务器\"><a href=\"#http-server-本地快速静态资源服务器\" class=\"headerlink\" title=\"http-server 本地快速静态资源服务器\"></a>http-server 本地快速静态资源服务器</h4><ul>\n<li>npm 全局安装</li>\n<li>执行<code>hs</code>命令</li>\n<li>即可在terminal当前路径创建一个本地http静态资源服务器，方便调试</li>\n</ul>\n<h4 id=\"nrm-npm快速切换国内源\"><a href=\"#nrm-npm快速切换国内源\" class=\"headerlink\" title=\"nrm npm快速切换国内源\"></a>nrm npm快速切换国内源</h4><ul>\n<li>npm全局安装nrm</li>\n<li><code>nrm ls</code>命令列出当前可使用的国内npm源，eg. taobao</li>\n<li><code>nrm use xx</code>即可切换到某一源</li>\n</ul>\n<h4 id=\"nvm-快速切换node版本\"><a href=\"#nvm-快速切换node版本\" class=\"headerlink\" title=\"nvm 快速切换node版本\"></a>nvm 快速切换node版本</h4><ul>\n<li>nvm官网安装</li>\n<li><code>nvm list</code>列出当前机器已经安装的node版本</li>\n<li><code>nvm install vxx</code>安装某一版本node</li>\n<li><code>nvm use</code>切换到某一版本node</li>\n</ul>\n<h4 id=\"parcel-极简配置版webpack\"><a href=\"#parcel-极简配置版webpack\" class=\"headerlink\" title=\"parcel 极简配置版webpack\"></a>parcel 极简配置版<strong>webpack</strong></h4><ul>\n<li>npm全局安装parcel<code>npm i parcel-bundler -g</code></li>\n<li><code>parcel setup/index.html</code>即可创建一个本地服务器,并构建打包当前html的依赖</li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 番外篇 - Devtools中的”VM“","date":"2020-04-05T16:00:00.000Z","description":"为什么经常有脚本的“文件名”是\"[VM](XXXX \"？？","toc":1,"top":0,"_content":"\n## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","source":"_posts/vm_in_devtools.md","raw":"---\ntitle: Devtools 老司机养成 - 番外篇 - Devtools中的”VM“\ncategories:\n    - 08 调试 # 一级分类\ntags:\ndate: 2020-04-06\ndescription: 为什么经常有脚本的“文件名”是\"[VM](XXXX \"？？\ntoc: 1\ntop: 0\n---\n\n## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","slug":"vm_in_devtools","published":1,"updated":"2020-04-18T00:49:45.080Z","_id":"ck94anlz10003u2s61s8s144u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n"},{"title":"ML10 训练卷积神经网络 识别手写数字","date":"2020-04-24T16:00:00.000Z","description":"Javascript玩转机器学习10","toc":1,"top":0,"_content":"\n![先看一下简单训练的预测效果](/images/ai/001.gif)\n\n## 加载MNIST数据集\n- MNIST:巨大的训练集雪碧图,以手写数字图片组成\n\n- 资源文件位置\n```\n/js-ml-code/data/mnist\n  mnist_images.png\n  mnist_labels_uint8\n```\n\n- 给资源文件建立服务器供解析脚本访问\n```terminal,bash\nhs data --cors\n```\n其中--cors表示允许跨域访问\n\n- 加载20组数据\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { MnistData } from './data';\n\nwindow.onload = async () => {\n    const data = new MnistData();\n    await data.load();//加载资源\n    const examples = data.nextTestBatch(20);//获取20组验证集数据\n    console.log(examples)\n}\n```\n\n- 打印出的examples：\n![](/images/ai/55.png)\n![](/images/ai/57.png)\n\n- tensorflow的splice api\n![](/images/ai/58.png)\n\n- 用tensorflow的api和canvas显示出20组图片\n```javascript\nconst surface = tfvis.visor().surface({ name: '输入示例' });\nfor (let i = 0; i < 20; i += 1) {\n\n//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784\n//console.log(examples.xs.slice([i, 0], [1, 784]))\n\n//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏\n\n//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的\n\n//tensor.reshape：tensor格式转换\n    const imageTensor = tf.tidy(() => {\n        return examples.xs\n            .slice([i, 0], [1, 784])  \n            .reshape([28, 28, 1]);\t//将一维数组转换成三维黑白图片格式\n    });\n\n    const canvas = document.createElement('canvas');\n    canvas.width = 28;\n    canvas.height = 28;\n    canvas.style = 'margin: 4px';\n    await tf.browser.toPixels(imageTensor, canvas);\n    surface.drawArea.appendChild(canvas);\n}\n```\n\n- 显示效果：\n\n![](/images/ai/56.png)\n\n## 卷积神经网络\n\n#### 为什么要用卷积神经网络\n- 图片数据量大，运算量大，例如一个200\\*200像素的彩色图片：200\\*200\\*3=120,000\n- 卷积神经网络能模拟人类的视觉处理流程，高效提取特征\n\n\n#### 卷积神经网络的结构\n##### 卷积层\n- [image kernels网站了解图像卷积核](setosa.io/ev/image-kernels)\n- 图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”\n- ![卷积](/images/ai/59.png)\n- 图片上的3X3的小矩阵，就是用于卷积以提取图像特征的**图像卷积核**\n- 使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合\n- **卷积层**有权重，需要训练，其权重就是**卷积核**\n\n##### 池化层\n- 优化层\n- 最大池化层用于提取**最强的特征**\n- 扩大感受视野，减少计算量\n- 池化层是固定的，不需要训练\n\n##### dense全链接层\n- 作为输出层\n- 作为分类器\n- 有权重，需要训练\n\n## 构建卷积神经网络代码\n```javascript\n\nconst model = tf.sequential();\n//添加一个二位卷积层\nmodel.add(tf.layers.conv2d({\n    inputShape: [28, 28, 1],\n    kernelSize: 5,\t//卷积核的大小是5X5的矩阵\n    filters: 8,\t//应用8种图像卷积核\n    strides: 1,\t//移动步长，每一个像素单元都进行卷积操作\n    activation: 'relu',\t//激活函数，移除掉无用的特征（特征<0就废弃\n    kernelInitializer: 'varianceScaling'\t//可以不设置，设置了可以加快收敛速度\n}));\n\n//最大池化层\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2], //尺寸是2X2\n    strides: [2, 2]\t//移动步长，每隔两个像素单元进行一次卷积操作\n}));\n\n// 重复上述两个层\nmodel.add(tf.layers.conv2d({\n    kernelSize: 5,\n    filters: 16,\t//需要提取更多特征\n    strides: 1,\n    activation: 'relu',\n    kernelInitializer: 'varianceScaling'\n}));\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2],\n    strides: [2, 2]\n}));\n\n//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层\nmodel.add(tf.layers.flatten());\n\n\nmodel.add(tf.layers.dense({\n    units: 10,\t\t//最终输出0-9十个分类\n    activation: 'softmax',\n    kernelInitializer: 'varianceScaling'\n}));\n```\n\n## 训练模型\n```javascript\n//训练参数\nmodel.compile({\n    loss: 'categoricalCrossentropy',\t//交叉熵损失函数\n    optimizer: tf.train.adam(),\t//优化器\n    metrics: ['accuracy']\t//准确度度量\n});\n\n//训练集数据\nconst [trainXs, trainYs] = tf.tidy(() => {\n    const d = data.nextTrainBatch(1000);\n    return [\n        d.xs.reshape([1000, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//验证集数据\nconst [testXs, testYs] = tf.tidy(() => {\n    const d = data.nextTestBatch(200);\n    return [\n        d.xs.reshape([200, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//训练\nawait model.fit(trainXs, trainYs, {\n    validationData: [testXs, testYs],\n    batchSize: 500,\n    epochs: 50,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss', 'acc', 'val_acc'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n- 训练效果：\n![卷积训练](/images/ai/60.png)\n\n## 使用模型预测识别canvas绘制数字\n- html:\n```\n<script src=\"script.js\"></script>\n<canvas width=\"300\" height=\"300\" style=\"border: 2px solid #666;\"></canvas>\n<br>\n<button onclick=\"window.clear();\" style=\"margin: 4px;\">清除</button>\n<button onclick=\"window.predict();\" style=\"margin: 4px;\">预测</button>\n```\n\n- js:\n```javascript\nconst canvas = document.querySelector('canvas');\n\ncanvas.addEventListener('mousemove', (e) => {\nif (e.buttons === 1) {\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'rgb(255,255,255)';\n        ctx.fillRect(e.offsetX, e.offsetY, 25, 25);\n    }\n});\n\n//黑底画板\nwindow.clear = () => {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, 300, 300);\n};\n\nclear();\n\n```\n\n- 进行预测：\n```javascript\nwindow.predict = () => {\nconst input = tf.tidy(() => {\n    return tf.image.resizeBilinear(\t\t//转换图像tensor尺寸\n        tf.browser.fromPixels(canvas),\t//canvas转换为tensor\n        [28, 28],\t//转换成28*28\n        true\n    ).slice([0, 0, 0], [28, 28, 1])\t//canvas图片是彩色图片，通过slice转换为黑白图片\n    .toFloat()\t//训练数据进行过归一化，因此预测值也要归一化\n    .div(255)\t//归一化\n    .reshape([1, 28, 28, 1]);\t//和神经网络第一层的输入格式统一\n});\nconst pred = model.predict(input).argMax(1);\nalert(`预测结果为 ${pred.dataSync()[0]}`);\n};\n```\n\n![预测效果](/images/ai/001.gif)\n\n---\n<small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br/>\n本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small>\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_10_handwriting_number.md","raw":"---\ntitle: ML10 训练卷积神经网络 识别手写数字\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-25\ndescription: Javascript玩转机器学习10\ntoc: 1\ntop: 0\n---\n\n![先看一下简单训练的预测效果](/images/ai/001.gif)\n\n## 加载MNIST数据集\n- MNIST:巨大的训练集雪碧图,以手写数字图片组成\n\n- 资源文件位置\n```\n/js-ml-code/data/mnist\n  mnist_images.png\n  mnist_labels_uint8\n```\n\n- 给资源文件建立服务器供解析脚本访问\n```terminal,bash\nhs data --cors\n```\n其中--cors表示允许跨域访问\n\n- 加载20组数据\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { MnistData } from './data';\n\nwindow.onload = async () => {\n    const data = new MnistData();\n    await data.load();//加载资源\n    const examples = data.nextTestBatch(20);//获取20组验证集数据\n    console.log(examples)\n}\n```\n\n- 打印出的examples：\n![](/images/ai/55.png)\n![](/images/ai/57.png)\n\n- tensorflow的splice api\n![](/images/ai/58.png)\n\n- 用tensorflow的api和canvas显示出20组图片\n```javascript\nconst surface = tfvis.visor().surface({ name: '输入示例' });\nfor (let i = 0; i < 20; i += 1) {\n\n//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784\n//console.log(examples.xs.slice([i, 0], [1, 784]))\n\n//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏\n\n//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的\n\n//tensor.reshape：tensor格式转换\n    const imageTensor = tf.tidy(() => {\n        return examples.xs\n            .slice([i, 0], [1, 784])  \n            .reshape([28, 28, 1]);\t//将一维数组转换成三维黑白图片格式\n    });\n\n    const canvas = document.createElement('canvas');\n    canvas.width = 28;\n    canvas.height = 28;\n    canvas.style = 'margin: 4px';\n    await tf.browser.toPixels(imageTensor, canvas);\n    surface.drawArea.appendChild(canvas);\n}\n```\n\n- 显示效果：\n\n![](/images/ai/56.png)\n\n## 卷积神经网络\n\n#### 为什么要用卷积神经网络\n- 图片数据量大，运算量大，例如一个200\\*200像素的彩色图片：200\\*200\\*3=120,000\n- 卷积神经网络能模拟人类的视觉处理流程，高效提取特征\n\n\n#### 卷积神经网络的结构\n##### 卷积层\n- [image kernels网站了解图像卷积核](setosa.io/ev/image-kernels)\n- 图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”\n- ![卷积](/images/ai/59.png)\n- 图片上的3X3的小矩阵，就是用于卷积以提取图像特征的**图像卷积核**\n- 使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合\n- **卷积层**有权重，需要训练，其权重就是**卷积核**\n\n##### 池化层\n- 优化层\n- 最大池化层用于提取**最强的特征**\n- 扩大感受视野，减少计算量\n- 池化层是固定的，不需要训练\n\n##### dense全链接层\n- 作为输出层\n- 作为分类器\n- 有权重，需要训练\n\n## 构建卷积神经网络代码\n```javascript\n\nconst model = tf.sequential();\n//添加一个二位卷积层\nmodel.add(tf.layers.conv2d({\n    inputShape: [28, 28, 1],\n    kernelSize: 5,\t//卷积核的大小是5X5的矩阵\n    filters: 8,\t//应用8种图像卷积核\n    strides: 1,\t//移动步长，每一个像素单元都进行卷积操作\n    activation: 'relu',\t//激活函数，移除掉无用的特征（特征<0就废弃\n    kernelInitializer: 'varianceScaling'\t//可以不设置，设置了可以加快收敛速度\n}));\n\n//最大池化层\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2], //尺寸是2X2\n    strides: [2, 2]\t//移动步长，每隔两个像素单元进行一次卷积操作\n}));\n\n// 重复上述两个层\nmodel.add(tf.layers.conv2d({\n    kernelSize: 5,\n    filters: 16,\t//需要提取更多特征\n    strides: 1,\n    activation: 'relu',\n    kernelInitializer: 'varianceScaling'\n}));\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2],\n    strides: [2, 2]\n}));\n\n//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层\nmodel.add(tf.layers.flatten());\n\n\nmodel.add(tf.layers.dense({\n    units: 10,\t\t//最终输出0-9十个分类\n    activation: 'softmax',\n    kernelInitializer: 'varianceScaling'\n}));\n```\n\n## 训练模型\n```javascript\n//训练参数\nmodel.compile({\n    loss: 'categoricalCrossentropy',\t//交叉熵损失函数\n    optimizer: tf.train.adam(),\t//优化器\n    metrics: ['accuracy']\t//准确度度量\n});\n\n//训练集数据\nconst [trainXs, trainYs] = tf.tidy(() => {\n    const d = data.nextTrainBatch(1000);\n    return [\n        d.xs.reshape([1000, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//验证集数据\nconst [testXs, testYs] = tf.tidy(() => {\n    const d = data.nextTestBatch(200);\n    return [\n        d.xs.reshape([200, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//训练\nawait model.fit(trainXs, trainYs, {\n    validationData: [testXs, testYs],\n    batchSize: 500,\n    epochs: 50,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss', 'acc', 'val_acc'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n- 训练效果：\n![卷积训练](/images/ai/60.png)\n\n## 使用模型预测识别canvas绘制数字\n- html:\n```\n<script src=\"script.js\"></script>\n<canvas width=\"300\" height=\"300\" style=\"border: 2px solid #666;\"></canvas>\n<br>\n<button onclick=\"window.clear();\" style=\"margin: 4px;\">清除</button>\n<button onclick=\"window.predict();\" style=\"margin: 4px;\">预测</button>\n```\n\n- js:\n```javascript\nconst canvas = document.querySelector('canvas');\n\ncanvas.addEventListener('mousemove', (e) => {\nif (e.buttons === 1) {\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'rgb(255,255,255)';\n        ctx.fillRect(e.offsetX, e.offsetY, 25, 25);\n    }\n});\n\n//黑底画板\nwindow.clear = () => {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, 300, 300);\n};\n\nclear();\n\n```\n\n- 进行预测：\n```javascript\nwindow.predict = () => {\nconst input = tf.tidy(() => {\n    return tf.image.resizeBilinear(\t\t//转换图像tensor尺寸\n        tf.browser.fromPixels(canvas),\t//canvas转换为tensor\n        [28, 28],\t//转换成28*28\n        true\n    ).slice([0, 0, 0], [28, 28, 1])\t//canvas图片是彩色图片，通过slice转换为黑白图片\n    .toFloat()\t//训练数据进行过归一化，因此预测值也要归一化\n    .div(255)\t//归一化\n    .reshape([1, 28, 28, 1]);\t//和神经网络第一层的输入格式统一\n});\nconst pred = model.predict(input).argMax(1);\nalert(`预测结果为 ${pred.dataSync()[0]}`);\n};\n```\n\n![预测效果](/images/ai/001.gif)\n\n---\n<small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br/>\n本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small>\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_10_handwriting_number","published":1,"updated":"2020-04-29T07:23:54.644Z","_id":"ck9kpporo0000tcy6tgrn40o1","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/ai/001.gif\" alt=\"先看一下简单训练的预测效果\"></p>\n<h2 id=\"加载MNIST数据集\"><a href=\"#加载MNIST数据集\" class=\"headerlink\" title=\"加载MNIST数据集\"></a>加载MNIST数据集</h2><ul>\n<li><p>MNIST:巨大的训练集雪碧图,以手写数字图片组成</p>\n</li>\n<li><p>资源文件位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/js-ml-code/data/mnist</span><br><span class=\"line\">  mnist_images.png</span><br><span class=\"line\">  mnist_labels_uint8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给资源文件建立服务器供解析脚本访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中–cors表示允许跨域访问</p>\n<ul>\n<li><p>加载20组数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MnistData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> MnistData();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> data.load();<span class=\"comment\">//加载资源</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> examples = data.nextTestBatch(<span class=\"number\">20</span>);<span class=\"comment\">//获取20组验证集数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(examples)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印出的examples：<br><img src=\"/images/ai/55.png\" alt><br><img src=\"/images/ai/57.png\" alt></p>\n</li>\n<li><p>tensorflow的splice api<br><img src=\"/images/ai/58.png\" alt></p>\n</li>\n<li><p>用tensorflow的api和canvas显示出20组图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(examples.xs.slice([i, 0], [1, 784]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tensor.reshape：tensor格式转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> imageTensor = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> examples.xs</span><br><span class=\"line\">            .slice([i, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">784</span>])  </span><br><span class=\"line\">            .reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//将一维数组转换成三维黑白图片格式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    canvas.width = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.height = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.style = <span class=\"string\">'margin: 4px'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> tf.browser.toPixels(imageTensor, canvas);</span><br><span class=\"line\">    surface.drawArea.appendChild(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示效果：</p>\n</li>\n</ul>\n<p><img src=\"/images/ai/56.png\" alt></p>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h4 id=\"为什么要用卷积神经网络\"><a href=\"#为什么要用卷积神经网络\" class=\"headerlink\" title=\"为什么要用卷积神经网络\"></a>为什么要用卷积神经网络</h4><ul>\n<li>图片数据量大，运算量大，例如一个200*200像素的彩色图片：200*200*3=120,000</li>\n<li>卷积神经网络能模拟人类的视觉处理流程，高效提取特征</li>\n</ul>\n<h4 id=\"卷积神经网络的结构\"><a href=\"#卷积神经网络的结构\" class=\"headerlink\" title=\"卷积神经网络的结构\"></a>卷积神经网络的结构</h4><h5 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h5><ul>\n<li><a href=\"setosa.io/ev/image-kernels\">image kernels网站了解图像卷积核</a></li>\n<li>图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”</li>\n<li><img src=\"/images/ai/59.png\" alt=\"卷积\"></li>\n<li>图片上的3X3的小矩阵，就是用于卷积以提取图像特征的<strong>图像卷积核</strong></li>\n<li>使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合</li>\n<li><strong>卷积层</strong>有权重，需要训练，其权重就是<strong>卷积核</strong></li>\n</ul>\n<h5 id=\"池化层\"><a href=\"#池化层\" class=\"headerlink\" title=\"池化层\"></a>池化层</h5><ul>\n<li>优化层</li>\n<li>最大池化层用于提取<strong>最强的特征</strong></li>\n<li>扩大感受视野，减少计算量</li>\n<li>池化层是固定的，不需要训练</li>\n</ul>\n<h5 id=\"dense全链接层\"><a href=\"#dense全链接层\" class=\"headerlink\" title=\"dense全链接层\"></a>dense全链接层</h5><ul>\n<li>作为输出层</li>\n<li>作为分类器</li>\n<li>有权重，需要训练</li>\n</ul>\n<h2 id=\"构建卷积神经网络代码\"><a href=\"#构建卷积神经网络代码\" class=\"headerlink\" title=\"构建卷积神经网络代码\"></a>构建卷积神经网络代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"><span class=\"comment\">//添加一个二位卷积层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    inputShape: [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,\t<span class=\"comment\">//卷积核的大小是5X5的矩阵</span></span><br><span class=\"line\">    filters: <span class=\"number\">8</span>,\t<span class=\"comment\">//应用8种图像卷积核</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,\t<span class=\"comment\">//移动步长，每一个像素单元都进行卷积操作</span></span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,\t<span class=\"comment\">//激活函数，移除掉无用的特征（特征&lt;0就废弃</span></span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span>\t<span class=\"comment\">//可以不设置，设置了可以加快收敛速度</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大池化层</span></span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"comment\">//尺寸是2X2</span></span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]\t<span class=\"comment\">//移动步长，每隔两个像素单元进行一次卷积操作</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重复上述两个层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">    filters: <span class=\"number\">16</span>,\t<span class=\"comment\">//需要提取更多特征</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层</span></span><br><span class=\"line\">model.add(tf.layers.flatten());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,\t\t<span class=\"comment\">//最终输出0-9十个分类</span></span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练参数</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: <span class=\"string\">'categoricalCrossentropy'</span>,\t<span class=\"comment\">//交叉熵损失函数</span></span><br><span class=\"line\">    optimizer: tf.train.adam(),\t<span class=\"comment\">//优化器</span></span><br><span class=\"line\">    metrics: [<span class=\"string\">'accuracy'</span>]\t<span class=\"comment\">//准确度度量</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [trainXs, trainYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTrainBatch(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">1000</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [testXs, testYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTestBatch(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">200</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(trainXs, trainYs, &#123;</span><br><span class=\"line\">    validationData: [testXs, testYs],</span><br><span class=\"line\">    batchSize: <span class=\"number\">500</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">50</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>, <span class=\"string\">'acc'</span>, <span class=\"string\">'val_acc'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练效果：<br><img src=\"/images/ai/60.png\" alt=\"卷积训练\"></li>\n</ul>\n<h2 id=\"使用模型预测识别canvas绘制数字\"><a href=\"#使用模型预测识别canvas绘制数字\" class=\"headerlink\" title=\"使用模型预测识别canvas绘制数字\"></a>使用模型预测识别canvas绘制数字</h2><ul>\n<li><p>html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;canvas width=&quot;300&quot; height=&quot;300&quot; style=&quot;border: 2px solid #666;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.clear();&quot; style=&quot;margin: 4px;&quot;&gt;清除&lt;/button&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.predict();&quot; style=&quot;margin: 4px;&quot;&gt;预测&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (e.buttons === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgb(255,255,255)'</span>;</span><br><span class=\"line\">        ctx.fillRect(e.offsetX, e.offsetY, <span class=\"number\">25</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//黑底画板</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgb(0,0,0)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">clear();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行预测：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.image.resizeBilinear(\t\t<span class=\"comment\">//转换图像tensor尺寸</span></span><br><span class=\"line\">        tf.browser.fromPixels(canvas),\t<span class=\"comment\">//canvas转换为tensor</span></span><br><span class=\"line\">        [<span class=\"number\">28</span>, <span class=\"number\">28</span>],\t<span class=\"comment\">//转换成28*28</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    ).slice([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>])\t<span class=\"comment\">//canvas图片是彩色图片，通过slice转换为黑白图片</span></span><br><span class=\"line\">    .toFloat()\t<span class=\"comment\">//训练数据进行过归一化，因此预测值也要归一化</span></span><br><span class=\"line\">    .div(<span class=\"number\">255</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">    .reshape([<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//和神经网络第一层的输入格式统一</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pred = model.predict(input).argMax(<span class=\"number\">1</span>);</span><br><span class=\"line\">alert(<span class=\"string\">`预测结果为 <span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/ai/001.gif\" alt=\"预测效果\"></p>\n<hr>\n<p><small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br><br>本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/ai/001.gif\" alt=\"先看一下简单训练的预测效果\"></p>\n<h2 id=\"加载MNIST数据集\"><a href=\"#加载MNIST数据集\" class=\"headerlink\" title=\"加载MNIST数据集\"></a>加载MNIST数据集</h2><ul>\n<li><p>MNIST:巨大的训练集雪碧图,以手写数字图片组成</p>\n</li>\n<li><p>资源文件位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/js-ml-code/data/mnist</span><br><span class=\"line\">  mnist_images.png</span><br><span class=\"line\">  mnist_labels_uint8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给资源文件建立服务器供解析脚本访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中–cors表示允许跨域访问</p>\n<ul>\n<li><p>加载20组数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MnistData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> MnistData();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> data.load();<span class=\"comment\">//加载资源</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> examples = data.nextTestBatch(<span class=\"number\">20</span>);<span class=\"comment\">//获取20组验证集数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(examples)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印出的examples：<br><img src=\"/images/ai/55.png\" alt><br><img src=\"/images/ai/57.png\" alt></p>\n</li>\n<li><p>tensorflow的splice api<br><img src=\"/images/ai/58.png\" alt></p>\n</li>\n<li><p>用tensorflow的api和canvas显示出20组图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(examples.xs.slice([i, 0], [1, 784]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tensor.reshape：tensor格式转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> imageTensor = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> examples.xs</span><br><span class=\"line\">            .slice([i, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">784</span>])  </span><br><span class=\"line\">            .reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//将一维数组转换成三维黑白图片格式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    canvas.width = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.height = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.style = <span class=\"string\">'margin: 4px'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> tf.browser.toPixels(imageTensor, canvas);</span><br><span class=\"line\">    surface.drawArea.appendChild(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示效果：</p>\n</li>\n</ul>\n<p><img src=\"/images/ai/56.png\" alt></p>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h4 id=\"为什么要用卷积神经网络\"><a href=\"#为什么要用卷积神经网络\" class=\"headerlink\" title=\"为什么要用卷积神经网络\"></a>为什么要用卷积神经网络</h4><ul>\n<li>图片数据量大，运算量大，例如一个200*200像素的彩色图片：200*200*3=120,000</li>\n<li>卷积神经网络能模拟人类的视觉处理流程，高效提取特征</li>\n</ul>\n<h4 id=\"卷积神经网络的结构\"><a href=\"#卷积神经网络的结构\" class=\"headerlink\" title=\"卷积神经网络的结构\"></a>卷积神经网络的结构</h4><h5 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h5><ul>\n<li><a href=\"setosa.io/ev/image-kernels\">image kernels网站了解图像卷积核</a></li>\n<li>图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”</li>\n<li><img src=\"/images/ai/59.png\" alt=\"卷积\"></li>\n<li>图片上的3X3的小矩阵，就是用于卷积以提取图像特征的<strong>图像卷积核</strong></li>\n<li>使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合</li>\n<li><strong>卷积层</strong>有权重，需要训练，其权重就是<strong>卷积核</strong></li>\n</ul>\n<h5 id=\"池化层\"><a href=\"#池化层\" class=\"headerlink\" title=\"池化层\"></a>池化层</h5><ul>\n<li>优化层</li>\n<li>最大池化层用于提取<strong>最强的特征</strong></li>\n<li>扩大感受视野，减少计算量</li>\n<li>池化层是固定的，不需要训练</li>\n</ul>\n<h5 id=\"dense全链接层\"><a href=\"#dense全链接层\" class=\"headerlink\" title=\"dense全链接层\"></a>dense全链接层</h5><ul>\n<li>作为输出层</li>\n<li>作为分类器</li>\n<li>有权重，需要训练</li>\n</ul>\n<h2 id=\"构建卷积神经网络代码\"><a href=\"#构建卷积神经网络代码\" class=\"headerlink\" title=\"构建卷积神经网络代码\"></a>构建卷积神经网络代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"><span class=\"comment\">//添加一个二位卷积层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    inputShape: [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,\t<span class=\"comment\">//卷积核的大小是5X5的矩阵</span></span><br><span class=\"line\">    filters: <span class=\"number\">8</span>,\t<span class=\"comment\">//应用8种图像卷积核</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,\t<span class=\"comment\">//移动步长，每一个像素单元都进行卷积操作</span></span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,\t<span class=\"comment\">//激活函数，移除掉无用的特征（特征&lt;0就废弃</span></span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span>\t<span class=\"comment\">//可以不设置，设置了可以加快收敛速度</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大池化层</span></span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"comment\">//尺寸是2X2</span></span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]\t<span class=\"comment\">//移动步长，每隔两个像素单元进行一次卷积操作</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重复上述两个层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">    filters: <span class=\"number\">16</span>,\t<span class=\"comment\">//需要提取更多特征</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层</span></span><br><span class=\"line\">model.add(tf.layers.flatten());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,\t\t<span class=\"comment\">//最终输出0-9十个分类</span></span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练参数</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: <span class=\"string\">'categoricalCrossentropy'</span>,\t<span class=\"comment\">//交叉熵损失函数</span></span><br><span class=\"line\">    optimizer: tf.train.adam(),\t<span class=\"comment\">//优化器</span></span><br><span class=\"line\">    metrics: [<span class=\"string\">'accuracy'</span>]\t<span class=\"comment\">//准确度度量</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [trainXs, trainYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTrainBatch(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">1000</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [testXs, testYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTestBatch(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">200</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(trainXs, trainYs, &#123;</span><br><span class=\"line\">    validationData: [testXs, testYs],</span><br><span class=\"line\">    batchSize: <span class=\"number\">500</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">50</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>, <span class=\"string\">'acc'</span>, <span class=\"string\">'val_acc'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练效果：<br><img src=\"/images/ai/60.png\" alt=\"卷积训练\"></li>\n</ul>\n<h2 id=\"使用模型预测识别canvas绘制数字\"><a href=\"#使用模型预测识别canvas绘制数字\" class=\"headerlink\" title=\"使用模型预测识别canvas绘制数字\"></a>使用模型预测识别canvas绘制数字</h2><ul>\n<li><p>html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;canvas width=&quot;300&quot; height=&quot;300&quot; style=&quot;border: 2px solid #666;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.clear();&quot; style=&quot;margin: 4px;&quot;&gt;清除&lt;/button&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.predict();&quot; style=&quot;margin: 4px;&quot;&gt;预测&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (e.buttons === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgb(255,255,255)'</span>;</span><br><span class=\"line\">        ctx.fillRect(e.offsetX, e.offsetY, <span class=\"number\">25</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//黑底画板</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgb(0,0,0)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">clear();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行预测：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.image.resizeBilinear(\t\t<span class=\"comment\">//转换图像tensor尺寸</span></span><br><span class=\"line\">        tf.browser.fromPixels(canvas),\t<span class=\"comment\">//canvas转换为tensor</span></span><br><span class=\"line\">        [<span class=\"number\">28</span>, <span class=\"number\">28</span>],\t<span class=\"comment\">//转换成28*28</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    ).slice([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>])\t<span class=\"comment\">//canvas图片是彩色图片，通过slice转换为黑白图片</span></span><br><span class=\"line\">    .toFloat()\t<span class=\"comment\">//训练数据进行过归一化，因此预测值也要归一化</span></span><br><span class=\"line\">    .div(<span class=\"number\">255</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">    .reshape([<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//和神经网络第一层的输入格式统一</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pred = model.predict(input).argMax(<span class=\"number\">1</span>);</span><br><span class=\"line\">alert(<span class=\"string\">`预测结果为 <span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/ai/001.gif\" alt=\"预测效果\"></p>\n<hr>\n<p><small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br><br>本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"Customize VSCode","date":"2020-04-27T16:00:00.000Z","description":"VSCode高效使用,来自创造VSCode的Microsoft的Azure团队的BurkeHolland的分享","toc":1,"top":0,"_content":"\n## Links\n- [全文](https://burkeholland.gitbook.io/vs-code-can-do-that/)\n- [视频](https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/)\n- [插件vs-code-can-do-that](https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that)\n\n## 记录几个高光点\n- **Setting Sync插件**：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙\n- **Project Manager插件**：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件\n- 侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动\n---\n<small>视频讲的很细很全，不做赘述。很多有用的tips</small>\n","source":"_posts/customize_vscode.md","raw":"---\ntitle: Customize VSCode\ncategories:\n    - 11 Tools # 一级分类\ntags:\ndate: 2020-04-28\ndescription: VSCode高效使用,来自创造VSCode的Microsoft的Azure团队的BurkeHolland的分享\ntoc: 1\ntop: 0\n---\n\n## Links\n- [全文](https://burkeholland.gitbook.io/vs-code-can-do-that/)\n- [视频](https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/)\n- [插件vs-code-can-do-that](https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that)\n\n## 记录几个高光点\n- **Setting Sync插件**：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙\n- **Project Manager插件**：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件\n- 侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动\n---\n<small>视频讲的很细很全，不做赘述。很多有用的tips</small>\n","slug":"customize_vscode","published":1,"updated":"2020-04-29T02:15:21.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9kppos70001tcy66cini4o5","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://burkeholland.gitbook.io/vs-code-can-do-that/\" target=\"_blank\" rel=\"noopener\">全文</a></li>\n<li><a href=\"https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/\" target=\"_blank\" rel=\"noopener\">视频</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that\" target=\"_blank\" rel=\"noopener\">插件vs-code-can-do-that</a></li>\n</ul>\n<h2 id=\"记录几个高光点\"><a href=\"#记录几个高光点\" class=\"headerlink\" title=\"记录几个高光点\"></a>记录几个高光点</h2><ul>\n<li><strong>Setting Sync插件</strong>：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙</li>\n<li><strong>Project Manager插件</strong>：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件</li>\n<li>侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动</li>\n</ul>\n<hr>\n<p><small>视频讲的很细很全，不做赘述。很多有用的tips</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://burkeholland.gitbook.io/vs-code-can-do-that/\" target=\"_blank\" rel=\"noopener\">全文</a></li>\n<li><a href=\"https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/\" target=\"_blank\" rel=\"noopener\">视频</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that\" target=\"_blank\" rel=\"noopener\">插件vs-code-can-do-that</a></li>\n</ul>\n<h2 id=\"记录几个高光点\"><a href=\"#记录几个高光点\" class=\"headerlink\" title=\"记录几个高光点\"></a>记录几个高光点</h2><ul>\n<li><strong>Setting Sync插件</strong>：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙</li>\n<li><strong>Project Manager插件</strong>：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件</li>\n<li>侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动</li>\n</ul>\n<hr>\n<p><small>视频讲的很细很全，不做赘述。很多有用的tips</small></p>\n"},{"title":"ML11 使用预训练模型 图片分类","date":"2020-04-25T16:00:00.000Z","description":"Javascript玩转机器学习11","toc":1,"top":0,"_content":"\n<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n\n## 预训练模型是什么\n- 预先训练好的模型，无需训练，即可预测\n- 在Tensorflow.js中可以调用Web格式的模型文件\n\n## MobileNet模型\n- 一种卷积神经网络模型,能识别1000种物体图片\n- 模型文件小，响应速度块，准确度略低\n\n#### 引入模型文件\n- 为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)\n```\nhs data --cors\n```\n\n- 引入资源\n```\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\n```\n\n- 引入物体类型\n```\nimport { IMAGENET_CLASSES } from './imagenet_classes';\n```\n\n#### 用tfjs加载模型\n```javascript\n//用tf的loadLayersModel加载模型\nconst model = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n```\n\n#### 前端输入带预测数据\n- html\n```html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n```\n\n#### 使用模型进行预测\n\n```javascript\n// ./util.js\nexport function file2img(f) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(f);\n        reader.onload = (e) => {\n            const img = document.createElement('img');\n            img.src = e.target.result;\n            img.width = 224;\n            img.height = 224;\n            img.onload = () => resolve(img);\n        };\n    });\n}\n\n// ./script.js\n\nwindow.predict = async (file) => {\n    //从文件转换为htmlElement\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\t//tidy优化webGl内存\n        const input = tf.browser.fromPixels(img)\t//转换为tensor\n            .toFloat()\t//整数转为浮点数\n            .sub(255 / 2)\t//归一化\n            .div(255 / 2)\n            .reshape([1, 224, 224, 3]);\t//一个图片的格式\n        return model.predict(input);\t//预测\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n\n    // setTimeout 0 使ui不被脚本阻塞\n        setTimeout(() => {\n            alert(`预测结果：${IMAGENET_CLASSES[index]}`);\n        }, 0);\n    };\n```\n\n![预测效果](/images/ai/61.png)\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_11_pre_training_model.md","raw":"---\ntitle: ML11 使用预训练模型 图片分类\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-26\ndescription: Javascript玩转机器学习11\ntoc: 1\ntop: 0\n---\n\n<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n\n## 预训练模型是什么\n- 预先训练好的模型，无需训练，即可预测\n- 在Tensorflow.js中可以调用Web格式的模型文件\n\n## MobileNet模型\n- 一种卷积神经网络模型,能识别1000种物体图片\n- 模型文件小，响应速度块，准确度略低\n\n#### 引入模型文件\n- 为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)\n```\nhs data --cors\n```\n\n- 引入资源\n```\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\n```\n\n- 引入物体类型\n```\nimport { IMAGENET_CLASSES } from './imagenet_classes';\n```\n\n#### 用tfjs加载模型\n```javascript\n//用tf的loadLayersModel加载模型\nconst model = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n```\n\n#### 前端输入带预测数据\n- html\n```html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n```\n\n#### 使用模型进行预测\n\n```javascript\n// ./util.js\nexport function file2img(f) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(f);\n        reader.onload = (e) => {\n            const img = document.createElement('img');\n            img.src = e.target.result;\n            img.width = 224;\n            img.height = 224;\n            img.onload = () => resolve(img);\n        };\n    });\n}\n\n// ./script.js\n\nwindow.predict = async (file) => {\n    //从文件转换为htmlElement\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\t//tidy优化webGl内存\n        const input = tf.browser.fromPixels(img)\t//转换为tensor\n            .toFloat()\t//整数转为浮点数\n            .sub(255 / 2)\t//归一化\n            .div(255 / 2)\n            .reshape([1, 224, 224, 3]);\t//一个图片的格式\n        return model.predict(input);\t//预测\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n\n    // setTimeout 0 使ui不被脚本阻塞\n        setTimeout(() => {\n            alert(`预测结果：${IMAGENET_CLASSES[index]}`);\n        }, 0);\n    };\n```\n\n![预测效果](/images/ai/61.png)\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_11_pre_training_model","published":1,"updated":"2020-04-29T07:23:32.793Z","_id":"ck9kpposa0002tcy6k3gvxeky","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n<h2 id=\"预训练模型是什么\"><a href=\"#预训练模型是什么\" class=\"headerlink\" title=\"预训练模型是什么\"></a>预训练模型是什么</h2><ul>\n<li>预先训练好的模型，无需训练，即可预测</li>\n<li>在Tensorflow.js中可以调用Web格式的模型文件</li>\n</ul>\n<h2 id=\"MobileNet模型\"><a href=\"#MobileNet模型\" class=\"headerlink\" title=\"MobileNet模型\"></a>MobileNet模型</h2><ul>\n<li>一种卷积神经网络模型,能识别1000种物体图片</li>\n<li>模型文件小，响应速度块，准确度略低</li>\n</ul>\n<h4 id=\"引入模型文件\"><a href=\"#引入模型文件\" class=\"headerlink\" title=\"引入模型文件\"></a>引入模型文件</h4><ul>\n<li><p>为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MOBILENET_MODEL_PATH = &apos;http://127.0.0.1:8080/mobilenet/web_model/model.json&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入物体类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; IMAGENET_CLASSES &#125; from &apos;./imagenet_classes&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"用tfjs加载模型\"><a href=\"#用tfjs加载模型\" class=\"headerlink\" title=\"用tfjs加载模型\"></a>用tfjs加载模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用tf的loadLayersModel加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br></pre></td></tr></table></figure>\n<h4 id=\"前端输入带预测数据\"><a href=\"#前端输入带预测数据\" class=\"headerlink\" title=\"前端输入带预测数据\"></a>前端输入带预测数据</h4><ul>\n<li>html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">file2img</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        reader.readAsDataURL(f);</span><br><span class=\"line\">        reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">            img.src = e.target.result;</span><br><span class=\"line\">            img.width = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.height = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(img);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./script.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从文件转换为htmlElement</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;\t<span class=\"comment\">//tidy优化webGl内存</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = tf.browser.fromPixels(img)\t<span class=\"comment\">//转换为tensor</span></span><br><span class=\"line\">            .toFloat()\t<span class=\"comment\">//整数转为浮点数</span></span><br><span class=\"line\">            .sub(<span class=\"number\">255</span> / <span class=\"number\">2</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">            .div(<span class=\"number\">255</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">            .reshape([<span class=\"number\">1</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>, <span class=\"number\">3</span>]);\t<span class=\"comment\">//一个图片的格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);\t<span class=\"comment\">//预测</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 0 使ui不被脚本阻塞</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;IMAGENET_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/ai/61.png\" alt=\"预测效果\"></h2><p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n<h2 id=\"预训练模型是什么\"><a href=\"#预训练模型是什么\" class=\"headerlink\" title=\"预训练模型是什么\"></a>预训练模型是什么</h2><ul>\n<li>预先训练好的模型，无需训练，即可预测</li>\n<li>在Tensorflow.js中可以调用Web格式的模型文件</li>\n</ul>\n<h2 id=\"MobileNet模型\"><a href=\"#MobileNet模型\" class=\"headerlink\" title=\"MobileNet模型\"></a>MobileNet模型</h2><ul>\n<li>一种卷积神经网络模型,能识别1000种物体图片</li>\n<li>模型文件小，响应速度块，准确度略低</li>\n</ul>\n<h4 id=\"引入模型文件\"><a href=\"#引入模型文件\" class=\"headerlink\" title=\"引入模型文件\"></a>引入模型文件</h4><ul>\n<li><p>为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MOBILENET_MODEL_PATH = &apos;http://127.0.0.1:8080/mobilenet/web_model/model.json&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入物体类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; IMAGENET_CLASSES &#125; from &apos;./imagenet_classes&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"用tfjs加载模型\"><a href=\"#用tfjs加载模型\" class=\"headerlink\" title=\"用tfjs加载模型\"></a>用tfjs加载模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用tf的loadLayersModel加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br></pre></td></tr></table></figure>\n<h4 id=\"前端输入带预测数据\"><a href=\"#前端输入带预测数据\" class=\"headerlink\" title=\"前端输入带预测数据\"></a>前端输入带预测数据</h4><ul>\n<li>html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">file2img</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        reader.readAsDataURL(f);</span><br><span class=\"line\">        reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">            img.src = e.target.result;</span><br><span class=\"line\">            img.width = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.height = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(img);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./script.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从文件转换为htmlElement</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;\t<span class=\"comment\">//tidy优化webGl内存</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = tf.browser.fromPixels(img)\t<span class=\"comment\">//转换为tensor</span></span><br><span class=\"line\">            .toFloat()\t<span class=\"comment\">//整数转为浮点数</span></span><br><span class=\"line\">            .sub(<span class=\"number\">255</span> / <span class=\"number\">2</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">            .div(<span class=\"number\">255</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">            .reshape([<span class=\"number\">1</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>, <span class=\"number\">3</span>]);\t<span class=\"comment\">//一个图片的格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);\t<span class=\"comment\">//预测</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 0 使ui不被脚本阻塞</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;IMAGENET_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/ai/61.png\" alt=\"预测效果\"></h2><p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML09 欠拟合&过拟合","date":"2020-04-23T16:00:00.000Z","description":"Javascript玩转机器学习09","toc":1,"top":0,"_content":"\n## 欠拟合\n- 数据过于复杂，但是神经网络模型过于简单\n\n![underFitting](/images/ai/47.png)\n\n- 无论训练多久，训练损失始终降不下去\n\n![underFitting](/images/ai/46.png)\n\n## 过拟合\n- 模型过于复杂，把训练集噪声数据都拟合进去\n\n![overFitting](/images/ai/48.png)\n\n- 过拟合损失曲线，红色代表验证集，蓝色代表训练集\n\n![overFitting](/images/ai/49.png)\n\n![overFitting](/images/ai/50.png)\n\n\n## 实操模拟 欠拟合&过拟合\n- 加载带有噪音的二分类数据集（训练集与验证集）\n- 使用不同神经网络演示 过拟合&欠拟合\n- 过拟合应对法：早停法、权重衰减、丢弃法\n\n## 加载带有噪音的二分类数据集（训练集与验证集）\n#### 脚本原理\n生成正态分布(高斯分布)的样本数据\n```javascript\n  function normalRandom(mean = 0, variance = 1) {\n    let v1, v2, s;\n    do {\n      v1 = 2 * Math.random() - 1;\n      v2 = 2 * Math.random() - 1;\n      s = v1 * v1 + v2 * v2;\n    } while (s > 1);\n  \n    let result = Math.sqrt(-2 * Math.log(s) / s) * v1;\n    return mean + Math.sqrt(variance) * result;\n  }\n```\n正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据\n\n通过调整方差 调整噪音量\n\n#### 用脚本生成带有噪音的二分类数据集\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getData } from './data';\n\nwindow.onload = async () => {\n    const data = getData(200, 3);\n\n}\n```\n#### 可视化数据集\n```javascript\n\n    tfvis.render.scatterplot(\n        { name: '训练数据' },\n        {\n            values: [\n                data.filter(p => p.label === 1),\n                data.filter(p => p.label === 0),\n            ]\n        }\n    );\n```\n\n\n![可视化结果](/images/ai/51.png)\n\n\n## 使用不同神经网络演示 过拟合\n```javascript\nconst data = getData(200, 2);\n\ntfvis.render.scatterplot(\n    { name: '训练数据' },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0),\n        ]\n    }\n);\n\nconst model = tf.sequential();\n\n//第一层隐藏层\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n}));\n\n//输出层\nmodel.add(tf.layers.dense({\n    units: 1,\n    activation: 'sigmoid'\n}));\n\n//设置损失函数&优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n\nawait model.fit(inputs, labels, {\n    validationSplit: 0.2,\n    epochs: 200,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n\n```\n\n![过拟合训练结果](/images/ai/52.png)\n\n## 过拟合应对法：早停法\n在训练出现过拟合时及时手动停止训练\n\n## 过拟合应对法：权重衰减法(设置L2正则化\n将过于复杂的模型权重降低\n```javascript\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n    kernelRegularizer: tf.regularizers.l2({ l2: 1 })  //设置权重衰减\n}));\n```\n\n![权重衰减法训练结果](/images/ai/54.png)\n\n## 过拟合应对法：丢弃法\n在隐藏层和输出层之间添加一个丢弃层\n```javascript\n//添加丢弃层，降低训练集复杂度\nmodel.add(tf.layers.dropout({ rate: 0.9 }));\n```\n\n\n![丢弃法训练结果](/images/ai/53.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_09_under&overfitting.md","raw":"---\ntitle: ML09 欠拟合&过拟合\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-24\ndescription: Javascript玩转机器学习09\ntoc: 1\ntop: 0\n---\n\n## 欠拟合\n- 数据过于复杂，但是神经网络模型过于简单\n\n![underFitting](/images/ai/47.png)\n\n- 无论训练多久，训练损失始终降不下去\n\n![underFitting](/images/ai/46.png)\n\n## 过拟合\n- 模型过于复杂，把训练集噪声数据都拟合进去\n\n![overFitting](/images/ai/48.png)\n\n- 过拟合损失曲线，红色代表验证集，蓝色代表训练集\n\n![overFitting](/images/ai/49.png)\n\n![overFitting](/images/ai/50.png)\n\n\n## 实操模拟 欠拟合&过拟合\n- 加载带有噪音的二分类数据集（训练集与验证集）\n- 使用不同神经网络演示 过拟合&欠拟合\n- 过拟合应对法：早停法、权重衰减、丢弃法\n\n## 加载带有噪音的二分类数据集（训练集与验证集）\n#### 脚本原理\n生成正态分布(高斯分布)的样本数据\n```javascript\n  function normalRandom(mean = 0, variance = 1) {\n    let v1, v2, s;\n    do {\n      v1 = 2 * Math.random() - 1;\n      v2 = 2 * Math.random() - 1;\n      s = v1 * v1 + v2 * v2;\n    } while (s > 1);\n  \n    let result = Math.sqrt(-2 * Math.log(s) / s) * v1;\n    return mean + Math.sqrt(variance) * result;\n  }\n```\n正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据\n\n通过调整方差 调整噪音量\n\n#### 用脚本生成带有噪音的二分类数据集\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getData } from './data';\n\nwindow.onload = async () => {\n    const data = getData(200, 3);\n\n}\n```\n#### 可视化数据集\n```javascript\n\n    tfvis.render.scatterplot(\n        { name: '训练数据' },\n        {\n            values: [\n                data.filter(p => p.label === 1),\n                data.filter(p => p.label === 0),\n            ]\n        }\n    );\n```\n\n\n![可视化结果](/images/ai/51.png)\n\n\n## 使用不同神经网络演示 过拟合\n```javascript\nconst data = getData(200, 2);\n\ntfvis.render.scatterplot(\n    { name: '训练数据' },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0),\n        ]\n    }\n);\n\nconst model = tf.sequential();\n\n//第一层隐藏层\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n}));\n\n//输出层\nmodel.add(tf.layers.dense({\n    units: 1,\n    activation: 'sigmoid'\n}));\n\n//设置损失函数&优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n\nawait model.fit(inputs, labels, {\n    validationSplit: 0.2,\n    epochs: 200,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n\n```\n\n![过拟合训练结果](/images/ai/52.png)\n\n## 过拟合应对法：早停法\n在训练出现过拟合时及时手动停止训练\n\n## 过拟合应对法：权重衰减法(设置L2正则化\n将过于复杂的模型权重降低\n```javascript\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n    kernelRegularizer: tf.regularizers.l2({ l2: 1 })  //设置权重衰减\n}));\n```\n\n![权重衰减法训练结果](/images/ai/54.png)\n\n## 过拟合应对法：丢弃法\n在隐藏层和输出层之间添加一个丢弃层\n```javascript\n//添加丢弃层，降低训练集复杂度\nmodel.add(tf.layers.dropout({ rate: 0.9 }));\n```\n\n\n![丢弃法训练结果](/images/ai/53.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_09_under&overfitting","published":1,"updated":"2020-04-29T07:24:00.409Z","_id":"ck9kpposc0003tcy6fq01ra12","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h2><ul>\n<li>数据过于复杂，但是神经网络模型过于简单</li>\n</ul>\n<p><img src=\"/images/ai/47.png\" alt=\"underFitting\"></p>\n<ul>\n<li>无论训练多久，训练损失始终降不下去</li>\n</ul>\n<p><img src=\"/images/ai/46.png\" alt=\"underFitting\"></p>\n<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><ul>\n<li>模型过于复杂，把训练集噪声数据都拟合进去</li>\n</ul>\n<p><img src=\"/images/ai/48.png\" alt=\"overFitting\"></p>\n<ul>\n<li>过拟合损失曲线，红色代表验证集，蓝色代表训练集</li>\n</ul>\n<p><img src=\"/images/ai/49.png\" alt=\"overFitting\"></p>\n<p><img src=\"/images/ai/50.png\" alt=\"overFitting\"></p>\n<h2 id=\"实操模拟-欠拟合-amp-过拟合\"><a href=\"#实操模拟-欠拟合-amp-过拟合\" class=\"headerlink\" title=\"实操模拟 欠拟合&amp;过拟合\"></a>实操模拟 欠拟合&amp;过拟合</h2><ul>\n<li>加载带有噪音的二分类数据集（训练集与验证集）</li>\n<li>使用不同神经网络演示 过拟合&amp;欠拟合</li>\n<li>过拟合应对法：早停法、权重衰减、丢弃法</li>\n</ul>\n<h2 id=\"加载带有噪音的二分类数据集（训练集与验证集）\"><a href=\"#加载带有噪音的二分类数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载带有噪音的二分类数据集（训练集与验证集）\"></a>加载带有噪音的二分类数据集（训练集与验证集）</h2><h4 id=\"脚本原理\"><a href=\"#脚本原理\" class=\"headerlink\" title=\"脚本原理\"></a>脚本原理</h4><p>生成正态分布(高斯分布)的样本数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalRandom</span>(<span class=\"params\">mean = <span class=\"number\">0</span>, variance = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> v1, v2, s;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    v1 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    v2 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    s = v1 * v1 + v2 * v2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">-2</span> * <span class=\"built_in\">Math</span>.log(s) / s) * v1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mean + <span class=\"built_in\">Math</span>.sqrt(variance) * result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据</p>\n<p>通过调整方差 调整噪音量</p>\n<h4 id=\"用脚本生成带有噪音的二分类数据集\"><a href=\"#用脚本生成带有噪音的二分类数据集\" class=\"headerlink\" title=\"用脚本生成带有噪音的二分类数据集\"></a>用脚本生成带有噪音的二分类数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可视化数据集\"><a href=\"#可视化数据集\" class=\"headerlink\" title=\"可视化数据集\"></a>可视化数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/51.png\" alt=\"可视化结果\"></p>\n<h2 id=\"使用不同神经网络演示-过拟合\"><a href=\"#使用不同神经网络演示-过拟合\" class=\"headerlink\" title=\"使用不同神经网络演示 过拟合\"></a>使用不同神经网络演示 过拟合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一层隐藏层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'sigmoid'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数&amp;优化器</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputs = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> [p.x, p.y]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> labels = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    validationSplit: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">200</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/52.png\" alt=\"过拟合训练结果\"></p>\n<h2 id=\"过拟合应对法：早停法\"><a href=\"#过拟合应对法：早停法\" class=\"headerlink\" title=\"过拟合应对法：早停法\"></a>过拟合应对法：早停法</h2><p>在训练出现过拟合时及时手动停止训练</p>\n<h2 id=\"过拟合应对法：权重衰减法-设置L2正则化\"><a href=\"#过拟合应对法：权重衰减法-设置L2正则化\" class=\"headerlink\" title=\"过拟合应对法：权重衰减法(设置L2正则化\"></a>过拟合应对法：权重衰减法(设置L2正则化</h2><p>将过于复杂的模型权重降低<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">    kernelRegularizer: tf.regularizers.l2(&#123; <span class=\"attr\">l2</span>: <span class=\"number\">1</span> &#125;)  <span class=\"comment\">//设置权重衰减</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/54.png\" alt=\"权重衰减法训练结果\"></p>\n<h2 id=\"过拟合应对法：丢弃法\"><a href=\"#过拟合应对法：丢弃法\" class=\"headerlink\" title=\"过拟合应对法：丢弃法\"></a>过拟合应对法：丢弃法</h2><p>在隐藏层和输出层之间添加一个丢弃层<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加丢弃层，降低训练集复杂度</span></span><br><span class=\"line\">model.add(tf.layers.dropout(&#123; <span class=\"attr\">rate</span>: <span class=\"number\">0.9</span> &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/53.png\" alt=\"丢弃法训练结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h2><ul>\n<li>数据过于复杂，但是神经网络模型过于简单</li>\n</ul>\n<p><img src=\"/images/ai/47.png\" alt=\"underFitting\"></p>\n<ul>\n<li>无论训练多久，训练损失始终降不下去</li>\n</ul>\n<p><img src=\"/images/ai/46.png\" alt=\"underFitting\"></p>\n<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><ul>\n<li>模型过于复杂，把训练集噪声数据都拟合进去</li>\n</ul>\n<p><img src=\"/images/ai/48.png\" alt=\"overFitting\"></p>\n<ul>\n<li>过拟合损失曲线，红色代表验证集，蓝色代表训练集</li>\n</ul>\n<p><img src=\"/images/ai/49.png\" alt=\"overFitting\"></p>\n<p><img src=\"/images/ai/50.png\" alt=\"overFitting\"></p>\n<h2 id=\"实操模拟-欠拟合-amp-过拟合\"><a href=\"#实操模拟-欠拟合-amp-过拟合\" class=\"headerlink\" title=\"实操模拟 欠拟合&amp;过拟合\"></a>实操模拟 欠拟合&amp;过拟合</h2><ul>\n<li>加载带有噪音的二分类数据集（训练集与验证集）</li>\n<li>使用不同神经网络演示 过拟合&amp;欠拟合</li>\n<li>过拟合应对法：早停法、权重衰减、丢弃法</li>\n</ul>\n<h2 id=\"加载带有噪音的二分类数据集（训练集与验证集）\"><a href=\"#加载带有噪音的二分类数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载带有噪音的二分类数据集（训练集与验证集）\"></a>加载带有噪音的二分类数据集（训练集与验证集）</h2><h4 id=\"脚本原理\"><a href=\"#脚本原理\" class=\"headerlink\" title=\"脚本原理\"></a>脚本原理</h4><p>生成正态分布(高斯分布)的样本数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalRandom</span>(<span class=\"params\">mean = <span class=\"number\">0</span>, variance = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> v1, v2, s;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    v1 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    v2 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    s = v1 * v1 + v2 * v2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">-2</span> * <span class=\"built_in\">Math</span>.log(s) / s) * v1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mean + <span class=\"built_in\">Math</span>.sqrt(variance) * result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据</p>\n<p>通过调整方差 调整噪音量</p>\n<h4 id=\"用脚本生成带有噪音的二分类数据集\"><a href=\"#用脚本生成带有噪音的二分类数据集\" class=\"headerlink\" title=\"用脚本生成带有噪音的二分类数据集\"></a>用脚本生成带有噪音的二分类数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可视化数据集\"><a href=\"#可视化数据集\" class=\"headerlink\" title=\"可视化数据集\"></a>可视化数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/51.png\" alt=\"可视化结果\"></p>\n<h2 id=\"使用不同神经网络演示-过拟合\"><a href=\"#使用不同神经网络演示-过拟合\" class=\"headerlink\" title=\"使用不同神经网络演示 过拟合\"></a>使用不同神经网络演示 过拟合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一层隐藏层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'sigmoid'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数&amp;优化器</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputs = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> [p.x, p.y]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> labels = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    validationSplit: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">200</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/52.png\" alt=\"过拟合训练结果\"></p>\n<h2 id=\"过拟合应对法：早停法\"><a href=\"#过拟合应对法：早停法\" class=\"headerlink\" title=\"过拟合应对法：早停法\"></a>过拟合应对法：早停法</h2><p>在训练出现过拟合时及时手动停止训练</p>\n<h2 id=\"过拟合应对法：权重衰减法-设置L2正则化\"><a href=\"#过拟合应对法：权重衰减法-设置L2正则化\" class=\"headerlink\" title=\"过拟合应对法：权重衰减法(设置L2正则化\"></a>过拟合应对法：权重衰减法(设置L2正则化</h2><p>将过于复杂的模型权重降低<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">    kernelRegularizer: tf.regularizers.l2(&#123; <span class=\"attr\">l2</span>: <span class=\"number\">1</span> &#125;)  <span class=\"comment\">//设置权重衰减</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/54.png\" alt=\"权重衰减法训练结果\"></p>\n<h2 id=\"过拟合应对法：丢弃法\"><a href=\"#过拟合应对法：丢弃法\" class=\"headerlink\" title=\"过拟合应对法：丢弃法\"></a>过拟合应对法：丢弃法</h2><p>在隐藏层和输出层之间添加一个丢弃层<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加丢弃层，降低训练集复杂度</span></span><br><span class=\"line\">model.add(tf.layers.dropout(&#123; <span class=\"attr\">rate</span>: <span class=\"number\">0.9</span> &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/53.png\" alt=\"丢弃法训练结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML12 基于迁移学习的图片分类-商标识别","date":"2020-04-26T16:00:00.000Z","description":"Javascript玩转机器学习12","toc":1,"top":0,"_content":"\n## 迁移学习\n- **是什么**：把已训练好的模型参数迁移到新的模型来帮助新模型训练\n- **为什么**：深度学习模型参数多，从头训练成本高\n- **怎么做**：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型\n\n\n\n## 加载商标训练数据并可视化\n- 商标训练素材\n![训练素材](/images/ai/63.png)\n\n- 在本地为素材建立静态http服务器\n```\nhs data --cors\n```\n\n- 编写JS脚本加载训练图片及其标签\n```html\n// index.html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n<button onclick=\"download()\">下载模型</button>\n```\n```javascript\n// data.js\nconst loadImg =(src)=>{\n  return new Promise(resolve=>{\n    const img = document.createElement('img')\n    img.crossOrigin = 'anonymous'\n    img.src = src\n    img.width = 224   //以mobileNet为截断模型，其接收图片尺寸为224\n    img.height = 224\n    img.onload=()=>reslove(img)\n  })\n}\n\n// 返回Promise\nexport const getInputs = async()=>{\n  const loadImgs = []\n  const labels = []\n  for(let i=0;i<30;i+=1){\n    ['android','apple','windows'].forEach(label=>{\n      const imgP = loadImg(`http://127.0.0.1:8080/brand/train/${label}-${index}.jpg`)\n      loadImgs.push(imgP)\n      labels.push([\n        label === 'android' ? 1 :0,\n        label === 'apple' ? 1 :0,\n        label === 'windows' ? 1 :0,\n      ])\n    })\n  }\n  const inputs = await Promise.all(loadImgs)\n  return{ \n    inputs, labels\n  }\n}\n```\n\n\n```javascript\n// script.js\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getInputs } from './data';\nimport { img2x, file2img } from './utils';\n\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\nconst NUM_CLASSES = 3;\nconst BRAND_CLASSES = ['android', 'apple', 'windows'];\n\nwindow.onload = async () => {\n    const { inputs, labels } = await getInputs();\n    // console.log([inputs,labels])\n\n    //将加载的图片素材可视化\n    const surface = tfvis.visor().surface({ name: '输入示例', styles: { height: 250 } });\n    inputs.forEach(img => {\n        surface.drawArea.appendChild(img);\n    });\n};\n```\n\n- 可视化训练图片：\n![可视化训练图片](/images/ai/64.png)\n\n## 加载预训练好的模型Mobilenet\n```javascript\n//加载预训练好的模型Mobilenet\nconst mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n\n//mobilenet的方法，给出其神经网络的概览\nmobilenet.summary();\n```\n\n\n![mobilenet模型概览](/images/ai/65.png)\n\n\n\n## 定义截断模型\n```javascript\n//获取中间层\nconst layer = mobilenet.getLayer('conv_pw_13_relu');\n\n//定义一个截断模型truncatedMobilenet\nconst truncatedMobilenet = tf.model({\n    inputs: mobilenet.inputs,\n    outputs: layer.output\n});\n```\n\n## 定义双层的迁移模型\n```javascript\n\n//定义一个模型\nconst model = tf.sequential();\n\n//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用\nmodel.add(tf.layers.flatten({\n    inputShape: layer.outputShape.slice(1)\n}));\n\n//添加一个全链接层：用于训练我们的商标图片\nmodel.add(tf.layers.dense({\n    units: 10,\n    activation: 'relu'\n}));\n\n//添加一个全链接层：用于做多分类\nmodel.add(tf.layers.dense({\n    units: NUM_CLASSES,\n    activation: 'softmax'\n}));\n\n//设置损失函数：分类交叉熵损失函数，优化器为adam\nmodel.compile({ loss: 'categoricalCrossentropy', optimizer: tf.train.adam() });\n\n```\n\n## 先用截断模型训练数据，转为可以用于迁移模型的数据\n```javascript\n//训练数据 先经过截断模型，转为可以用于迁移模型的数据\nconst { xs, ys } = tf.tidy(() => {\n    const xs = tf.concat(inputs.map(imgEl => truncatedMobilenet.predict(img2x(imgEl))));\n    const ys = tf.tensor(labels);\n    return { xs, ys };\n});\n```\n\n## 训练迁移模型\n```javascript\n//训练迁移模型\nawait model.fit(xs, ys, {\n    epochs: 20,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n![迁移模型训练效率高](/images/ai/66.png)\n\n## 预测\n```javascript\nwindow.predict = async (file) => {\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\n        const x = img2x(img);\n        const input = truncatedMobilenet.predict(x);\n        return model.predict(input);\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n    setTimeout(() => {\n        alert(`预测结果：${BRAND_CLASSES[index]}`);\n    }, 0);\n};\n```\n\n\n![预测效果](/images/ai/002.gif)\n\n## 模型的保存和加载\n\n- 保存：把训练好的模型保存成文件或者 local storage变量\n\n```\nwindow.download = async () => {\n    await model.save('downloads://model');\n};\n```\n- 加载：从文件或者 local storage中加载模型\n- 原因：无需重复训练，便于复用到其他应用中\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_12_transfer_learning.md","raw":"---\ntitle: ML12 基于迁移学习的图片分类-商标识别\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-27\ndescription: Javascript玩转机器学习12\ntoc: 1\ntop: 0\n---\n\n## 迁移学习\n- **是什么**：把已训练好的模型参数迁移到新的模型来帮助新模型训练\n- **为什么**：深度学习模型参数多，从头训练成本高\n- **怎么做**：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型\n\n\n\n## 加载商标训练数据并可视化\n- 商标训练素材\n![训练素材](/images/ai/63.png)\n\n- 在本地为素材建立静态http服务器\n```\nhs data --cors\n```\n\n- 编写JS脚本加载训练图片及其标签\n```html\n// index.html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n<button onclick=\"download()\">下载模型</button>\n```\n```javascript\n// data.js\nconst loadImg =(src)=>{\n  return new Promise(resolve=>{\n    const img = document.createElement('img')\n    img.crossOrigin = 'anonymous'\n    img.src = src\n    img.width = 224   //以mobileNet为截断模型，其接收图片尺寸为224\n    img.height = 224\n    img.onload=()=>reslove(img)\n  })\n}\n\n// 返回Promise\nexport const getInputs = async()=>{\n  const loadImgs = []\n  const labels = []\n  for(let i=0;i<30;i+=1){\n    ['android','apple','windows'].forEach(label=>{\n      const imgP = loadImg(`http://127.0.0.1:8080/brand/train/${label}-${index}.jpg`)\n      loadImgs.push(imgP)\n      labels.push([\n        label === 'android' ? 1 :0,\n        label === 'apple' ? 1 :0,\n        label === 'windows' ? 1 :0,\n      ])\n    })\n  }\n  const inputs = await Promise.all(loadImgs)\n  return{ \n    inputs, labels\n  }\n}\n```\n\n\n```javascript\n// script.js\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getInputs } from './data';\nimport { img2x, file2img } from './utils';\n\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\nconst NUM_CLASSES = 3;\nconst BRAND_CLASSES = ['android', 'apple', 'windows'];\n\nwindow.onload = async () => {\n    const { inputs, labels } = await getInputs();\n    // console.log([inputs,labels])\n\n    //将加载的图片素材可视化\n    const surface = tfvis.visor().surface({ name: '输入示例', styles: { height: 250 } });\n    inputs.forEach(img => {\n        surface.drawArea.appendChild(img);\n    });\n};\n```\n\n- 可视化训练图片：\n![可视化训练图片](/images/ai/64.png)\n\n## 加载预训练好的模型Mobilenet\n```javascript\n//加载预训练好的模型Mobilenet\nconst mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n\n//mobilenet的方法，给出其神经网络的概览\nmobilenet.summary();\n```\n\n\n![mobilenet模型概览](/images/ai/65.png)\n\n\n\n## 定义截断模型\n```javascript\n//获取中间层\nconst layer = mobilenet.getLayer('conv_pw_13_relu');\n\n//定义一个截断模型truncatedMobilenet\nconst truncatedMobilenet = tf.model({\n    inputs: mobilenet.inputs,\n    outputs: layer.output\n});\n```\n\n## 定义双层的迁移模型\n```javascript\n\n//定义一个模型\nconst model = tf.sequential();\n\n//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用\nmodel.add(tf.layers.flatten({\n    inputShape: layer.outputShape.slice(1)\n}));\n\n//添加一个全链接层：用于训练我们的商标图片\nmodel.add(tf.layers.dense({\n    units: 10,\n    activation: 'relu'\n}));\n\n//添加一个全链接层：用于做多分类\nmodel.add(tf.layers.dense({\n    units: NUM_CLASSES,\n    activation: 'softmax'\n}));\n\n//设置损失函数：分类交叉熵损失函数，优化器为adam\nmodel.compile({ loss: 'categoricalCrossentropy', optimizer: tf.train.adam() });\n\n```\n\n## 先用截断模型训练数据，转为可以用于迁移模型的数据\n```javascript\n//训练数据 先经过截断模型，转为可以用于迁移模型的数据\nconst { xs, ys } = tf.tidy(() => {\n    const xs = tf.concat(inputs.map(imgEl => truncatedMobilenet.predict(img2x(imgEl))));\n    const ys = tf.tensor(labels);\n    return { xs, ys };\n});\n```\n\n## 训练迁移模型\n```javascript\n//训练迁移模型\nawait model.fit(xs, ys, {\n    epochs: 20,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n![迁移模型训练效率高](/images/ai/66.png)\n\n## 预测\n```javascript\nwindow.predict = async (file) => {\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\n        const x = img2x(img);\n        const input = truncatedMobilenet.predict(x);\n        return model.predict(input);\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n    setTimeout(() => {\n        alert(`预测结果：${BRAND_CLASSES[index]}`);\n    }, 0);\n};\n```\n\n\n![预测效果](/images/ai/002.gif)\n\n## 模型的保存和加载\n\n- 保存：把训练好的模型保存成文件或者 local storage变量\n\n```\nwindow.download = async () => {\n    await model.save('downloads://model');\n};\n```\n- 加载：从文件或者 local storage中加载模型\n- 原因：无需重复训练，便于复用到其他应用中\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_12_transfer_learning","published":1,"updated":"2020-04-29T07:23:35.265Z","_id":"ck9kppose0005tcy6h1p13e19","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><ul>\n<li><strong>是什么</strong>：把已训练好的模型参数迁移到新的模型来帮助新模型训练</li>\n<li><strong>为什么</strong>：深度学习模型参数多，从头训练成本高</li>\n<li><strong>怎么做</strong>：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型</li>\n</ul>\n<h2 id=\"加载商标训练数据并可视化\"><a href=\"#加载商标训练数据并可视化\" class=\"headerlink\" title=\"加载商标训练数据并可视化\"></a>加载商标训练数据并可视化</h2><ul>\n<li><p>商标训练素材<br><img src=\"/images/ai/63.png\" alt=\"训练素材\"></p>\n</li>\n<li><p>在本地为素材建立静态http服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写JS脚本加载训练图片及其标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"download()\"</span>&gt;</span>下载模型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadImg =<span class=\"function\">(<span class=\"params\">src</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'anonymous'</span></span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.width = <span class=\"number\">224</span>   <span class=\"comment\">//以mobileNet为截断模型，其接收图片尺寸为224</span></span><br><span class=\"line\">    img.height = <span class=\"number\">224</span></span><br><span class=\"line\">    img.onload=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>reslove(img)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回Promise</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputs = <span class=\"keyword\">async</span>()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadImgs = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> labels = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i+=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    [<span class=\"string\">'android'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'windows'</span>].forEach(<span class=\"function\"><span class=\"params\">label</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgP = loadImg(<span class=\"string\">`http://127.0.0.1:8080/brand/train/<span class=\"subst\">$&#123;label&#125;</span>-<span class=\"subst\">$&#123;index&#125;</span>.jpg`</span>)</span><br><span class=\"line\">      loadImgs.push(imgP)</span><br><span class=\"line\">      labels.push([</span><br><span class=\"line\">        label === <span class=\"string\">'android'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'apple'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'windows'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputs = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(loadImgs)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">    inputs, labels</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputs &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; img2x, file2img &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOBILENET_MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/mobilenet/web_model/model.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NUM_CLASSES = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BRAND_CLASSES = [<span class=\"string\">'android'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'windows'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; inputs, labels &#125; = <span class=\"keyword\">await</span> getInputs();</span><br><span class=\"line\">    <span class=\"comment\">// console.log([inputs,labels])</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将加载的图片素材可视化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span>, <span class=\"attr\">styles</span>: &#123; <span class=\"attr\">height</span>: <span class=\"number\">250</span> &#125; &#125;);</span><br><span class=\"line\">    inputs.forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">        surface.drawArea.appendChild(img);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化训练图片：<br><img src=\"/images/ai/64.png\" alt=\"可视化训练图片\"></li>\n</ul>\n<h2 id=\"加载预训练好的模型Mobilenet\"><a href=\"#加载预训练好的模型Mobilenet\" class=\"headerlink\" title=\"加载预训练好的模型Mobilenet\"></a>加载预训练好的模型Mobilenet</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载预训练好的模型Mobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mobilenet = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mobilenet的方法，给出其神经网络的概览</span></span><br><span class=\"line\">mobilenet.summary();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/65.png\" alt=\"mobilenet模型概览\"></p>\n<h2 id=\"定义截断模型\"><a href=\"#定义截断模型\" class=\"headerlink\" title=\"定义截断模型\"></a>定义截断模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取中间层</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> layer = mobilenet.getLayer(<span class=\"string\">'conv_pw_13_relu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个截断模型truncatedMobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> truncatedMobilenet = tf.model(&#123;</span><br><span class=\"line\">    inputs: mobilenet.inputs,</span><br><span class=\"line\">    outputs: layer.output</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义双层的迁移模型\"><a href=\"#定义双层的迁移模型\" class=\"headerlink\" title=\"定义双层的迁移模型\"></a>定义双层的迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用</span></span><br><span class=\"line\">model.add(tf.layers.flatten(&#123;</span><br><span class=\"line\">    inputShape: layer.outputShape.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于训练我们的商标图片</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于做多分类</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: NUM_CLASSES,</span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数：分类交叉熵损失函数，优化器为adam</span></span><br><span class=\"line\">model.compile(&#123; <span class=\"attr\">loss</span>: <span class=\"string\">'categoricalCrossentropy'</span>, <span class=\"attr\">optimizer</span>: tf.train.adam() &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"><a href=\"#先用截断模型训练数据，转为可以用于迁移模型的数据\" class=\"headerlink\" title=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"></a>先用截断模型训练数据，转为可以用于迁移模型的数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练数据 先经过截断模型，转为可以用于迁移模型的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xs, ys &#125; = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xs = tf.concat(inputs.map(<span class=\"function\"><span class=\"params\">imgEl</span> =&gt;</span> truncatedMobilenet.predict(img2x(imgEl))));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ys = tf.tensor(labels);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; xs, ys &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练迁移模型\"><a href=\"#训练迁移模型\" class=\"headerlink\" title=\"训练迁移模型\"></a>训练迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练迁移模型</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(xs, ys, &#123;</span><br><span class=\"line\">    epochs: <span class=\"number\">20</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/66.png\" alt=\"迁移模型训练效率高\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = img2x(img);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = truncatedMobilenet.predict(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;BRAND_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/002.gif\" alt=\"预测效果\"></p>\n<h2 id=\"模型的保存和加载\"><a href=\"#模型的保存和加载\" class=\"headerlink\" title=\"模型的保存和加载\"></a>模型的保存和加载</h2><ul>\n<li>保存：把训练好的模型保存成文件或者 local storage变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.download = async () =&gt; &#123;</span><br><span class=\"line\">    await model.save(&apos;downloads://model&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载：从文件或者 local storage中加载模型</li>\n<li>原因：无需重复训练，便于复用到其他应用中</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><ul>\n<li><strong>是什么</strong>：把已训练好的模型参数迁移到新的模型来帮助新模型训练</li>\n<li><strong>为什么</strong>：深度学习模型参数多，从头训练成本高</li>\n<li><strong>怎么做</strong>：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型</li>\n</ul>\n<h2 id=\"加载商标训练数据并可视化\"><a href=\"#加载商标训练数据并可视化\" class=\"headerlink\" title=\"加载商标训练数据并可视化\"></a>加载商标训练数据并可视化</h2><ul>\n<li><p>商标训练素材<br><img src=\"/images/ai/63.png\" alt=\"训练素材\"></p>\n</li>\n<li><p>在本地为素材建立静态http服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写JS脚本加载训练图片及其标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"download()\"</span>&gt;</span>下载模型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadImg =<span class=\"function\">(<span class=\"params\">src</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'anonymous'</span></span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.width = <span class=\"number\">224</span>   <span class=\"comment\">//以mobileNet为截断模型，其接收图片尺寸为224</span></span><br><span class=\"line\">    img.height = <span class=\"number\">224</span></span><br><span class=\"line\">    img.onload=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>reslove(img)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回Promise</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputs = <span class=\"keyword\">async</span>()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadImgs = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> labels = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i+=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    [<span class=\"string\">'android'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'windows'</span>].forEach(<span class=\"function\"><span class=\"params\">label</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgP = loadImg(<span class=\"string\">`http://127.0.0.1:8080/brand/train/<span class=\"subst\">$&#123;label&#125;</span>-<span class=\"subst\">$&#123;index&#125;</span>.jpg`</span>)</span><br><span class=\"line\">      loadImgs.push(imgP)</span><br><span class=\"line\">      labels.push([</span><br><span class=\"line\">        label === <span class=\"string\">'android'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'apple'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'windows'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputs = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(loadImgs)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">    inputs, labels</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputs &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; img2x, file2img &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOBILENET_MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/mobilenet/web_model/model.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NUM_CLASSES = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BRAND_CLASSES = [<span class=\"string\">'android'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'windows'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; inputs, labels &#125; = <span class=\"keyword\">await</span> getInputs();</span><br><span class=\"line\">    <span class=\"comment\">// console.log([inputs,labels])</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将加载的图片素材可视化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span>, <span class=\"attr\">styles</span>: &#123; <span class=\"attr\">height</span>: <span class=\"number\">250</span> &#125; &#125;);</span><br><span class=\"line\">    inputs.forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">        surface.drawArea.appendChild(img);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化训练图片：<br><img src=\"/images/ai/64.png\" alt=\"可视化训练图片\"></li>\n</ul>\n<h2 id=\"加载预训练好的模型Mobilenet\"><a href=\"#加载预训练好的模型Mobilenet\" class=\"headerlink\" title=\"加载预训练好的模型Mobilenet\"></a>加载预训练好的模型Mobilenet</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载预训练好的模型Mobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mobilenet = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mobilenet的方法，给出其神经网络的概览</span></span><br><span class=\"line\">mobilenet.summary();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/65.png\" alt=\"mobilenet模型概览\"></p>\n<h2 id=\"定义截断模型\"><a href=\"#定义截断模型\" class=\"headerlink\" title=\"定义截断模型\"></a>定义截断模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取中间层</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> layer = mobilenet.getLayer(<span class=\"string\">'conv_pw_13_relu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个截断模型truncatedMobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> truncatedMobilenet = tf.model(&#123;</span><br><span class=\"line\">    inputs: mobilenet.inputs,</span><br><span class=\"line\">    outputs: layer.output</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义双层的迁移模型\"><a href=\"#定义双层的迁移模型\" class=\"headerlink\" title=\"定义双层的迁移模型\"></a>定义双层的迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用</span></span><br><span class=\"line\">model.add(tf.layers.flatten(&#123;</span><br><span class=\"line\">    inputShape: layer.outputShape.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于训练我们的商标图片</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于做多分类</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: NUM_CLASSES,</span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数：分类交叉熵损失函数，优化器为adam</span></span><br><span class=\"line\">model.compile(&#123; <span class=\"attr\">loss</span>: <span class=\"string\">'categoricalCrossentropy'</span>, <span class=\"attr\">optimizer</span>: tf.train.adam() &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"><a href=\"#先用截断模型训练数据，转为可以用于迁移模型的数据\" class=\"headerlink\" title=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"></a>先用截断模型训练数据，转为可以用于迁移模型的数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练数据 先经过截断模型，转为可以用于迁移模型的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xs, ys &#125; = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xs = tf.concat(inputs.map(<span class=\"function\"><span class=\"params\">imgEl</span> =&gt;</span> truncatedMobilenet.predict(img2x(imgEl))));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ys = tf.tensor(labels);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; xs, ys &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练迁移模型\"><a href=\"#训练迁移模型\" class=\"headerlink\" title=\"训练迁移模型\"></a>训练迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练迁移模型</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(xs, ys, &#123;</span><br><span class=\"line\">    epochs: <span class=\"number\">20</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/66.png\" alt=\"迁移模型训练效率高\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = img2x(img);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = truncatedMobilenet.predict(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;BRAND_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/002.gif\" alt=\"预测效果\"></p>\n<h2 id=\"模型的保存和加载\"><a href=\"#模型的保存和加载\" class=\"headerlink\" title=\"模型的保存和加载\"></a>模型的保存和加载</h2><ul>\n<li>保存：把训练好的模型保存成文件或者 local storage变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.download = async () =&gt; &#123;</span><br><span class=\"line\">    await model.save(&apos;downloads://model&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载：从文件或者 local storage中加载模型</li>\n<li>原因：无需重复训练，便于复用到其他应用中</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML13 用tf官方的预训练模型-语音识别","date":"2020-04-27T16:00:00.000Z","description":"Javascript玩转机器学习13","toc":1,"top":0,"_content":"\n## 语音识别\n- 模型接受声音信息，输出分类信息\n- 声音在计算机里是声谱图，因此也可以使用卷积神经网络\n\n## 加载预训练语音识别模型(tf官网的模型)\n- 开本地静态服务器，获取语音识别模型文件\n- 使用tfjs-models的speech-commands包加载模型\n(tfjs-models是tf官方的模型库)\n\n## 进行语音识别\n- html\n```html\n<script src=\"script.js\"></script>\n<style>\n    #result>div {\n        float: left;\n        padding: 20px;\n    }\n</style>\n<div id=\"result\"></div>\n```\n\n- js\n```javascript\n// 引入tf-models库提供的语音命令npm包\nimport * as speechCommands from '@tensorflow-models/speech-commands';\n\n//本地静态文件服务器地址\nconst MODEL_PATH = 'http://127.0.0.1:8080/speech';\n\nwindow.onload = async () => {\n\t// speechCommands文档：\n\t// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\t//傅里叶变换\n        null,\n        MODEL_PATH + '/model.json',\n        MODEL_PATH + '/metadata.json'\n    );\n\n\t//加载模型\n    await recognizer.ensureModelLoaded();\n\n\t//显示模型能识别的语音类型\n    const labels = recognizer.wordLabels().slice(2);\n    const resultEl = document.querySelector('#result');\n    resultEl.innerHTML = labels.map(l => `\n        <div>${l}</div>\n\t`).join('');\n\t\n\t//浏览器监听语音\n    recognizer.listen(result => {\n        const { scores } = result;\n\t\tconst maxValue = Math.max(...scores);\n\t\t//拿到分类中 可能性最大的单词\n\t\tconst index = scores.indexOf(maxValue) - 2;\n\t\t//突出显示\n        resultEl.innerHTML = labels.map((l, i) => `\n        <div style=\"background: ${i === index && 'green'}\">${l}</div>\n        `).join('');\n    }, {\n        overlapFactor: 0.3,\t\t//识别频率\n        probabilityThreshold: 0.9\t//准确度阈值，超过0.9的准确度 就执行参数一的函数\n    });\n};\n```\n\n## 效果\n![语音指令识别](/images/ai/003.gif)\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_13_speech_recognition.md","raw":"---\ntitle: ML13 用tf官方的预训练模型-语音识别\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-28\ndescription: Javascript玩转机器学习13\ntoc: 1\ntop: 0\n---\n\n## 语音识别\n- 模型接受声音信息，输出分类信息\n- 声音在计算机里是声谱图，因此也可以使用卷积神经网络\n\n## 加载预训练语音识别模型(tf官网的模型)\n- 开本地静态服务器，获取语音识别模型文件\n- 使用tfjs-models的speech-commands包加载模型\n(tfjs-models是tf官方的模型库)\n\n## 进行语音识别\n- html\n```html\n<script src=\"script.js\"></script>\n<style>\n    #result>div {\n        float: left;\n        padding: 20px;\n    }\n</style>\n<div id=\"result\"></div>\n```\n\n- js\n```javascript\n// 引入tf-models库提供的语音命令npm包\nimport * as speechCommands from '@tensorflow-models/speech-commands';\n\n//本地静态文件服务器地址\nconst MODEL_PATH = 'http://127.0.0.1:8080/speech';\n\nwindow.onload = async () => {\n\t// speechCommands文档：\n\t// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\t//傅里叶变换\n        null,\n        MODEL_PATH + '/model.json',\n        MODEL_PATH + '/metadata.json'\n    );\n\n\t//加载模型\n    await recognizer.ensureModelLoaded();\n\n\t//显示模型能识别的语音类型\n    const labels = recognizer.wordLabels().slice(2);\n    const resultEl = document.querySelector('#result');\n    resultEl.innerHTML = labels.map(l => `\n        <div>${l}</div>\n\t`).join('');\n\t\n\t//浏览器监听语音\n    recognizer.listen(result => {\n        const { scores } = result;\n\t\tconst maxValue = Math.max(...scores);\n\t\t//拿到分类中 可能性最大的单词\n\t\tconst index = scores.indexOf(maxValue) - 2;\n\t\t//突出显示\n        resultEl.innerHTML = labels.map((l, i) => `\n        <div style=\"background: ${i === index && 'green'}\">${l}</div>\n        `).join('');\n    }, {\n        overlapFactor: 0.3,\t\t//识别频率\n        probabilityThreshold: 0.9\t//准确度阈值，超过0.9的准确度 就执行参数一的函数\n    });\n};\n```\n\n## 效果\n![语音指令识别](/images/ai/003.gif)\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_13_speech_recognition","published":1,"updated":"2020-04-29T06:31:05.965Z","_id":"ck9kppot2000atcy6egy10ce2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"语音识别\"><a href=\"#语音识别\" class=\"headerlink\" title=\"语音识别\"></a>语音识别</h2><ul>\n<li>模型接受声音信息，输出分类信息</li>\n<li>声音在计算机里是声谱图，因此也可以使用卷积神经网络</li>\n</ul>\n<h2 id=\"加载预训练语音识别模型-tf官网的模型\"><a href=\"#加载预训练语音识别模型-tf官网的模型\" class=\"headerlink\" title=\"加载预训练语音识别模型(tf官网的模型)\"></a>加载预训练语音识别模型(tf官网的模型)</h2><ul>\n<li>开本地静态服务器，获取语音识别模型文件</li>\n<li>使用tfjs-models的speech-commands包加载模型<br>(tfjs-models是tf官方的模型库)</li>\n</ul>\n<h2 id=\"进行语音识别\"><a href=\"#进行语音识别\" class=\"headerlink\" title=\"进行语音识别\"></a>进行语音识别</h2><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#result</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入tf-models库提供的语音命令npm包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本地静态文件服务器地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/speech'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// speechCommands文档：</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,\t<span class=\"comment\">//傅里叶变换</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载模型</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示模型能识别的语音类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = recognizer.wordLabels().slice(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#result'</span>);</span><br><span class=\"line\">    resultEl.innerHTML = labels.map(<span class=\"function\"><span class=\"params\">l</span> =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//浏览器监听语音</span></span><br><span class=\"line\">    recognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> maxValue = <span class=\"built_in\">Math</span>.max(...scores);</span><br><span class=\"line\">\t\t<span class=\"comment\">//拿到分类中 可能性最大的单词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = scores.indexOf(maxValue) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//突出显示</span></span><br><span class=\"line\">        resultEl.innerHTML = labels.map(<span class=\"function\">(<span class=\"params\">l, i</span>) =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div style=\"background: <span class=\"subst\">$&#123;i === index &amp;&amp; <span class=\"string\">'green'</span>&#125;</span>\"&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        overlapFactor: <span class=\"number\">0.3</span>,\t\t<span class=\"comment\">//识别频率</span></span><br><span class=\"line\">        probabilityThreshold: <span class=\"number\">0.9</span>\t<span class=\"comment\">//准确度阈值，超过0.9的准确度 就执行参数一的函数</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/images/ai/003.gif\" alt=\"语音指令识别\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语音识别\"><a href=\"#语音识别\" class=\"headerlink\" title=\"语音识别\"></a>语音识别</h2><ul>\n<li>模型接受声音信息，输出分类信息</li>\n<li>声音在计算机里是声谱图，因此也可以使用卷积神经网络</li>\n</ul>\n<h2 id=\"加载预训练语音识别模型-tf官网的模型\"><a href=\"#加载预训练语音识别模型-tf官网的模型\" class=\"headerlink\" title=\"加载预训练语音识别模型(tf官网的模型)\"></a>加载预训练语音识别模型(tf官网的模型)</h2><ul>\n<li>开本地静态服务器，获取语音识别模型文件</li>\n<li>使用tfjs-models的speech-commands包加载模型<br>(tfjs-models是tf官方的模型库)</li>\n</ul>\n<h2 id=\"进行语音识别\"><a href=\"#进行语音识别\" class=\"headerlink\" title=\"进行语音识别\"></a>进行语音识别</h2><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#result</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入tf-models库提供的语音命令npm包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本地静态文件服务器地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/speech'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// speechCommands文档：</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,\t<span class=\"comment\">//傅里叶变换</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载模型</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示模型能识别的语音类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = recognizer.wordLabels().slice(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#result'</span>);</span><br><span class=\"line\">    resultEl.innerHTML = labels.map(<span class=\"function\"><span class=\"params\">l</span> =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//浏览器监听语音</span></span><br><span class=\"line\">    recognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> maxValue = <span class=\"built_in\">Math</span>.max(...scores);</span><br><span class=\"line\">\t\t<span class=\"comment\">//拿到分类中 可能性最大的单词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = scores.indexOf(maxValue) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//突出显示</span></span><br><span class=\"line\">        resultEl.innerHTML = labels.map(<span class=\"function\">(<span class=\"params\">l, i</span>) =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div style=\"background: <span class=\"subst\">$&#123;i === index &amp;&amp; <span class=\"string\">'green'</span>&#125;</span>\"&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        overlapFactor: <span class=\"number\">0.3</span>,\t\t<span class=\"comment\">//识别频率</span></span><br><span class=\"line\">        probabilityThreshold: <span class=\"number\">0.9</span>\t<span class=\"comment\">//准确度阈值，超过0.9的准确度 就执行参数一的函数</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/images/ai/003.gif\" alt=\"语音指令识别\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML14 声控轮播图 - 语音识别迁移学习","date":"2020-04-28T16:00:00.000Z","description":"Javascript玩转机器学习14","toc":1,"top":0,"_content":"## 在浏览器中收集中文语音训练数据\n- html\n\n```html\n<script src=\"script.js\"></script>\n<button onclick=\"collect(this)\">上一张</button>\n<button onclick=\"collect(this)\">下一张</button>\n<button onclick=\"collect(this)\">背景噪音</button>\n<button onclick=\"save()\">保存</button>\n<pre id=\"count\"></pre>\n<button onclick=\"train()\">训练</button>\n<br><br>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n```\n\n- js\n```javascript\nimport * as speechCommands from '@tensorflow-models/speech-commands';\nimport * as tfvis from '@tensorflow/tfjs-vis';\n\nconst MODEL_PATH = 'http://127.0.0.1:8080';\nlet transferRecognizer;\n\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',  //浏览器的傅里叶变换(将声音转为声谱数据\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json'\n    );\n    await recognizer.ensureModelLoaded();\n\n    //使用createTransfer接口创建迁移模型\n    transferRecognizer = recognizer.createTransfer('轮播图');\n};\n\nwindow.collect = async (btn) => {\n    btn.disabled = true;\n    const label = btn.innerText;\n    //用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_\n    await transferRecognizer.collectExample(\n        label === '背景噪音' ? '_background_noise_' : label\n    );\n    btn.disabled = false;\n\n    //将收集的数据可视化\n    document.querySelector('#count').innerHTML = JSON.stringify(transferRecognizer.countExamples(), null, 2);\n};\n```\n\n\n\n## 语音训练数据的保存\n```javascript\nwindow.save = () => {\n    //用serializeExamples接口将收集的样例数据序列化\n    const arrayBuffer = transferRecognizer.serializeExamples();\n    const blob = new Blob([arrayBuffer]);\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'data.bin';\n    link.click();\n};\n```\n\n## 加载数据，用speech commands包行迁移学习，训练\n\n```javascript\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json',\n    );\n    await recognizer.ensureModelLoaded();\n    transferRecognizer = recognizer.createTransfer('轮播图');\n    \n    //用fetch方法从本静态服务器拿到样例数据\n    const res = await fetch(MODEL_PATH + '/slider/data.bin');\n    //转为arrayBuffer格式\n    const arrayBuffer = await res.arrayBuffer();\n    //模型加载样例数据\n    transferRecognizer.loadExamples(arrayBuffer);\n    //模型训练\n    await transferRecognizer.train({ epochs: 30 });\n    console.log('done');\n};\n```\n\n## 轮播图html\n\n- html\n\n```html\n<script src=\"script.js\"></script>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n\n<style>\n    .slider {\n        width: 600px;\n        overflow: hidden;\n        margin: 10px auto;\n    }\n    .slider > div{\n        display: flex;\n        align-items: center;\n    }\n</style>\n<div class=\"slider\">\n    <div>\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\" alt=\"\" width=\"600\">\n    </div>\n</div>\n```\n\n## 监听&控制轮播\n\n```javascript\nawait transferRecognizer.listen(result => {\n    const { scores } = result;\n    const labels = transferRecognizer.wordLabels();\n    const index = scores.indexOf(Math.max(...scores));\n    window.play(labels[index]);\n}, {\n    overlapFactor: 0,\n    probabilityThreshold: 0.5\n});\n\nwindow.play = (label) => {\n    const div = document.querySelector('.slider>div');\n    if (label === '上一张') {\n        if (curIndex === 0) { return; }\n        curIndex -= 1;\n    } else {\n        if (curIndex === document.querySelectorAll('img').length - 1) { return; }\n        curIndex += 1;\n    }\n    div.style.transition = \"transform 1s\"\n    div.style.transform = `translateX(-${100 * curIndex}%)`;\n};\n```\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_14_slider.md","raw":"---\ntitle: ML14 声控轮播图 - 语音识别迁移学习\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-29\ndescription: Javascript玩转机器学习14\ntoc: 1\ntop: 0\n---\n## 在浏览器中收集中文语音训练数据\n- html\n\n```html\n<script src=\"script.js\"></script>\n<button onclick=\"collect(this)\">上一张</button>\n<button onclick=\"collect(this)\">下一张</button>\n<button onclick=\"collect(this)\">背景噪音</button>\n<button onclick=\"save()\">保存</button>\n<pre id=\"count\"></pre>\n<button onclick=\"train()\">训练</button>\n<br><br>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n```\n\n- js\n```javascript\nimport * as speechCommands from '@tensorflow-models/speech-commands';\nimport * as tfvis from '@tensorflow/tfjs-vis';\n\nconst MODEL_PATH = 'http://127.0.0.1:8080';\nlet transferRecognizer;\n\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',  //浏览器的傅里叶变换(将声音转为声谱数据\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json'\n    );\n    await recognizer.ensureModelLoaded();\n\n    //使用createTransfer接口创建迁移模型\n    transferRecognizer = recognizer.createTransfer('轮播图');\n};\n\nwindow.collect = async (btn) => {\n    btn.disabled = true;\n    const label = btn.innerText;\n    //用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_\n    await transferRecognizer.collectExample(\n        label === '背景噪音' ? '_background_noise_' : label\n    );\n    btn.disabled = false;\n\n    //将收集的数据可视化\n    document.querySelector('#count').innerHTML = JSON.stringify(transferRecognizer.countExamples(), null, 2);\n};\n```\n\n\n\n## 语音训练数据的保存\n```javascript\nwindow.save = () => {\n    //用serializeExamples接口将收集的样例数据序列化\n    const arrayBuffer = transferRecognizer.serializeExamples();\n    const blob = new Blob([arrayBuffer]);\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'data.bin';\n    link.click();\n};\n```\n\n## 加载数据，用speech commands包行迁移学习，训练\n\n```javascript\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json',\n    );\n    await recognizer.ensureModelLoaded();\n    transferRecognizer = recognizer.createTransfer('轮播图');\n    \n    //用fetch方法从本静态服务器拿到样例数据\n    const res = await fetch(MODEL_PATH + '/slider/data.bin');\n    //转为arrayBuffer格式\n    const arrayBuffer = await res.arrayBuffer();\n    //模型加载样例数据\n    transferRecognizer.loadExamples(arrayBuffer);\n    //模型训练\n    await transferRecognizer.train({ epochs: 30 });\n    console.log('done');\n};\n```\n\n## 轮播图html\n\n- html\n\n```html\n<script src=\"script.js\"></script>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n\n<style>\n    .slider {\n        width: 600px;\n        overflow: hidden;\n        margin: 10px auto;\n    }\n    .slider > div{\n        display: flex;\n        align-items: center;\n    }\n</style>\n<div class=\"slider\">\n    <div>\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\" alt=\"\" width=\"600\">\n    </div>\n</div>\n```\n\n## 监听&控制轮播\n\n```javascript\nawait transferRecognizer.listen(result => {\n    const { scores } = result;\n    const labels = transferRecognizer.wordLabels();\n    const index = scores.indexOf(Math.max(...scores));\n    window.play(labels[index]);\n}, {\n    overlapFactor: 0,\n    probabilityThreshold: 0.5\n});\n\nwindow.play = (label) => {\n    const div = document.querySelector('.slider>div');\n    if (label === '上一张') {\n        if (curIndex === 0) { return; }\n        curIndex -= 1;\n    } else {\n        if (curIndex === document.querySelectorAll('img').length - 1) { return; }\n        curIndex += 1;\n    }\n    div.style.transition = \"transform 1s\"\n    div.style.transform = `translateX(-${100 * curIndex}%)`;\n};\n```\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_14_slider","published":1,"updated":"2020-04-29T07:22:00.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9l0ht4x00003wy6kcjwnoi2","content":"<h2 id=\"在浏览器中收集中文语音训练数据\"><a href=\"#在浏览器中收集中文语音训练数据\" class=\"headerlink\" title=\"在浏览器中收集中文语音训练数据\"></a>在浏览器中收集中文语音训练数据</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>上一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>下一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>背景噪音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"save()\"</span>&gt;</span>保存<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"train()\"</span>&gt;</span>训练<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> transferRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,  <span class=\"comment\">//浏览器的傅里叶变换(将声音转为声谱数据</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用createTransfer接口创建迁移模型</span></span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.collect = <span class=\"keyword\">async</span> (btn) =&gt; &#123;</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> label = btn.innerText;</span><br><span class=\"line\">    <span class=\"comment\">//用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.collectExample(</span><br><span class=\"line\">        label === <span class=\"string\">'背景噪音'</span> ? <span class=\"string\">'_background_noise_'</span> : label</span><br><span class=\"line\">    );</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将收集的数据可视化</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#count'</span>).innerHTML = <span class=\"built_in\">JSON</span>.stringify(transferRecognizer.countExamples(), <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"语音训练数据的保存\"><a href=\"#语音训练数据的保存\" class=\"headerlink\" title=\"语音训练数据的保存\"></a>语音训练数据的保存</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.save = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用serializeExamples接口将收集的样例数据序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = transferRecognizer.serializeExamples();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([arrayBuffer]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    link.download = <span class=\"string\">'data.bin'</span>;</span><br><span class=\"line\">    link.click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载数据，用speech-commands包行迁移学习，训练\"><a href=\"#加载数据，用speech-commands包行迁移学习，训练\" class=\"headerlink\" title=\"加载数据，用speech commands包行迁移学习，训练\"></a>加载数据，用speech commands包行迁移学习，训练</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//用fetch方法从本静态服务器拿到样例数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(MODEL_PATH + <span class=\"string\">'/slider/data.bin'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//转为arrayBuffer格式</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = <span class=\"keyword\">await</span> res.arrayBuffer();</span><br><span class=\"line\">    <span class=\"comment\">//模型加载样例数据</span></span><br><span class=\"line\">    transferRecognizer.loadExamples(arrayBuffer);</span><br><span class=\"line\">    <span class=\"comment\">//模型训练</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.train(&#123; <span class=\"attr\">epochs</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"轮播图html\"><a href=\"#轮播图html\" class=\"headerlink\" title=\"轮播图html\"></a>轮播图html</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &#123;</span></span><br><span class=\"line\">        width: 600px;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        margin: 10px auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slider\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"监听-amp-控制轮播\"><a href=\"#监听-amp-控制轮播\" class=\"headerlink\" title=\"监听&amp;控制轮播\"></a>监听&amp;控制轮播</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> transferRecognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = transferRecognizer.wordLabels();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = scores.indexOf(<span class=\"built_in\">Math</span>.max(...scores));</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.play(labels[index]);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    overlapFactor: <span class=\"number\">0</span>,</span><br><span class=\"line\">    probabilityThreshold: <span class=\"number\">0.5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.play = <span class=\"function\">(<span class=\"params\">label</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.slider&gt;div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (label === <span class=\"string\">'上一张'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"number\">0</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'img'</span>).length - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.style.transition = <span class=\"string\">\"transform 1s\"</span></span><br><span class=\"line\">    div.style.transform = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"number\">100</span> * curIndex&#125;</span>%)`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在浏览器中收集中文语音训练数据\"><a href=\"#在浏览器中收集中文语音训练数据\" class=\"headerlink\" title=\"在浏览器中收集中文语音训练数据\"></a>在浏览器中收集中文语音训练数据</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>上一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>下一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>背景噪音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"save()\"</span>&gt;</span>保存<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"train()\"</span>&gt;</span>训练<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> transferRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,  <span class=\"comment\">//浏览器的傅里叶变换(将声音转为声谱数据</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用createTransfer接口创建迁移模型</span></span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.collect = <span class=\"keyword\">async</span> (btn) =&gt; &#123;</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> label = btn.innerText;</span><br><span class=\"line\">    <span class=\"comment\">//用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.collectExample(</span><br><span class=\"line\">        label === <span class=\"string\">'背景噪音'</span> ? <span class=\"string\">'_background_noise_'</span> : label</span><br><span class=\"line\">    );</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将收集的数据可视化</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#count'</span>).innerHTML = <span class=\"built_in\">JSON</span>.stringify(transferRecognizer.countExamples(), <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"语音训练数据的保存\"><a href=\"#语音训练数据的保存\" class=\"headerlink\" title=\"语音训练数据的保存\"></a>语音训练数据的保存</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.save = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用serializeExamples接口将收集的样例数据序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = transferRecognizer.serializeExamples();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([arrayBuffer]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    link.download = <span class=\"string\">'data.bin'</span>;</span><br><span class=\"line\">    link.click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载数据，用speech-commands包行迁移学习，训练\"><a href=\"#加载数据，用speech-commands包行迁移学习，训练\" class=\"headerlink\" title=\"加载数据，用speech commands包行迁移学习，训练\"></a>加载数据，用speech commands包行迁移学习，训练</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//用fetch方法从本静态服务器拿到样例数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(MODEL_PATH + <span class=\"string\">'/slider/data.bin'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//转为arrayBuffer格式</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = <span class=\"keyword\">await</span> res.arrayBuffer();</span><br><span class=\"line\">    <span class=\"comment\">//模型加载样例数据</span></span><br><span class=\"line\">    transferRecognizer.loadExamples(arrayBuffer);</span><br><span class=\"line\">    <span class=\"comment\">//模型训练</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.train(&#123; <span class=\"attr\">epochs</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"轮播图html\"><a href=\"#轮播图html\" class=\"headerlink\" title=\"轮播图html\"></a>轮播图html</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &#123;</span></span><br><span class=\"line\">        width: 600px;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        margin: 10px auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slider\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"监听-amp-控制轮播\"><a href=\"#监听-amp-控制轮播\" class=\"headerlink\" title=\"监听&amp;控制轮播\"></a>监听&amp;控制轮播</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> transferRecognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = transferRecognizer.wordLabels();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = scores.indexOf(<span class=\"built_in\">Math</span>.max(...scores));</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.play(labels[index]);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    overlapFactor: <span class=\"number\">0</span>,</span><br><span class=\"line\">    probabilityThreshold: <span class=\"number\">0.5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.play = <span class=\"function\">(<span class=\"params\">label</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.slider&gt;div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (label === <span class=\"string\">'上一张'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"number\">0</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'img'</span>).length - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.style.transition = <span class=\"string\">\"transform 1s\"</span></span><br><span class=\"line\">    div.style.transform = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"number\">100</span> * curIndex&#125;</span>%)`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"ML15 Python与Js模型互转","date":"2020-04-29T16:00:00.000Z","description":"Javascript玩转机器学习15","toc":1,"top":0,"_content":"## Python模型\n- 通过 Python版 Tensorflow/ Keras生成模型\n- 类型包括： Tensorflow Saved Model、 Keras HDF5mode等\n- 获取：开源网站下载/算法同事提供\n\n## Javascript模型\n- 可以在 TensorflowJs中运行的模型\n- 类型包括： tijs layers model， tojs graph model等\n- 获取：开源网站/通过TFJS生成/由 Python模型转化而来\n\n## 为什么要互转\n-  Python to JavaScript： JavaScript模型可以在浏览器中运行\n-  JavaScript to Python：少见，为了在更多平台运行\n-  JavaScript to JavaScript：分片/量化/加速\n\n## TensorFlow.js Converter\n- 命令行转换器\n- 依赖Python-3.6.8（可以使用Anaconda工具创建环境\n- 在命令行指定输入输出的路径和模型格式即可\n- [地址](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter)\n\n\n## JavaScript：分片/量化/加速\n- 分片：将模型切分，提升加载速度\n- 量化：通过牺牲一部分精度，压缩模型的大小\n- 加速：将模型转换为tfjs_graph_model格式可以加速模型\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_15_py_model.md","raw":"---\ntitle: ML15 Python与Js模型互转\ncategories:\n    - 12 MachineLearning # 一级分类\ntags:\ndate: 2020-04-30\ndescription: Javascript玩转机器学习15\ntoc: 1\ntop: 0\n---\n## Python模型\n- 通过 Python版 Tensorflow/ Keras生成模型\n- 类型包括： Tensorflow Saved Model、 Keras HDF5mode等\n- 获取：开源网站下载/算法同事提供\n\n## Javascript模型\n- 可以在 TensorflowJs中运行的模型\n- 类型包括： tijs layers model， tojs graph model等\n- 获取：开源网站/通过TFJS生成/由 Python模型转化而来\n\n## 为什么要互转\n-  Python to JavaScript： JavaScript模型可以在浏览器中运行\n-  JavaScript to Python：少见，为了在更多平台运行\n-  JavaScript to JavaScript：分片/量化/加速\n\n## TensorFlow.js Converter\n- 命令行转换器\n- 依赖Python-3.6.8（可以使用Anaconda工具创建环境\n- 在命令行指定输入输出的路径和模型格式即可\n- [地址](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter)\n\n\n## JavaScript：分片/量化/加速\n- 分片：将模型切分，提升加载速度\n- 量化：通过牺牲一部分精度，压缩模型的大小\n- 加速：将模型转换为tfjs_graph_model格式可以加速模型\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_15_py_model","published":1,"updated":"2020-04-29T07:50:47.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9l4bp9d0000e8y6emazk23z","content":"<h2 id=\"Python模型\"><a href=\"#Python模型\" class=\"headerlink\" title=\"Python模型\"></a>Python模型</h2><ul>\n<li>通过 Python版 Tensorflow/ Keras生成模型</li>\n<li>类型包括： Tensorflow Saved Model、 Keras HDF5mode等</li>\n<li>获取：开源网站下载/算法同事提供</li>\n</ul>\n<h2 id=\"Javascript模型\"><a href=\"#Javascript模型\" class=\"headerlink\" title=\"Javascript模型\"></a>Javascript模型</h2><ul>\n<li>可以在 TensorflowJs中运行的模型</li>\n<li>类型包括： tijs layers model， tojs graph model等</li>\n<li>获取：开源网站/通过TFJS生成/由 Python模型转化而来</li>\n</ul>\n<h2 id=\"为什么要互转\"><a href=\"#为什么要互转\" class=\"headerlink\" title=\"为什么要互转\"></a>为什么要互转</h2><ul>\n<li>Python to JavaScript： JavaScript模型可以在浏览器中运行</li>\n<li>JavaScript to Python：少见，为了在更多平台运行</li>\n<li>JavaScript to JavaScript：分片/量化/加速</li>\n</ul>\n<h2 id=\"TensorFlow-js-Converter\"><a href=\"#TensorFlow-js-Converter\" class=\"headerlink\" title=\"TensorFlow.js Converter\"></a>TensorFlow.js Converter</h2><ul>\n<li>命令行转换器</li>\n<li>依赖Python-3.6.8（可以使用Anaconda工具创建环境</li>\n<li>在命令行指定输入输出的路径和模型格式即可</li>\n<li><a href=\"https://github.com/tensorflow/tfjs/tree/master/tfjs-converter\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h2 id=\"JavaScript：分片-量化-加速\"><a href=\"#JavaScript：分片-量化-加速\" class=\"headerlink\" title=\"JavaScript：分片/量化/加速\"></a>JavaScript：分片/量化/加速</h2><ul>\n<li>分片：将模型切分，提升加载速度</li>\n<li>量化：通过牺牲一部分精度，压缩模型的大小</li>\n<li>加速：将模型转换为tfjs_graph_model格式可以加速模型</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python模型\"><a href=\"#Python模型\" class=\"headerlink\" title=\"Python模型\"></a>Python模型</h2><ul>\n<li>通过 Python版 Tensorflow/ Keras生成模型</li>\n<li>类型包括： Tensorflow Saved Model、 Keras HDF5mode等</li>\n<li>获取：开源网站下载/算法同事提供</li>\n</ul>\n<h2 id=\"Javascript模型\"><a href=\"#Javascript模型\" class=\"headerlink\" title=\"Javascript模型\"></a>Javascript模型</h2><ul>\n<li>可以在 TensorflowJs中运行的模型</li>\n<li>类型包括： tijs layers model， tojs graph model等</li>\n<li>获取：开源网站/通过TFJS生成/由 Python模型转化而来</li>\n</ul>\n<h2 id=\"为什么要互转\"><a href=\"#为什么要互转\" class=\"headerlink\" title=\"为什么要互转\"></a>为什么要互转</h2><ul>\n<li>Python to JavaScript： JavaScript模型可以在浏览器中运行</li>\n<li>JavaScript to Python：少见，为了在更多平台运行</li>\n<li>JavaScript to JavaScript：分片/量化/加速</li>\n</ul>\n<h2 id=\"TensorFlow-js-Converter\"><a href=\"#TensorFlow-js-Converter\" class=\"headerlink\" title=\"TensorFlow.js Converter\"></a>TensorFlow.js Converter</h2><ul>\n<li>命令行转换器</li>\n<li>依赖Python-3.6.8（可以使用Anaconda工具创建环境</li>\n<li>在命令行指定输入输出的路径和模型格式即可</li>\n<li><a href=\"https://github.com/tensorflow/tfjs/tree/master/tfjs-converter\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h2 id=\"JavaScript：分片-量化-加速\"><a href=\"#JavaScript：分片-量化-加速\" class=\"headerlink\" title=\"JavaScript：分片/量化/加速\"></a>JavaScript：分片/量化/加速</h2><ul>\n<li>分片：将模型切分，提升加载速度</li>\n<li>量化：通过牺牲一部分精度，压缩模型的大小</li>\n<li>加速：将模型转换为tfjs_graph_model格式可以加速模型</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"Vue状态管理 & Vuex总结","date":"2020-04-29T16:00:00.000Z","description":"多组件下 共享状态 的解决方案","toc":1,"top":0,"_content":"# Vue状态管理 & Vuex\n\n### 单向数据流\n\n- **state：**驱动应用的数据源；\n- **view：**以声明方式将 **state** 映射到视图；\n- **actions：**响应在 **view** 上的用户输入导致的state变化。\n\n![](/images/vuex1.png)\n\n### 多组件共享状态的需求：\n\n- 多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力\n- 来自不同视图的行为需要**变更同一状态**：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码\n\n（共享状态，不仅仅是多组件**读取**同一状态，也包含多组件**变更**同一状态）\n\n## 基于state的简单状态管理\n\n- 在vue实例外的作用域，定义一个state对象，作为共享状态\n\n```jsx\nlet publicState = {}\nlet vm1 = new Vue({\n  name: 'vm1',\n  data: publicState\n})\nlet vm2 = new Vue({\n  name: 'vm2',\n  data: publicState\n})\n```\n\n- 简单的store模式\n\n```jsx\nlet store={\n  state:{\n    a:''\n  },\n  setStateA(){},\n  clearStateA(){},\n}\n\n//把store.state放在vue实例的data里\n\nlet vm1 = new Vue({\n  name:'vm1',\n  data:{\n    privateState:{}, //组件的私有状态\n    publicState:store.state //实例外的共有状态\n  }\n})\n\nlet vm2 = new Vue({\n  name:'vm2',\n  data:{\n    privateState:{},\n    publicState:store.state\n  }\n})\n```\n\n组件们可以共享store中的状态，也可以通过actions变更状态\n\n因为共享状态放在组件的data里，store变化也会驱动组件view变更\n\n![](vuex2.png)\n\n## Vuex基本思想\n\n把组件的共享状态抽取出来，以一个全局单例模式管理\n\n在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。\n\n![](vuex3.png)\n\n## Vuex的使用&子组件注入\n\nsrc/store/index.js\n\n```jsx\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    },\n    decrement (state) {\n      state.count--\n    }\n  }\n})\n```\n\n/src/main.js\n\n```jsx\nimport Vue from 'vue'\nimport store from '@/store'\nimport router from '@/router'\nimport App from '@/App'\n\n// store作为选项传入根组件，是将$store注入所有子组件\n// 子组件都可以通过this.$store访问全局store\n\n// eslint-disable-next-line no-new\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  render: h => h(App)\n})\n```\n\n## Vuex的核心思想一：state\n\nVuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。\n\n至此它便作为一个“唯一数据源 (SSOT)”而存在。\n\n这也意味着，每个应用将仅仅包含一个 store 实例。\n\n单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\n\n### 子组件获取state & mapState辅助函数\n\n/src/page/home.vue\n\n```jsx\n <template>\n  <div id=\"home\">\n    <div>count：{{count}}</div>\n    <div>count1：{{count1}}</div>\n    <div>count3：{{count3}}</div>\n    <div>count4：{{count4}}</div>\n    <div>count5：{{count5}}</div>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  name: 'home',\n  data () {\n    return {\n      message: 'hello',\n      localCount: 1\n    }\n  },\n  computed: {\n    // 方式1：直接从Vue原型链上获取$store\n    count1 () {\n      return this.$store.state.count\n    },\n    // 方式2：mapState方法传状态名数组\n    ...mapState(['count']),\n    ...mapState({\n      // 方式3：mapState传对象，键为状态别名，值为状态名\n      count3: 'count',\n      // 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数\n      count4: state => state.count,\n      // 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）\n      count5 (state) {\n        return this.localCount + state.count\n      }\n    })\n  },\n  methods: {\n    increment () {\n      this.$store.commit('increment')\n    },\n    decrement () {\n      this.$store.commit('decrement')\n    }\n  }\n}\n</script>\n```\n\n## Vuex核心思想二：getter\n\n### 派生状态\n\n类似于vue组件的计算属性，可以从store的state中派生出一些状态\n\n```jsx\nexport default new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, desc: 'test1', done: false },\n      { id: 2, desc: 'test2', done: true },\n      { id: 3, desc: 'test3', done: false }\n    ]\n  },\n  getters: {\n\t\t//getter中可以接受其他getter作为参数\n    maxTodoId (state,getters) {\n      return state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    },\n    doneTodoCount (state) {\n      return state.todos.filter(todo => todo.done === true).length\n    }\n  }\n})\n```\n\n### 通过this.$store.state.getters属性 / mapGetters访问派生状态\n\n```jsx\ncomputed: {\n  ...mapGetters(['doneTodoCount']),\n  doneTodoCount2 () {\n    return this.$store.getters.doneTodoCount\n  }\n},\n```\n\n### getter传参：让getter返回函数\n\n```jsx\ngetters: {\n  getTodoBySearch: (state) => (s) => {\n    return state.todos.filter(todo => {\n      return (todo.id + todo.desc).indexOf(s) >= 0\n    })\n  }\n}\n```\n\n## Vuex核心思想三：mutation\n\n### 提交mutation\n\n组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)\n\n```jsx\nexport default {\n  name: 'home',\n  data () {\n    return {\n    }\n  },\n  methods: {\n    addTodo (e) {\n      if (e.keyCode === 13 && this.model.desc) {\n        this.$store.commit('addTodo', this.model.desc)\n        this.model.desc = ''\n      }\n    }\n  }\n}\n\n```\n\n其中**addTodo**就是在store的mutation中定义的一种变更：\n\n```jsx\nmutations: {\n  addTodo (state, desc) {\n    const maxTodoId = state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    const todo = {\n      desc,\n      id: maxTodoId + 1,\n      done: false\n    }\n    state.todos.push(todo)\n  }\n}\n```\n\n### **提交载荷（Payload）**\n\n可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：\n\n```jsx\n// src/store/index.js\nmutations: {\n  increment (state, payload) {\n    \n  }\n}\n\n// src/page/home.vue\nlet payload={a:1,b:2}\nstore.commit('increment', payload)\n```\n\n### Mutation 需遵守 Vue 的响应规则\n\nVuex 的 store 中的状态是响应式的，\n\n当我们变更状态时，\n\n监视状态的 Vue 组件也会自动更新,\n\n因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项\n\n1. 最好提前在你的 store 中初始化好所有所需属性。\n2. 当需要在对象上添加新属性时，应该\n    - 使用 `Vue.set(obj, 'newProp', 123)`\n    - 以新对象替换老对象。例如，利用**[对象展开运算符](https://github.com/tc39/proposal-object-rest-spread)**：\n\n    ```jsx\n    state.obj = { ...state.obj, newProp: 123 }\n    ```\n\n### 使用常量替代 Mutation 事件类型\n\n```jsx\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n### Mutation 必须是同步函数\n\ndevtools捕捉会mutations记录，每次记录前一状态+后一状态的快照\n\n如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改\n\n在回调函数中进行的状态的改变都是不可追踪的\n\n因此很**不利于调试**\n\n## Vuex核心思想四：Action\n\n### Action与Mutation类似，不同点：\n\n- Action 提交(commit)的是 mutation，而**不是直接变更状态**。\n- Action 可以包含任意**异步**操作。\n\n### action函数的定义\n\n```jsx\n//...\nactions: {\n  addTodo (context) {\n    // 可以通过context参数去调用commit，获取state和getters\n    // context区别于state（module中会讲到\n    setTimeout(() => {\n      context.commit('addTodo')\n      // context.state\n      // context.getters\n    }, 1000)\n  },\n  addTodo2 ({ commit, state, getters }) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n    }, 1000)\n  }\n}\n//...\n```\n\n### 组件分发action（可以带载荷/参数\n\n```jsx\nmethods: {\n  addTodo (e) {\n    this.$store.dispatch('addTodo', payload)\n    this.$store.dispatch({\n      type: 'addTodo',\n      ...payload\n    })\n  }\n}\n\n//action接收payload参数\n//action内部也可以dispatch其他action\nactions: {\n  addTodo2 ({ commit, state, getters, dispatch }, payload) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n\t\t\t//dispatch\n    }, 1000)\n  }\n}\n```\n\n### 组合action\n\n- action可以返回一个promise函数\n\n```jsx\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n- dispatch可以处理action返回的promise，并仍然返回promise\n\n```jsx\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n- 利用await/async编写组合action更加简洁\n\n```jsx\n// 假设 getData() 和 getOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ commit, dispatch }) {\n    await dispatch('actionA')\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n## Vuex核心思想五：Module\n\n当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿\n\n因此Vuex允许将store按模块来划分，\n\n每个store拥有自己的state、getter、mutations、actions、子模块\n\n```jsx\n// src/store/module/moduleA.js\nexport default {\n  state: {},\n  getter: {},\n  mutations: {},\n  actions: {}\n}\n\n// src/store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport moduleA from 'module/moduleA'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    a: moduleA\n  },\n\t...\n})\n```\n\n### 模块内的局部状态state（getter mutation action获取state\n\n**对于模块内的getter、mutation函数**：\n\n接收的第一个参数：state，指向的是模块内的局部状态\n\ngetter函数接收的**第三个**参数是根节点状态：**rootState**\n\n**对于模块内的action函数:**\n\ncontext.state指向的也是模块的局部状态，根节点的状态为**context.rootState**\n\n### 全局命名空间（组件获取getter mutation action\n\n默认情况：模块内部的 action、mutation 和 getter 是注册在**全局命名空间**的——这样使得多个模块能够对同一 mutation 或 action 作出响应。\n\n### 带命名空间的模块\n\n如果希望你的模块具有更高的**封装度和复用性**，你可以通过添加 **namespaced: true** 的方式使其成为带命名空间的模块。\n\n```jsx\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: { ... }, // 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 没加namespaced属性，所以继承父模块的命名空间\n        myPage: {\n          state: { ... },\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: { ... },\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n启用了命名空间的 getter 和 action 会**收到局部化的 getter，dispatch 和 commit**。\n\n换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。\n\n所以：更改 namespaced 属性后不需要修改模块内的代码\n\n### 带命名空间的模块内访问全局内容(Global Assets)\n\nGlobal Assets即全局的state,getter,mutation,action\n\n- getter的第三、第四参数：rootState、rootGetters\n- action的context参数包含:rootState、rootGetters\n- 全局commit、dispatch：传入参数root:true\n\n### 带命名空间的模块注册全局 action\n\n传入root选项，值为true\n\n```jsx\n...\nsomeAction:{\n\troot:true,\n\thandler:()=>{}\n}\n...\n```\n\n### mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\n\n```jsx\n// 方法一：直接在状态名前加命名空间\ncomputed: {\n  ...mapState({\n    a: state => state.some.nested.module.a,\n    b: state => state.some.nested.module.b\n  })\n},\nmethods: {\n  ...mapActions([\n    'some/nested/module/foo', // -> this['some/nested/module/foo']()\n    'some/nested/module/bar' // -> this['some/nested/module/bar']()\n  ])\n}\n\n// 方法二：也可以把共有的命名空间传给函数第一个参数\ncomputed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a,\n    b: state => state.b\n  })\n},\nmethods: {\n  ...mapActions('some/nested/module', [\n    'foo', // -> this.foo()\n    'bar' // -> this.bar()\n  ])\n}\n\n//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法\nimport { createNamespacedHelpers } from 'vuex'\n\nconst { mapState, mapActions } = createNamespacedHelpers('some/nested/module')\n```\n\n### 动态注册模块\n\n在store已经实例化后，如果想添加模块，可以用registerModule方法\n\n```jsx\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({ /* 选项 */ })\n\n// 注册模块 `myModule`\nstore.registerModule('myModule', {\n  // ...\n})\n// 注册嵌套模块 `nested/myModule`\nstore.registerModule(['nested', 'myModule'], {\n  // ...\n})\n```\n\n卸载动态模块：unregisterModule（不能卸载静态模块\n\n判断模块是否存在：hasModule\n\n## 纯对象state&函数声明state\n\n纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。\n\n因此可以和vue组件内的data一样，使用函数来声明state：\n\n```jsx\nconst MyReusableModule = {\n  state () {\n    return {\n      foo: 'bar'\n    }\n  },\n  // mutation, action 和 getter 等等...\n}\n```\n\n## 严格模式\n\n在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误\n\n## v-model & Vuex的state\n\nv-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：\n\n```jsx\n...\ncomputed:{\n\tattr:{\n\t\tgetter(){\n\t\t\treturn this.$store.state.attr\n\t\t},\n\t\tsetter(val){\n\t\t\tthis.$store.commit('updateAttr',val)\n\t\t}\n\t}\n}\n```","source":"_posts/vue_store_and_vuex.md","raw":"---\ntitle: Vue状态管理 & Vuex总结\ncategories:\n    - 07 工具库 # 一级分类\ntags:\ndate: 2020-04-30\ndescription: 多组件下 共享状态 的解决方案\ntoc: 1\ntop: 0\n---\n# Vue状态管理 & Vuex\n\n### 单向数据流\n\n- **state：**驱动应用的数据源；\n- **view：**以声明方式将 **state** 映射到视图；\n- **actions：**响应在 **view** 上的用户输入导致的state变化。\n\n![](/images/vuex1.png)\n\n### 多组件共享状态的需求：\n\n- 多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力\n- 来自不同视图的行为需要**变更同一状态**：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码\n\n（共享状态，不仅仅是多组件**读取**同一状态，也包含多组件**变更**同一状态）\n\n## 基于state的简单状态管理\n\n- 在vue实例外的作用域，定义一个state对象，作为共享状态\n\n```jsx\nlet publicState = {}\nlet vm1 = new Vue({\n  name: 'vm1',\n  data: publicState\n})\nlet vm2 = new Vue({\n  name: 'vm2',\n  data: publicState\n})\n```\n\n- 简单的store模式\n\n```jsx\nlet store={\n  state:{\n    a:''\n  },\n  setStateA(){},\n  clearStateA(){},\n}\n\n//把store.state放在vue实例的data里\n\nlet vm1 = new Vue({\n  name:'vm1',\n  data:{\n    privateState:{}, //组件的私有状态\n    publicState:store.state //实例外的共有状态\n  }\n})\n\nlet vm2 = new Vue({\n  name:'vm2',\n  data:{\n    privateState:{},\n    publicState:store.state\n  }\n})\n```\n\n组件们可以共享store中的状态，也可以通过actions变更状态\n\n因为共享状态放在组件的data里，store变化也会驱动组件view变更\n\n![](vuex2.png)\n\n## Vuex基本思想\n\n把组件的共享状态抽取出来，以一个全局单例模式管理\n\n在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。\n\n![](vuex3.png)\n\n## Vuex的使用&子组件注入\n\nsrc/store/index.js\n\n```jsx\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    },\n    decrement (state) {\n      state.count--\n    }\n  }\n})\n```\n\n/src/main.js\n\n```jsx\nimport Vue from 'vue'\nimport store from '@/store'\nimport router from '@/router'\nimport App from '@/App'\n\n// store作为选项传入根组件，是将$store注入所有子组件\n// 子组件都可以通过this.$store访问全局store\n\n// eslint-disable-next-line no-new\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  render: h => h(App)\n})\n```\n\n## Vuex的核心思想一：state\n\nVuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。\n\n至此它便作为一个“唯一数据源 (SSOT)”而存在。\n\n这也意味着，每个应用将仅仅包含一个 store 实例。\n\n单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\n\n### 子组件获取state & mapState辅助函数\n\n/src/page/home.vue\n\n```jsx\n <template>\n  <div id=\"home\">\n    <div>count：{{count}}</div>\n    <div>count1：{{count1}}</div>\n    <div>count3：{{count3}}</div>\n    <div>count4：{{count4}}</div>\n    <div>count5：{{count5}}</div>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  name: 'home',\n  data () {\n    return {\n      message: 'hello',\n      localCount: 1\n    }\n  },\n  computed: {\n    // 方式1：直接从Vue原型链上获取$store\n    count1 () {\n      return this.$store.state.count\n    },\n    // 方式2：mapState方法传状态名数组\n    ...mapState(['count']),\n    ...mapState({\n      // 方式3：mapState传对象，键为状态别名，值为状态名\n      count3: 'count',\n      // 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数\n      count4: state => state.count,\n      // 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）\n      count5 (state) {\n        return this.localCount + state.count\n      }\n    })\n  },\n  methods: {\n    increment () {\n      this.$store.commit('increment')\n    },\n    decrement () {\n      this.$store.commit('decrement')\n    }\n  }\n}\n</script>\n```\n\n## Vuex核心思想二：getter\n\n### 派生状态\n\n类似于vue组件的计算属性，可以从store的state中派生出一些状态\n\n```jsx\nexport default new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, desc: 'test1', done: false },\n      { id: 2, desc: 'test2', done: true },\n      { id: 3, desc: 'test3', done: false }\n    ]\n  },\n  getters: {\n\t\t//getter中可以接受其他getter作为参数\n    maxTodoId (state,getters) {\n      return state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    },\n    doneTodoCount (state) {\n      return state.todos.filter(todo => todo.done === true).length\n    }\n  }\n})\n```\n\n### 通过this.$store.state.getters属性 / mapGetters访问派生状态\n\n```jsx\ncomputed: {\n  ...mapGetters(['doneTodoCount']),\n  doneTodoCount2 () {\n    return this.$store.getters.doneTodoCount\n  }\n},\n```\n\n### getter传参：让getter返回函数\n\n```jsx\ngetters: {\n  getTodoBySearch: (state) => (s) => {\n    return state.todos.filter(todo => {\n      return (todo.id + todo.desc).indexOf(s) >= 0\n    })\n  }\n}\n```\n\n## Vuex核心思想三：mutation\n\n### 提交mutation\n\n组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)\n\n```jsx\nexport default {\n  name: 'home',\n  data () {\n    return {\n    }\n  },\n  methods: {\n    addTodo (e) {\n      if (e.keyCode === 13 && this.model.desc) {\n        this.$store.commit('addTodo', this.model.desc)\n        this.model.desc = ''\n      }\n    }\n  }\n}\n\n```\n\n其中**addTodo**就是在store的mutation中定义的一种变更：\n\n```jsx\nmutations: {\n  addTodo (state, desc) {\n    const maxTodoId = state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    const todo = {\n      desc,\n      id: maxTodoId + 1,\n      done: false\n    }\n    state.todos.push(todo)\n  }\n}\n```\n\n### **提交载荷（Payload）**\n\n可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：\n\n```jsx\n// src/store/index.js\nmutations: {\n  increment (state, payload) {\n    \n  }\n}\n\n// src/page/home.vue\nlet payload={a:1,b:2}\nstore.commit('increment', payload)\n```\n\n### Mutation 需遵守 Vue 的响应规则\n\nVuex 的 store 中的状态是响应式的，\n\n当我们变更状态时，\n\n监视状态的 Vue 组件也会自动更新,\n\n因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项\n\n1. 最好提前在你的 store 中初始化好所有所需属性。\n2. 当需要在对象上添加新属性时，应该\n    - 使用 `Vue.set(obj, 'newProp', 123)`\n    - 以新对象替换老对象。例如，利用**[对象展开运算符](https://github.com/tc39/proposal-object-rest-spread)**：\n\n    ```jsx\n    state.obj = { ...state.obj, newProp: 123 }\n    ```\n\n### 使用常量替代 Mutation 事件类型\n\n```jsx\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n### Mutation 必须是同步函数\n\ndevtools捕捉会mutations记录，每次记录前一状态+后一状态的快照\n\n如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改\n\n在回调函数中进行的状态的改变都是不可追踪的\n\n因此很**不利于调试**\n\n## Vuex核心思想四：Action\n\n### Action与Mutation类似，不同点：\n\n- Action 提交(commit)的是 mutation，而**不是直接变更状态**。\n- Action 可以包含任意**异步**操作。\n\n### action函数的定义\n\n```jsx\n//...\nactions: {\n  addTodo (context) {\n    // 可以通过context参数去调用commit，获取state和getters\n    // context区别于state（module中会讲到\n    setTimeout(() => {\n      context.commit('addTodo')\n      // context.state\n      // context.getters\n    }, 1000)\n  },\n  addTodo2 ({ commit, state, getters }) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n    }, 1000)\n  }\n}\n//...\n```\n\n### 组件分发action（可以带载荷/参数\n\n```jsx\nmethods: {\n  addTodo (e) {\n    this.$store.dispatch('addTodo', payload)\n    this.$store.dispatch({\n      type: 'addTodo',\n      ...payload\n    })\n  }\n}\n\n//action接收payload参数\n//action内部也可以dispatch其他action\nactions: {\n  addTodo2 ({ commit, state, getters, dispatch }, payload) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n\t\t\t//dispatch\n    }, 1000)\n  }\n}\n```\n\n### 组合action\n\n- action可以返回一个promise函数\n\n```jsx\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n- dispatch可以处理action返回的promise，并仍然返回promise\n\n```jsx\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n- 利用await/async编写组合action更加简洁\n\n```jsx\n// 假设 getData() 和 getOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ commit, dispatch }) {\n    await dispatch('actionA')\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n## Vuex核心思想五：Module\n\n当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿\n\n因此Vuex允许将store按模块来划分，\n\n每个store拥有自己的state、getter、mutations、actions、子模块\n\n```jsx\n// src/store/module/moduleA.js\nexport default {\n  state: {},\n  getter: {},\n  mutations: {},\n  actions: {}\n}\n\n// src/store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport moduleA from 'module/moduleA'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    a: moduleA\n  },\n\t...\n})\n```\n\n### 模块内的局部状态state（getter mutation action获取state\n\n**对于模块内的getter、mutation函数**：\n\n接收的第一个参数：state，指向的是模块内的局部状态\n\ngetter函数接收的**第三个**参数是根节点状态：**rootState**\n\n**对于模块内的action函数:**\n\ncontext.state指向的也是模块的局部状态，根节点的状态为**context.rootState**\n\n### 全局命名空间（组件获取getter mutation action\n\n默认情况：模块内部的 action、mutation 和 getter 是注册在**全局命名空间**的——这样使得多个模块能够对同一 mutation 或 action 作出响应。\n\n### 带命名空间的模块\n\n如果希望你的模块具有更高的**封装度和复用性**，你可以通过添加 **namespaced: true** 的方式使其成为带命名空间的模块。\n\n```jsx\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: { ... }, // 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 没加namespaced属性，所以继承父模块的命名空间\n        myPage: {\n          state: { ... },\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: { ... },\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n启用了命名空间的 getter 和 action 会**收到局部化的 getter，dispatch 和 commit**。\n\n换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。\n\n所以：更改 namespaced 属性后不需要修改模块内的代码\n\n### 带命名空间的模块内访问全局内容(Global Assets)\n\nGlobal Assets即全局的state,getter,mutation,action\n\n- getter的第三、第四参数：rootState、rootGetters\n- action的context参数包含:rootState、rootGetters\n- 全局commit、dispatch：传入参数root:true\n\n### 带命名空间的模块注册全局 action\n\n传入root选项，值为true\n\n```jsx\n...\nsomeAction:{\n\troot:true,\n\thandler:()=>{}\n}\n...\n```\n\n### mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\n\n```jsx\n// 方法一：直接在状态名前加命名空间\ncomputed: {\n  ...mapState({\n    a: state => state.some.nested.module.a,\n    b: state => state.some.nested.module.b\n  })\n},\nmethods: {\n  ...mapActions([\n    'some/nested/module/foo', // -> this['some/nested/module/foo']()\n    'some/nested/module/bar' // -> this['some/nested/module/bar']()\n  ])\n}\n\n// 方法二：也可以把共有的命名空间传给函数第一个参数\ncomputed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a,\n    b: state => state.b\n  })\n},\nmethods: {\n  ...mapActions('some/nested/module', [\n    'foo', // -> this.foo()\n    'bar' // -> this.bar()\n  ])\n}\n\n//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法\nimport { createNamespacedHelpers } from 'vuex'\n\nconst { mapState, mapActions } = createNamespacedHelpers('some/nested/module')\n```\n\n### 动态注册模块\n\n在store已经实例化后，如果想添加模块，可以用registerModule方法\n\n```jsx\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({ /* 选项 */ })\n\n// 注册模块 `myModule`\nstore.registerModule('myModule', {\n  // ...\n})\n// 注册嵌套模块 `nested/myModule`\nstore.registerModule(['nested', 'myModule'], {\n  // ...\n})\n```\n\n卸载动态模块：unregisterModule（不能卸载静态模块\n\n判断模块是否存在：hasModule\n\n## 纯对象state&函数声明state\n\n纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。\n\n因此可以和vue组件内的data一样，使用函数来声明state：\n\n```jsx\nconst MyReusableModule = {\n  state () {\n    return {\n      foo: 'bar'\n    }\n  },\n  // mutation, action 和 getter 等等...\n}\n```\n\n## 严格模式\n\n在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误\n\n## v-model & Vuex的state\n\nv-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：\n\n```jsx\n...\ncomputed:{\n\tattr:{\n\t\tgetter(){\n\t\t\treturn this.$store.state.attr\n\t\t},\n\t\tsetter(val){\n\t\t\tthis.$store.commit('updateAttr',val)\n\t\t}\n\t}\n}\n```","slug":"vue_store_and_vuex","published":1,"updated":"2020-04-30T08:28:05.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9mibvdi0000eky6p49fyvnk","content":"<h1 id=\"Vue状态管理-amp-Vuex\"><a href=\"#Vue状态管理-amp-Vuex\" class=\"headerlink\" title=\"Vue状态管理 &amp; Vuex\"></a>Vue状态管理 &amp; Vuex</h1><h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><ul>\n<li><strong>state：</strong>驱动应用的数据源；</li>\n<li><strong>view：</strong>以声明方式将 <strong>state</strong> 映射到视图；</li>\n<li><strong>actions：</strong>响应在 <strong>view</strong> 上的用户输入导致的state变化。</li>\n</ul>\n<p><img src=\"/images/vuex1.png\" alt></p>\n<h3 id=\"多组件共享状态的需求：\"><a href=\"#多组件共享状态的需求：\" class=\"headerlink\" title=\"多组件共享状态的需求：\"></a>多组件共享状态的需求：</h3><ul>\n<li>多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力</li>\n<li>来自不同视图的行为需要<strong>变更同一状态</strong>：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码</li>\n</ul>\n<p>（共享状态，不仅仅是多组件<strong>读取</strong>同一状态，也包含多组件<strong>变更</strong>同一状态）</p>\n<h2 id=\"基于state的简单状态管理\"><a href=\"#基于state的简单状态管理\" class=\"headerlink\" title=\"基于state的简单状态管理\"></a>基于state的简单状态管理</h2><ul>\n<li>在vue实例外的作用域，定义一个state对象，作为共享状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publicState = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单的store模式</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store=&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setStateA()&#123;&#125;,</span><br><span class=\"line\">  clearStateA()&#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把store.state放在vue实例的data里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;, <span class=\"comment\">//组件的私有状态</span></span><br><span class=\"line\">    publicState:store.state <span class=\"comment\">//实例外的共有状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;,</span><br><span class=\"line\">    publicState:store.state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件们可以共享store中的状态，也可以通过actions变更状态</p>\n<p>因为共享状态放在组件的data里，store变化也会驱动组件view变更</p>\n<p><img src=\"vuex2.png\" alt></p>\n<h2 id=\"Vuex基本思想\"><a href=\"#Vuex基本思想\" class=\"headerlink\" title=\"Vuex基本思想\"></a>Vuex基本思想</h2><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p>\n<p>在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>\n<p><img src=\"vuex3.png\" alt></p>\n<h2 id=\"Vuex的使用-amp-子组件注入\"><a href=\"#Vuex的使用-amp-子组件注入\" class=\"headerlink\" title=\"Vuex的使用&amp;子组件注入\"></a>Vuex的使用&amp;子组件注入</h2><p>src/store/index.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state) &#123;</span><br><span class=\"line\">      state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>/src/main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'@/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'@/App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store作为选项传入根组件，是将$store注入所有子组件</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件都可以通过this.$store访问全局store</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-new</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex的核心思想一：state\"><a href=\"#Vuex的核心思想一：state\" class=\"headerlink\" title=\"Vuex的核心思想一：state\"></a>Vuex的核心思想一：state</h2><p>Vuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。</p>\n<p>至此它便作为一个“唯一数据源 (SSOT)”而存在。</p>\n<p>这也意味着，每个应用将仅仅包含一个 store 实例。</p>\n<p>单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>\n<h3 id=\"子组件获取state-amp-mapState辅助函数\"><a href=\"#子组件获取state-amp-mapState辅助函数\" class=\"headerlink\" title=\"子组件获取state &amp; mapState辅助函数\"></a>子组件获取state &amp; mapState辅助函数</h3><p>/src/page/home.vue</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"home\"</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;count：&#123;&#123;count&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count1：&#123;&#123;count1&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count3：&#123;&#123;count3&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count4：&#123;&#123;count4&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count5：&#123;&#123;count5&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button @click=\"increment\"&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"decrement\"</span>&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mapState &#125; from 'vuex'</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'home',</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      message: 'hello',</span></span><br><span class=\"line\"><span class=\"regexp\">      localCount: 1</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式1：直接从Vue原型链上获取$store</span></span><br><span class=\"line\"><span class=\"regexp\">    count1 () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.$store.state.count</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式2：mapState方法传状态名数组</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(['count']),</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式3：mapState传对象，键为状态别名，值为状态名</span></span><br><span class=\"line\"><span class=\"regexp\">      count3: 'count',</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数</span></span><br><span class=\"line\"><span class=\"regexp\">      count4: state =&gt; state.count,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）</span></span><br><span class=\"line\"><span class=\"regexp\">      count5 (state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.localCount + state.count</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    increment () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('increment')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    decrement () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('decrement')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想二：getter\"><a href=\"#Vuex核心思想二：getter\" class=\"headerlink\" title=\"Vuex核心思想二：getter\"></a>Vuex核心思想二：getter</h2><h3 id=\"派生状态\"><a href=\"#派生状态\" class=\"headerlink\" title=\"派生状态\"></a>派生状态</h3><p>类似于vue组件的计算属性，可以从store的state中派生出一些状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test1'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test2'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test3'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//getter中可以接受其他getter作为参数</span></span><br><span class=\"line\">    maxTodoId (state,getters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doneTodoCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done === <span class=\"literal\">true</span>).length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过this-store-state-getters属性-mapGetters访问派生状态\"><a href=\"#通过this-store-state-getters属性-mapGetters访问派生状态\" class=\"headerlink\" title=\"通过this.$store.state.getters属性 / mapGetters访问派生状态\"></a>通过this.$store.state.getters属性 / mapGetters访问派生状态</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">'doneTodoCount'</span>]),</span><br><span class=\"line\">  doneTodoCount2 () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodoCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"getter传参：让getter返回函数\"><a href=\"#getter传参：让getter返回函数\" class=\"headerlink\" title=\"getter传参：让getter返回函数\"></a>getter传参：让getter返回函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  getTodoBySearch: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (todo.id + todo.desc).indexOf(s) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想三：mutation\"><a href=\"#Vuex核心思想三：mutation\" class=\"headerlink\" title=\"Vuex核心思想三：mutation\"></a>Vuex核心思想三：mutation</h2><h3 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h3><p>组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addTodo (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span> &amp;&amp; <span class=\"keyword\">this</span>.model.desc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'addTodo'</span>, <span class=\"keyword\">this</span>.model.desc)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model.desc = <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<strong>addTodo</strong>就是在store的mutation中定义的一种变更：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  addTodo (state, desc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxTodoId = state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">      desc,</span><br><span class=\"line\">      id: maxTodoId + <span class=\"number\">1</span>,</span><br><span class=\"line\">      done: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state.todos.push(todo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交载荷（Payload）\"><a href=\"#提交载荷（Payload）\" class=\"headerlink\" title=\"提交载荷（Payload）\"></a><strong>提交载荷（Payload）</strong></h3><p>可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/page/home.vue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> payload=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, payload)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h3><p>Vuex 的 store 中的状态是响应式的，</p>\n<p>当我们变更状态时，</p>\n<p>监视状态的 Vue 组件也会自动更新,</p>\n<p>因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项</p>\n<ol>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li><p>当需要在对象上添加新属性时，应该</p>\n<ul>\n<li>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code></li>\n<li><p>以新对象替换老对象。例如，利用<strong><a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">对象展开运算符</a></strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h3><p>devtools捕捉会mutations记录，每次记录前一状态+后一状态的快照</p>\n<p>如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改</p>\n<p>在回调函数中进行的状态的改变都是不可追踪的</p>\n<p>因此很<strong>不利于调试</strong></p>\n<h2 id=\"Vuex核心思想四：Action\"><a href=\"#Vuex核心思想四：Action\" class=\"headerlink\" title=\"Vuex核心思想四：Action\"></a>Vuex核心思想四：Action</h2><h3 id=\"Action与Mutation类似，不同点：\"><a href=\"#Action与Mutation类似，不同点：\" class=\"headerlink\" title=\"Action与Mutation类似，不同点：\"></a>Action与Mutation类似，不同点：</h3><ul>\n<li>Action 提交(commit)的是 mutation，而<strong>不是直接变更状态</strong>。</li>\n<li>Action 可以包含任意<strong>异步</strong>操作。</li>\n</ul>\n<h3 id=\"action函数的定义\"><a href=\"#action函数的定义\" class=\"headerlink\" title=\"action函数的定义\"></a>action函数的定义</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo (context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以通过context参数去调用commit，获取state和getters</span></span><br><span class=\"line\">    <span class=\"comment\">// context区别于state（module中会讲到</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// context.state</span></span><br><span class=\"line\">      <span class=\"comment\">// context.getters</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件分发action（可以带载荷-参数\"><a href=\"#组件分发action（可以带载荷-参数\" class=\"headerlink\" title=\"组件分发action（可以带载荷/参数\"></a>组件分发action（可以带载荷/参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addTodo (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'addTodo'</span>, payload)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'addTodo'</span>,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//action接收payload参数</span></span><br><span class=\"line\"><span class=\"comment\">//action内部也可以dispatch其他action</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters, dispatch &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//dispatch</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合action\"><a href=\"#组合action\" class=\"headerlink\" title=\"组合action\"></a>组合action</h3><ul>\n<li>action可以返回一个promise函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatch可以处理action返回的promise，并仍然返回promise</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用await/async编写组合action更加简洁</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; commit, dispatch &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>)</span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想五：Module\"><a href=\"#Vuex核心思想五：Module\" class=\"headerlink\" title=\"Vuex核心思想五：Module\"></a>Vuex核心思想五：Module</h2><p>当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿</p>\n<p>因此Vuex允许将store按模块来划分，</p>\n<p>每个store拥有自己的state、getter、mutations、actions、子模块</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/module/moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  getter: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">'module/moduleA'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块内的局部状态state（getter-mutation-action获取state\"><a href=\"#模块内的局部状态state（getter-mutation-action获取state\" class=\"headerlink\" title=\"模块内的局部状态state（getter mutation action获取state\"></a>模块内的局部状态state（getter mutation action获取state</h3><p><strong>对于模块内的getter、mutation函数</strong>：</p>\n<p>接收的第一个参数：state，指向的是模块内的局部状态</p>\n<p>getter函数接收的<strong>第三个</strong>参数是根节点状态：<strong>rootState</strong></p>\n<p><strong>对于模块内的action函数:</strong></p>\n<p>context.state指向的也是模块的局部状态，根节点的状态为<strong>context.rootState</strong></p>\n<h3 id=\"全局命名空间（组件获取getter-mutation-action\"><a href=\"#全局命名空间（组件获取getter-mutation-action\" class=\"headerlink\" title=\"全局命名空间（组件获取getter mutation action\"></a>全局命名空间（组件获取getter mutation action</h3><p>默认情况：模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>\n<h3 id=\"带命名空间的模块\"><a href=\"#带命名空间的模块\" class=\"headerlink\" title=\"带命名空间的模块\"></a>带命名空间的模块</h3><p>如果希望你的模块具有更高的<strong>封装度和复用性</strong>，你可以通过添加 <strong>namespaced: true</strong> 的方式使其成为带命名空间的模块。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      state: &#123; ... &#125;, <span class=\"comment\">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      getters: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/isAdmin']</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      actions: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没加namespaced属性，所以继承父模块的命名空间</span></span><br><span class=\"line\">        myPage: &#123;</span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/profile']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        posts: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/posts/popular']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用了命名空间的 getter 和 action 会<strong>收到局部化的 getter，dispatch 和 commit</strong>。</p>\n<p>换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。</p>\n<p>所以：更改 namespaced 属性后不需要修改模块内的代码</p>\n<h3 id=\"带命名空间的模块内访问全局内容-Global-Assets\"><a href=\"#带命名空间的模块内访问全局内容-Global-Assets\" class=\"headerlink\" title=\"带命名空间的模块内访问全局内容(Global Assets)\"></a>带命名空间的模块内访问全局内容(Global Assets)</h3><p>Global Assets即全局的state,getter,mutation,action</p>\n<ul>\n<li>getter的第三、第四参数：rootState、rootGetters</li>\n<li>action的context参数包含:rootState、rootGetters</li>\n<li>全局commit、dispatch：传入参数root:true</li>\n</ul>\n<h3 id=\"带命名空间的模块注册全局-action\"><a href=\"#带命名空间的模块注册全局-action\" class=\"headerlink\" title=\"带命名空间的模块注册全局 action\"></a>带命名空间的模块注册全局 action</h3><p>传入root选项，值为true</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">someAction:&#123;</span><br><span class=\"line\">\troot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\thandler:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\"><a href=\"#mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\" class=\"headerlink\" title=\"mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\"></a>mapState, mapGetters, mapActions 和 mapMutations操作命名空间：</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接在状态名前加命名空间</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/foo'</span>, <span class=\"comment\">// -&gt; this['some/nested/module/foo']()</span></span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/bar'</span> <span class=\"comment\">// -&gt; this['some/nested/module/bar']()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二：也可以把共有的命名空间传给函数第一个参数</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions(<span class=\"string\">'some/nested/module'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'foo'</span>, <span class=\"comment\">// -&gt; this.foo()</span></span><br><span class=\"line\">    <span class=\"string\">'bar'</span> <span class=\"comment\">// -&gt; this.bar()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class=\"string\">'some/nested/module'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态注册模块\"><a href=\"#动态注册模块\" class=\"headerlink\" title=\"动态注册模块\"></a>动态注册模块</h3><p>在store已经实例化后，如果想添加模块，可以用registerModule方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123; <span class=\"comment\">/* 选项 */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册模块 `myModule`</span></span><br><span class=\"line\">store.registerModule(<span class=\"string\">'myModule'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 注册嵌套模块 `nested/myModule`</span></span><br><span class=\"line\">store.registerModule([<span class=\"string\">'nested'</span>, <span class=\"string\">'myModule'</span>], &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>卸载动态模块：unregisterModule（不能卸载静态模块</p>\n<p>判断模块是否存在：hasModule</p>\n<h2 id=\"纯对象state-amp-函数声明state\"><a href=\"#纯对象state-amp-函数声明state\" class=\"headerlink\" title=\"纯对象state&amp;函数声明state\"></a>纯对象state&amp;函数声明state</h2><p>纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。</p>\n<p>因此可以和vue组件内的data一样，使用函数来声明state：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyReusableModule = &#123;</span><br><span class=\"line\">  state () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// mutation, action 和 getter 等等...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误</p>\n<h2 id=\"v-model-amp-Vuex的state\"><a href=\"#v-model-amp-Vuex的state\" class=\"headerlink\" title=\"v-model &amp; Vuex的state\"></a>v-model &amp; Vuex的state</h2><p>v-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tattr:&#123;</span><br><span class=\"line\">\t\tgetter()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.attr</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsetter(val)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'updateAttr'</span>,val)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue状态管理-amp-Vuex\"><a href=\"#Vue状态管理-amp-Vuex\" class=\"headerlink\" title=\"Vue状态管理 &amp; Vuex\"></a>Vue状态管理 &amp; Vuex</h1><h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><ul>\n<li><strong>state：</strong>驱动应用的数据源；</li>\n<li><strong>view：</strong>以声明方式将 <strong>state</strong> 映射到视图；</li>\n<li><strong>actions：</strong>响应在 <strong>view</strong> 上的用户输入导致的state变化。</li>\n</ul>\n<p><img src=\"/images/vuex1.png\" alt></p>\n<h3 id=\"多组件共享状态的需求：\"><a href=\"#多组件共享状态的需求：\" class=\"headerlink\" title=\"多组件共享状态的需求：\"></a>多组件共享状态的需求：</h3><ul>\n<li>多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力</li>\n<li>来自不同视图的行为需要<strong>变更同一状态</strong>：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码</li>\n</ul>\n<p>（共享状态，不仅仅是多组件<strong>读取</strong>同一状态，也包含多组件<strong>变更</strong>同一状态）</p>\n<h2 id=\"基于state的简单状态管理\"><a href=\"#基于state的简单状态管理\" class=\"headerlink\" title=\"基于state的简单状态管理\"></a>基于state的简单状态管理</h2><ul>\n<li>在vue实例外的作用域，定义一个state对象，作为共享状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publicState = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单的store模式</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store=&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setStateA()&#123;&#125;,</span><br><span class=\"line\">  clearStateA()&#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把store.state放在vue实例的data里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;, <span class=\"comment\">//组件的私有状态</span></span><br><span class=\"line\">    publicState:store.state <span class=\"comment\">//实例外的共有状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;,</span><br><span class=\"line\">    publicState:store.state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件们可以共享store中的状态，也可以通过actions变更状态</p>\n<p>因为共享状态放在组件的data里，store变化也会驱动组件view变更</p>\n<p><img src=\"vuex2.png\" alt></p>\n<h2 id=\"Vuex基本思想\"><a href=\"#Vuex基本思想\" class=\"headerlink\" title=\"Vuex基本思想\"></a>Vuex基本思想</h2><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p>\n<p>在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>\n<p><img src=\"vuex3.png\" alt></p>\n<h2 id=\"Vuex的使用-amp-子组件注入\"><a href=\"#Vuex的使用-amp-子组件注入\" class=\"headerlink\" title=\"Vuex的使用&amp;子组件注入\"></a>Vuex的使用&amp;子组件注入</h2><p>src/store/index.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state) &#123;</span><br><span class=\"line\">      state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>/src/main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'@/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'@/App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store作为选项传入根组件，是将$store注入所有子组件</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件都可以通过this.$store访问全局store</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-new</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex的核心思想一：state\"><a href=\"#Vuex的核心思想一：state\" class=\"headerlink\" title=\"Vuex的核心思想一：state\"></a>Vuex的核心思想一：state</h2><p>Vuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。</p>\n<p>至此它便作为一个“唯一数据源 (SSOT)”而存在。</p>\n<p>这也意味着，每个应用将仅仅包含一个 store 实例。</p>\n<p>单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>\n<h3 id=\"子组件获取state-amp-mapState辅助函数\"><a href=\"#子组件获取state-amp-mapState辅助函数\" class=\"headerlink\" title=\"子组件获取state &amp; mapState辅助函数\"></a>子组件获取state &amp; mapState辅助函数</h3><p>/src/page/home.vue</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"home\"</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;count：&#123;&#123;count&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count1：&#123;&#123;count1&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count3：&#123;&#123;count3&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count4：&#123;&#123;count4&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count5：&#123;&#123;count5&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button @click=\"increment\"&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"decrement\"</span>&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mapState &#125; from 'vuex'</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'home',</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      message: 'hello',</span></span><br><span class=\"line\"><span class=\"regexp\">      localCount: 1</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式1：直接从Vue原型链上获取$store</span></span><br><span class=\"line\"><span class=\"regexp\">    count1 () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.$store.state.count</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式2：mapState方法传状态名数组</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(['count']),</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式3：mapState传对象，键为状态别名，值为状态名</span></span><br><span class=\"line\"><span class=\"regexp\">      count3: 'count',</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数</span></span><br><span class=\"line\"><span class=\"regexp\">      count4: state =&gt; state.count,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）</span></span><br><span class=\"line\"><span class=\"regexp\">      count5 (state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.localCount + state.count</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    increment () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('increment')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    decrement () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('decrement')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想二：getter\"><a href=\"#Vuex核心思想二：getter\" class=\"headerlink\" title=\"Vuex核心思想二：getter\"></a>Vuex核心思想二：getter</h2><h3 id=\"派生状态\"><a href=\"#派生状态\" class=\"headerlink\" title=\"派生状态\"></a>派生状态</h3><p>类似于vue组件的计算属性，可以从store的state中派生出一些状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test1'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test2'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test3'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//getter中可以接受其他getter作为参数</span></span><br><span class=\"line\">    maxTodoId (state,getters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doneTodoCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done === <span class=\"literal\">true</span>).length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过this-store-state-getters属性-mapGetters访问派生状态\"><a href=\"#通过this-store-state-getters属性-mapGetters访问派生状态\" class=\"headerlink\" title=\"通过this.$store.state.getters属性 / mapGetters访问派生状态\"></a>通过this.$store.state.getters属性 / mapGetters访问派生状态</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">'doneTodoCount'</span>]),</span><br><span class=\"line\">  doneTodoCount2 () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodoCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"getter传参：让getter返回函数\"><a href=\"#getter传参：让getter返回函数\" class=\"headerlink\" title=\"getter传参：让getter返回函数\"></a>getter传参：让getter返回函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  getTodoBySearch: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (todo.id + todo.desc).indexOf(s) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想三：mutation\"><a href=\"#Vuex核心思想三：mutation\" class=\"headerlink\" title=\"Vuex核心思想三：mutation\"></a>Vuex核心思想三：mutation</h2><h3 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h3><p>组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addTodo (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span> &amp;&amp; <span class=\"keyword\">this</span>.model.desc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'addTodo'</span>, <span class=\"keyword\">this</span>.model.desc)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model.desc = <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<strong>addTodo</strong>就是在store的mutation中定义的一种变更：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  addTodo (state, desc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxTodoId = state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">      desc,</span><br><span class=\"line\">      id: maxTodoId + <span class=\"number\">1</span>,</span><br><span class=\"line\">      done: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state.todos.push(todo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交载荷（Payload）\"><a href=\"#提交载荷（Payload）\" class=\"headerlink\" title=\"提交载荷（Payload）\"></a><strong>提交载荷（Payload）</strong></h3><p>可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/page/home.vue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> payload=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, payload)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h3><p>Vuex 的 store 中的状态是响应式的，</p>\n<p>当我们变更状态时，</p>\n<p>监视状态的 Vue 组件也会自动更新,</p>\n<p>因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项</p>\n<ol>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li><p>当需要在对象上添加新属性时，应该</p>\n<ul>\n<li>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code></li>\n<li><p>以新对象替换老对象。例如，利用<strong><a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">对象展开运算符</a></strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h3><p>devtools捕捉会mutations记录，每次记录前一状态+后一状态的快照</p>\n<p>如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改</p>\n<p>在回调函数中进行的状态的改变都是不可追踪的</p>\n<p>因此很<strong>不利于调试</strong></p>\n<h2 id=\"Vuex核心思想四：Action\"><a href=\"#Vuex核心思想四：Action\" class=\"headerlink\" title=\"Vuex核心思想四：Action\"></a>Vuex核心思想四：Action</h2><h3 id=\"Action与Mutation类似，不同点：\"><a href=\"#Action与Mutation类似，不同点：\" class=\"headerlink\" title=\"Action与Mutation类似，不同点：\"></a>Action与Mutation类似，不同点：</h3><ul>\n<li>Action 提交(commit)的是 mutation，而<strong>不是直接变更状态</strong>。</li>\n<li>Action 可以包含任意<strong>异步</strong>操作。</li>\n</ul>\n<h3 id=\"action函数的定义\"><a href=\"#action函数的定义\" class=\"headerlink\" title=\"action函数的定义\"></a>action函数的定义</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo (context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以通过context参数去调用commit，获取state和getters</span></span><br><span class=\"line\">    <span class=\"comment\">// context区别于state（module中会讲到</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// context.state</span></span><br><span class=\"line\">      <span class=\"comment\">// context.getters</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件分发action（可以带载荷-参数\"><a href=\"#组件分发action（可以带载荷-参数\" class=\"headerlink\" title=\"组件分发action（可以带载荷/参数\"></a>组件分发action（可以带载荷/参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addTodo (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'addTodo'</span>, payload)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'addTodo'</span>,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//action接收payload参数</span></span><br><span class=\"line\"><span class=\"comment\">//action内部也可以dispatch其他action</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters, dispatch &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//dispatch</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合action\"><a href=\"#组合action\" class=\"headerlink\" title=\"组合action\"></a>组合action</h3><ul>\n<li>action可以返回一个promise函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatch可以处理action返回的promise，并仍然返回promise</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用await/async编写组合action更加简洁</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; commit, dispatch &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>)</span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想五：Module\"><a href=\"#Vuex核心思想五：Module\" class=\"headerlink\" title=\"Vuex核心思想五：Module\"></a>Vuex核心思想五：Module</h2><p>当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿</p>\n<p>因此Vuex允许将store按模块来划分，</p>\n<p>每个store拥有自己的state、getter、mutations、actions、子模块</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/module/moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  getter: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">'module/moduleA'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块内的局部状态state（getter-mutation-action获取state\"><a href=\"#模块内的局部状态state（getter-mutation-action获取state\" class=\"headerlink\" title=\"模块内的局部状态state（getter mutation action获取state\"></a>模块内的局部状态state（getter mutation action获取state</h3><p><strong>对于模块内的getter、mutation函数</strong>：</p>\n<p>接收的第一个参数：state，指向的是模块内的局部状态</p>\n<p>getter函数接收的<strong>第三个</strong>参数是根节点状态：<strong>rootState</strong></p>\n<p><strong>对于模块内的action函数:</strong></p>\n<p>context.state指向的也是模块的局部状态，根节点的状态为<strong>context.rootState</strong></p>\n<h3 id=\"全局命名空间（组件获取getter-mutation-action\"><a href=\"#全局命名空间（组件获取getter-mutation-action\" class=\"headerlink\" title=\"全局命名空间（组件获取getter mutation action\"></a>全局命名空间（组件获取getter mutation action</h3><p>默认情况：模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>\n<h3 id=\"带命名空间的模块\"><a href=\"#带命名空间的模块\" class=\"headerlink\" title=\"带命名空间的模块\"></a>带命名空间的模块</h3><p>如果希望你的模块具有更高的<strong>封装度和复用性</strong>，你可以通过添加 <strong>namespaced: true</strong> 的方式使其成为带命名空间的模块。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      state: &#123; ... &#125;, <span class=\"comment\">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      getters: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/isAdmin']</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      actions: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没加namespaced属性，所以继承父模块的命名空间</span></span><br><span class=\"line\">        myPage: &#123;</span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/profile']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        posts: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/posts/popular']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用了命名空间的 getter 和 action 会<strong>收到局部化的 getter，dispatch 和 commit</strong>。</p>\n<p>换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。</p>\n<p>所以：更改 namespaced 属性后不需要修改模块内的代码</p>\n<h3 id=\"带命名空间的模块内访问全局内容-Global-Assets\"><a href=\"#带命名空间的模块内访问全局内容-Global-Assets\" class=\"headerlink\" title=\"带命名空间的模块内访问全局内容(Global Assets)\"></a>带命名空间的模块内访问全局内容(Global Assets)</h3><p>Global Assets即全局的state,getter,mutation,action</p>\n<ul>\n<li>getter的第三、第四参数：rootState、rootGetters</li>\n<li>action的context参数包含:rootState、rootGetters</li>\n<li>全局commit、dispatch：传入参数root:true</li>\n</ul>\n<h3 id=\"带命名空间的模块注册全局-action\"><a href=\"#带命名空间的模块注册全局-action\" class=\"headerlink\" title=\"带命名空间的模块注册全局 action\"></a>带命名空间的模块注册全局 action</h3><p>传入root选项，值为true</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">someAction:&#123;</span><br><span class=\"line\">\troot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\thandler:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\"><a href=\"#mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\" class=\"headerlink\" title=\"mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\"></a>mapState, mapGetters, mapActions 和 mapMutations操作命名空间：</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接在状态名前加命名空间</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/foo'</span>, <span class=\"comment\">// -&gt; this['some/nested/module/foo']()</span></span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/bar'</span> <span class=\"comment\">// -&gt; this['some/nested/module/bar']()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二：也可以把共有的命名空间传给函数第一个参数</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions(<span class=\"string\">'some/nested/module'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'foo'</span>, <span class=\"comment\">// -&gt; this.foo()</span></span><br><span class=\"line\">    <span class=\"string\">'bar'</span> <span class=\"comment\">// -&gt; this.bar()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class=\"string\">'some/nested/module'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态注册模块\"><a href=\"#动态注册模块\" class=\"headerlink\" title=\"动态注册模块\"></a>动态注册模块</h3><p>在store已经实例化后，如果想添加模块，可以用registerModule方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123; <span class=\"comment\">/* 选项 */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册模块 `myModule`</span></span><br><span class=\"line\">store.registerModule(<span class=\"string\">'myModule'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 注册嵌套模块 `nested/myModule`</span></span><br><span class=\"line\">store.registerModule([<span class=\"string\">'nested'</span>, <span class=\"string\">'myModule'</span>], &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>卸载动态模块：unregisterModule（不能卸载静态模块</p>\n<p>判断模块是否存在：hasModule</p>\n<h2 id=\"纯对象state-amp-函数声明state\"><a href=\"#纯对象state-amp-函数声明state\" class=\"headerlink\" title=\"纯对象state&amp;函数声明state\"></a>纯对象state&amp;函数声明state</h2><p>纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。</p>\n<p>因此可以和vue组件内的data一样，使用函数来声明state：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyReusableModule = &#123;</span><br><span class=\"line\">  state () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// mutation, action 和 getter 等等...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误</p>\n<h2 id=\"v-model-amp-Vuex的state\"><a href=\"#v-model-amp-Vuex的state\" class=\"headerlink\" title=\"v-model &amp; Vuex的state\"></a>v-model &amp; Vuex的state</h2><p>v-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tattr:&#123;</span><br><span class=\"line\">\t\tgetter()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.attr</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsetter(val)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'updateAttr'</span>,val)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck94a9aok000107s6rd8dftbu","category_id":"ck94a9aoq000407s68s6ig1ta","_id":"ck94a9aoz000j07s6x6ghx21k"},{"post_id":"ck94a9aox000g07s60jyz77sl","category_id":"ck94a9aoq000407s68s6ig1ta","_id":"ck94a9ap2000r07s6c2244wu2"},{"post_id":"ck94a9aoo000307s6w7pzuvak","category_id":"ck94a9aow000c07s6zttfbfmw","_id":"ck94a9ap4000u07s6khlytw6z"},{"post_id":"ck94a9ap0000n07s6ogbkdqja","category_id":"ck94a9aow000c07s6zttfbfmw","_id":"ck94a9ap5000x07s6ay2dlj2x"},{"post_id":"ck94a9aos000707s6ftj8ki4j","category_id":"ck94a9aoz000k07s625i9jtut","_id":"ck94a9ap6001007s6vk0ftqbs"},{"post_id":"ck94a9aot000907s6lsjzxe1w","category_id":"ck94a9aoz000k07s625i9jtut","_id":"ck94a9ap7001207s6jij0qxvi"},{"post_id":"ck94a9aou000b07s663y8293d","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9ap8001607s6so424ijg"},{"post_id":"ck94a9aoy000i07s6o2ucj0sl","category_id":"ck94a9ap7001307s6opr5hsut","_id":"ck94a9apb001g07s6pglmvm17"},{"post_id":"ck94a9ap1000q07s6uw95hy20","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9ape001o07s6xe30axsj"},{"post_id":"ck94a9apb001f07s618fw84j8","category_id":"ck94a9apa001d07s6tq6y97yo","_id":"ck94a9ape001q07s6fr2k97ho"},{"post_id":"ck94a9ap3000t07s6fmflw7mr","category_id":"ck94a9apa001d07s6tq6y97yo","_id":"ck94a9apf001t07s6uxfbwzvh"},{"post_id":"ck94a9ap4000w07s6f4dfgpm6","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9apg001v07s6zw5tl3d8"},{"post_id":"ck94a9ap5000z07s6wurt2j2o","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94a9apg001y07s6e80ukcue"},{"post_id":"ck94a9apa001c07s6auydr4fa","category_id":"ck94a9apa001d07s6tq6y97yo","_id":"ck94a9api002107s61t4p95hq"},{"post_id":"ck94a9apb001h07s6gbv6l9v2","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apk002807s6b8ya52w1"},{"post_id":"ck94a9api002307s6byxt5p4d","category_id":"ck94a9apa001d07s6tq6y97yo","_id":"ck94a9apl002a07s69tjbx3dz"},{"post_id":"ck94a9apc001k07s62ycnyak8","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apm002d07s6yu60nd6n"},{"post_id":"ck94a9apj002407s6f4bute32","category_id":"ck94a9apa001d07s6tq6y97yo","_id":"ck94a9apn002g07s61sw5hrun"},{"post_id":"ck94a9apk002707s6qyg7wqti","category_id":"ck94a9aoz000k07s625i9jtut","_id":"ck94a9apo002j07s6t9yujlsu"},{"post_id":"ck94a9apd001m07s633wg6drp","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apo002l07s6su6czx91"},{"post_id":"ck94a9apl002907s6tsvah0ld","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9app002p07s6h1f3dl6l"},{"post_id":"ck94a9ape001p07s6d1cl18n7","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apq002q07s6amnbvmo2"},{"post_id":"ck94a9apn002i07s652yvib4d","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9apq002s07s69a5abzxv"},{"post_id":"ck94a9ape001r07s6hqin570p","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apq002t07s67hr21b4t"},{"post_id":"ck94a9apo002k07s6u03r0h8b","category_id":"ck94a9ap5000y07s6qqfx7y62","_id":"ck94a9apq002v07s6j9pxdd1v"},{"post_id":"ck94a9app002o07s6oxpnyozu","category_id":"ck94a9aoz000k07s625i9jtut","_id":"ck94a9apr002w07s6dao6sep5"},{"post_id":"ck94a9apf001u07s6i9fln3bh","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apr002x07s6juglmois"},{"post_id":"ck94a9apg001w07s6k3u9g9fx","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck94a9apr002z07s61cvlhnc7"},{"post_id":"ck94a9aph002007s6wdk2vfv6","category_id":"ck94a9apq002u07s6buopdpec","_id":"ck94a9apr003007s6r6fstnbr"},{"post_id":"ck94a9apl002c07s6b3jocl6i","category_id":"ck94a9apr002y07s6kyvpkdbn","_id":"ck94a9apr003207s6qyla6rwe"},{"post_id":"ck94a9apm002f07s6jcean3x1","category_id":"ck94a9apr003107s65eqhl0j3","_id":"ck94a9aps003307s6abj6ey0p"},{"post_id":"ck94a9bcy003a07s613nqevyi","category_id":"ck94a9aoq000407s68s6ig1ta","_id":"ck94a9bcy003b07s6e17hbxza"},{"post_id":"ck94anlyu0001u2s6smgyds7v","category_id":"ck94a9ap7001307s6opr5hsut","_id":"ck94anlz20004u2s6xsuojj8s"},{"post_id":"ck94anlz10003u2s61s8s144u","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anlz20005u2s6jkahjy5s"},{"post_id":"ck94anlyi0000u2s6joms1287","category_id":"ck94anlyv0002u2s6j2ebax21","_id":"ck94anlz20006u2s6y62da5e5"},{"post_id":"ck94a9ap7001407s63rn39ggf","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmi70007u2s6bf3k68m6"},{"post_id":"ck94a9ap6001107s6xvv3btjs","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmi80008u2s623x48h30"},{"post_id":"ck94a9ap8001507s6nrkz1tcv","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmi90009u2s6q8ryj0bf"},{"post_id":"ck94a9ap8001707s6axz2b1xm","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmi9000au2s6mvindqi7"},{"post_id":"ck94a9ap9001a07s6hqx96r4d","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmi9000bu2s63g2yhuis"},{"post_id":"ck94a9b9s003407s673zaw61u","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmie000cu2s6z9fntc5s"},{"post_id":"ck94a9b9t003507s6dwsd77jn","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmif000du2s6qhjk7go3"},{"post_id":"ck94a9bcu003807s6c3x94c4z","category_id":"ck94a9apd001n07s6hxew9soq","_id":"ck94anmkv000eu2s6pvdxtw6v"},{"post_id":"ck9kppos70001tcy66cini4o5","category_id":"ck94a9apr003107s65eqhl0j3","_id":"ck9kpposf0006tcy6ychantb8"},{"post_id":"ck9kpposa0002tcy6k3gvxeky","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9kpposg0007tcy6nyxa3j0b"},{"post_id":"ck9kpposc0003tcy6fq01ra12","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9kpposh0008tcy6heb9shzq"},{"post_id":"ck9kppot2000atcy6egy10ce2","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9kppot8000btcy6luakvida"},{"post_id":"ck9l0ht4x00003wy6kcjwnoi2","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9l0ht5900013wy6ecm34prk"},{"post_id":"ck9l4bp9d0000e8y6emazk23z","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9l4bpa00001e8y6k3iow3dr"},{"post_id":"ck9kpporo0000tcy6tgrn40o1","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9l4bpa20002e8y6462ec901"},{"post_id":"ck9kppose0005tcy6h1p13e19","category_id":"ck94a9apg001x07s6s45crzq9","_id":"ck9l4bpa30003e8y6vjnnf1wv"},{"post_id":"ck9mibvdi0000eky6p49fyvnk","category_id":"ck94a9ap7001307s6opr5hsut","_id":"ck9mibvdw0001eky6hlgo6hw1"}],"PostTag":[{"post_id":"ck94a9aok000107s6rd8dftbu","tag_id":"ck94a9aor000507s6iqg7i74q","_id":"ck94a9aox000e07s6d5hxj6h8"},{"post_id":"ck94a9aoo000307s6w7pzuvak","tag_id":"ck94a9aow000d07s6m86a5863","_id":"ck94a9ap1000o07s6jhx3sp5g"},{"post_id":"ck94a9aox000g07s60jyz77sl","tag_id":"ck94a9ap0000l07s6nxrswz19","_id":"ck94a9ap4000v07s6570fw4u8"},{"post_id":"ck94a9apl002907s6tsvah0ld","tag_id":"ck94a9apm002e07s64pldqk2w","_id":"ck94a9app002m07s6uvor45de"}],"Tag":[{"name":"stateOfJs","_id":"ck94a9aor000507s6iqg7i74q"},{"name":"360fed","_id":"ck94a9aow000d07s6m86a5863"},{"name":"ES","_id":"ck94a9ap0000l07s6nxrswz19"},{"name":"阿德勒心理学","_id":"ck94a9apm002e07s64pldqk2w"}]}}